<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ÁÉèÂ∑¢</title>
  <icon>https://hejueyun.github.io/icon.png</icon>
  <subtitle>A Self-taught Idiot üñä</subtitle>
  <link href="https://hejueyun.github.io/atom.xml" rel="self"/>
  
  <link href="https://hejueyun.github.io/"/>
  <updated>2022-08-17T08:28:04.970Z</updated>
  <id>https://hejueyun.github.io/</id>
  
  <author>
    <name>‰ΩïÂÜ≥‰∫ë</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dissertation: Fuzzing a Software Verifier</title>
    <link href="https://hejueyun.github.io/posts/a9674538/"/>
    <id>https://hejueyun.github.io/posts/a9674538/</id>
    <published>2022-07-26T18:24:14.000Z</published>
    <updated>2022-08-17T08:28:04.970Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="436add7658aa0105b94dfc6b7f6ed17d2fb62b684b345a45277a2234ad68d16a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;436add7658aa0105b94dfc6b7f6ed17d2fb62b684b345a45277a2234ad68d16a&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ÊëÑÂΩ±ÈöèÁ¨î-Â§ßÁîªÂπÖ</title>
    <link href="https://hejueyun.github.io/posts/b2cceb84/"/>
    <id>https://hejueyun.github.io/posts/b2cceb84/</id>
    <published>2022-07-10T16:13:23.000Z</published>
    <updated>2022-08-02T17:12:45.828Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="7127f69b3a61f1d038075cb20abb310377a2456ecc7bacb7ef0af0b4a93abb72"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;7127f69b3a61f1d038075cb20abb310377a2456ecc7bacb7ef0af0b4a93abb72&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="essay" scheme="https://hejueyun.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>Detection of Software Vulnerabilities: Dynamic Analysis</title>
    <link href="https://hejueyun.github.io/posts/6f7caca3/"/>
    <id>https://hejueyun.github.io/posts/6f7caca3/</id>
    <published>2022-05-27T15:20:05.000Z</published>
    <updated>2022-05-29T22:03:23.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Testing-for-functionality-vs-testing-for-security">1. Testing for functionality vs testing for security</h2><ul><li><p>A majority of security defects and vulnerabilities in software are not directly related to functionality</p><ul><li>i.e. Side-channel effect in the hardware ‰æß‰ø°ÈÅì</li><li>information obtained from the impl. rather than weaknesses in the code</li></ul></li><li><p>Traditional testing checks functionalities for sensible inputs and corner conditions</p></li><li><p>Security testing <strong>also</strong> requires looking for the <strong>wrong, unwanted behavior for uncommon inputs</strong></p></li><li><p><strong>users</strong> will complain about <strong>functional problems</strong>, but <strong>hackers</strong> will not complain about <strong>security problems</strong></p></li></ul><p>To test a software system, we need:</p><ul><li><strong>test suite</strong>ÊµãËØïÂ•ó‰ª∂: a collection of input data</li><li><strong>test oracle</strong>ÊµãËØïÂáÜÂàô: decides if a test succeeded or led to an error<ul><li>A test oracle consists of a long list, which <strong>for every individual test case, specifies what should happen</strong><br>‚Äì A simple test oracle: just looking <strong>if the application does not crash</strong></li></ul></li></ul><h2 id="Code-Coverage-‰ª£Á†ÅË¶ÜÁõñ">2. Code Coverage ‰ª£Á†ÅË¶ÜÁõñ</h2><h3 id="Statement-Coverage-ËØ≠Âè•Ë¶ÜÁõñ">2.1. Statement Coverage ËØ≠Âè•Ë¶ÜÁõñ</h3><ul><li>involves the execution of all the executable statements at least once<ul><li>Ê∂âÂèäÊâÄÊúâÂèØÊâßË°åËØ≠Âè•ÁöÑËá≥Â∞ë‰∏ÄÊ¨°ÊâßË°å</li></ul></li></ul><center><img loading="lazy" src="/posts/6f7caca3/1.jpg" width="600"></center><h3 id="Decision-Coverage-Âà§ÂÆöË¶ÜÁõñ">2.2. Decision Coverage Âà§ÂÆöË¶ÜÁõñ</h3><ul><li>reports the true or false outcomes of each Boolean expression (tough to achieve 100%) <ul><li>Êä•ÂëäÊØè‰∏™Â∏ÉÂ∞îË°®ËææÂºèÁöÑÁúüÊàñÂÅáÁªìÊûú</li><li>(decision outcomes exercised &#x2F; total decision outcomes) * 100</li></ul></li></ul><center><img loading="lazy" src="/posts/6f7caca3/2.jpg" width="600"></center><h3 id="Branch-Coverage-ÂàÜÊîØË¶ÜÁõñ">2.3. Branch Coverage ÂàÜÊîØË¶ÜÁõñ</h3><ul><li>tests every outcome from the code to ensure that every branch is executed at least once<ul><li>ÊµãËØï‰ª£Á†Å‰∏≠ÁöÑÊØè‰∏™ÁªìÊûúÔºå‰ª•Á°Æ‰øùÊØè‰∏™ÂàÜÊîØËá≥Â∞ëË¢´ÊâßË°å‰∏ÄÊ¨°</li><li>(executed branches &#x2F; total branches)*100</li></ul></li></ul><center><img loading="lazy" src="/posts/6f7caca3/3.jpg" width="600"></center><h3 id="Condition-Coverage-Êù°‰ª∂Ë¶ÜÁõñ">2.4. Condition Coverage Êù°‰ª∂Ë¶ÜÁõñ</h3><ul><li>reveals how the variables in the conditional statement are evaluated (logical operands)<ul><li>Êè≠Á§∫‰∫ÜÊù°‰ª∂ËØ≠Âè•‰∏≠ÁöÑÂèòÈáèÊòØÂ¶Ç‰ΩïË¢´ËØÑ‰º∞ÁöÑÔºàÈÄªËæëÊìç‰ΩúÊï∞Ôºâ</li><li>(executed operands &#x2F; total operands)*100</li></ul></li></ul><center><img loading="lazy" src="/posts/6f7caca3/4.jpg" width="600"></center><ul><li><strong>Code coverage criteria</strong> to measure the <strong>test suite quality</strong><ul><li>Statement, decision, branch and condition coverage</li></ul></li><li>Statement coverage does not imply branch coverage</li><li>Other coverage criteria exists, e.g., modified condition&#x2F; decision coverage (MCDC), which is used to test <strong>avionics embedded software</strong>Ëà™Á©∫ÁîµÂ≠êÂµåÂÖ•ÂºèËΩØ‰ª∂</li></ul><h2 id="Dynamic-Detection">3. Dynamic Detection</h2><blockquote><p>Dynamic detection techniques <strong>execute a program</strong> and <strong>monitor the execution</strong> to detect <strong>vulnerabilities</strong></p></blockquote><ul><li><strong>How</strong> should one monitor an execution such that vulnerabilities are detected?</li><li><strong>How many</strong> and <strong>what</strong> program executions (i.e., for what input values) should one monitor?</li></ul><h3 id="Monitoring">3.1. Monitoring</h3><ul><li>In cases where a dynamic analysis is approximative, it can also generate false positives or false negatives, even though it operates on a concrete execution trace<ul><li>Âú®Âä®ÊÄÅÂàÜÊûêÊòØËøë‰ººÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÆÉ‰πüÂèØËÉΩ‰∫ßÁîüÂÅáÈò≥ÊÄßÊàñÂÅáÈò¥ÊÄßÔºåÂ∞ΩÁÆ°ÂÆÉÊòØÂú®ÂÖ∑‰ΩìÁöÑÊâßË°åËΩ®Ëøπ‰∏äÊìç‰ΩúÁöÑ„ÄÇ</li></ul></li><li>For <strong>structured output generation vulnerabilities</strong>, the main challenge is that the intended structure of the generated output is often <strong>implicit</strong>. There exists <strong>no explicit specification</strong> that can be monitored.<ul><li>ÂØπ‰∫éÁªìÊûÑÂåñËæìÂá∫ÁöÑÊºèÊ¥ûÔºå‰∏ªË¶ÅÁöÑÊåëÊàòÊòØÁîüÊàêÁöÑËæìÂá∫ÁöÑÈ¢ÑÊúüÁªìÊûÑÂæÄÂæÄÊòØ<strong>ÈöêÊÄßÁöÑ</strong>„ÄÇ‰∏çÂ≠òÂú®ÂèØ‰ª•Ë¢´ÁõëÊéßÁöÑÊòéÁ°ÆËßÑËåÉ„ÄÇ</li><li>For example, a monitor can use a <strong>fine-grained dynamic taint analysis</strong> to track the flow of untrusted input strings ¬ß flag a violation when untrusted input has an impact on the parse tree of the generated output<ul><li>‰æãÂ¶ÇÔºåÁõëÊéßÂô®ÂèØ‰ª•‰ΩøÁî®<strong>ÁªÜÁ≤íÂ∫¶ÁöÑÂä®ÊÄÅÊ±°ÁÇπÂàÜÊûê</strong>Êù•Ë∑üË∏™‰∏çÂèó‰ø°‰ªªÁöÑËæìÂÖ•Â≠óÁ¨¶‰∏≤ÁöÑÊµÅÂêëÔºåÂΩì‰∏çÂèó‰ø°‰ªªÁöÑËæìÂÖ•ÂØπÁîüÊàêÁöÑËæìÂá∫ÁöÑËß£ÊûêÊ†ë‰∫ßÁîüÂΩ±ÂìçÊó∂ÔºåÂ∞±‰ºöÊ†áËÆ∞Âá∫ËøùËßÑË°å‰∏∫</li></ul></li></ul></li><li><strong>Assertions</strong>, <strong>pre-conditions</strong>, and <strong>post-conditions</strong> can be compiled into the code to provide a monitor for API vulnerabilities at testing time, even if the cost of these compiled-in run-time checks can be too high to use them in production code<ul><li>ÂèØ‰ª•Â∞ÜÊñ≠Ë®Ä„ÄÅÂâçÊù°‰ª∂ÂíåÂêéÊù°‰ª∂ÁºñËØëÂà∞‰ª£Á†Å‰∏≠Ôºå‰ª•‰æøÂú®ÊµãËØïÊó∂Êèê‰æõÂØπAPIÊºèÊ¥ûÁöÑÁõëÊéßÔºåÂç≥‰ΩøËøô‰∫õÁºñËØëÁöÑËøêË°åÊó∂Ê£ÄÊü•ÁöÑÊàêÊú¨Â§™È´òÔºåÊó†Ê≥ïÂú®Áîü‰∫ß‰ª£Á†Å‰∏≠‰ΩøÁî®ÂÆÉ‰ª¨„ÄÇ</li></ul></li><li>Monitoring for race conditions is hard, but some approaches for monitoring data races on shared memory cells exist. E.g., by monitoring whether all shared memory accesses <strong>follow a consistent locking discipline</strong></li></ul><h4 id="Using-BAs-to-check-the-program">3.1.1. Using BAs to check the program</h4><center><img loading="lazy" src="/posts/6f7caca3/5.png" width="600"></center><blockquote><p>A <strong>never claim</strong> can be used to define system behavior ‚Ä¶ It is most commonly used to specify behavior that should never happen. The claim is defined as a series of propositions, or boolean expressions, on the system state that must become true in the sequence specified for the behavior of interest to be matched. </p><ul><li>never claimÂèØ‰ª•Áî®Êù•ÂÆö‰πâÁ≥ªÁªüË°å‰∏∫‚Ä¶<strong>ÂÆÉÊúÄÂ∏∏Ë¢´Áî®Êù•ÊåáÂÆöÊ∞∏Ëøú‰∏çÂ∫îËØ•ÂèëÁîüÁöÑË°å‰∏∫</strong>„ÄÇClaimË¢´ÂÆö‰πâ‰∏∫‰∏ÄÁ≥ªÂàóÂëΩÈ¢òÊàñÂ∏ÉÂ∞îË°®ËææÂºèÔºåËøô‰∫õÂëΩÈ¢òÊàñÂ∏ÉÂ∞îË°®ËææÂºèÂú®Á≥ªÁªüÁä∂ÊÄÅ‰∏äÂøÖÈ°ªÊåâÁÖßÊåáÂÆöÁöÑÈ°∫Â∫èÊàê‰∏∫ÁúüÔºåÊâçËÉΩ‰∏éÊÑüÂÖ¥Ë∂£ÁöÑË°å‰∏∫ÂåπÈÖç„ÄÇ</li></ul></blockquote><ul><li>Á∫øÊÄßÊó∂Â∫èÈÄªËæëËΩ¨Êç¢B√ºchiËá™Âä®Êú∫: convert LTL to never claim</li><li>Theory: check product of model and never claim for accepting state</li><li>ESBMC<ul><li>run <strong>never claim program</strong> as a <strong>monitor thread</strong> concurrently with other program thread(s)<ul><li>no distinction between monitor thread and other threads</li></ul></li></ul></li></ul><h4 id="Ensuring-soundness-of-monitor-thread">3.1.2. Ensuring soundness of monitor thread</h4><center><img loading="lazy" src="/posts/6f7caca3/6.png" width="600"></center><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">atomic_begin</span>();</span><br><span class="line"><span class="built_in">assume</span>(trans_count &lt;= trans_seen + <span class="number">1</span>); </span><br><span class="line">trans_seen = trans_count;</span><br><span class="line"><span class="keyword">switch</span>(state) &#123; </span><br><span class="line">  <span class="keyword">case</span> T0_init:</span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="number">0</span>) </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="built_in">assume</span>((<span class="number">1</span>)); </span><br><span class="line">      state = T0_init;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>) </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="built_in">assume</span>((!cexpr_1 &amp;&amp; cexpr_0)); </span><br><span class="line">      state = accept_S2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">assume</span>(<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> accept_S2: </span><br><span class="line">    <span class="keyword">if</span>(choice == <span class="number">0</span>) </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="built_in">assume</span>((!cexpr_1)); </span><br><span class="line">      state = accept_S2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">assume</span>(<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">atomic_end</span>();</span><br></pre></td></tr></table></figure><center><img loading="lazy" src="/posts/6f7caca3/7.png" width="300"></center><p><strong>Problem</strong>: BMC forces program execution to eventually end, but BA are defined over infinite traces</p><ul><li>Solution:<ul><li>pretend final state extends infinitely</li><li>re-run monitor thread after program termination, with enough loop iterations to pass through each state twice</li><li>if an accepting state is visited at least twice while stuttering, BA accepts extended trace</li></ul></li></ul><h2 id="Fuzzing">4. Fuzzing</h2><ul><li>Challenge: generate executions of the program along paths that will lead to the discovery of new vulnerabilities<ul><li>how to systematically select appropriate inputs for a program under test</li></ul></li></ul><p>Fuzzing</p><ul><li>Basic idea: generate <strong>random inputs</strong> and check whether an application <strong>crashes</strong></li><li>Original fuzzing: generate long inputs and check whether the system crashes</li><li>Why would inputs ideally be very long?  <ul><li>To make it likely that buffer overruns cross segment boundaries so that the OS triggers a fault</li><li>ÊâÄ‰ª•‰∏ÄÂ§ßÂå∫Âà´ÊòØ‰º†ÁªüÁöÑÈúÄË¶ÅÂæàÈïøÔºå‰ΩÜÁªìÊûÑÊÄßÁöÑ‰∏çÈúÄË¶ÅÔºü</li></ul></li><li>Types<ul><li>very long string</li><li>blank strings</li><li>min&#x2F;max values of integers</li><li>zero and negative values</li><li>unique values, characters or keywords likely to trigger bugs</li></ul></li></ul><h3 id="Pros-amp-cons">4.1. Pros &amp; cons</h3><ul><li>Pros: Minimal effort: <ul><li>the test cases are automatically generated, and test oracle is is merely looking for crashes</li><li>Fuzzing of a C&#x2F;C++ binary can quickly give a good picture of the robustness of the code</li></ul></li><li>Cons: <ul><li>Fuzzers do not find all bugs</li><li>Crashes may be hard to analyze, but a crash is a true positive that something is wrong</li><li>For programs that take <strong>complex inputs</strong>, more work will be needed to get reasonable code coverage and hit unusual test cases ÂØπ‰∫éÊé•ÂèóÂ§çÊùÇËæìÂÖ•ÁöÑÁ®ãÂ∫èÔºåÈúÄË¶ÅÂÅöÊõ¥Â§öÁöÑÂ∑•‰ΩúÊù•Ëé∑ÂæóÂêàÁêÜÁöÑ‰ª£Á†ÅË¶ÜÁõñÁéáÂπ∂Âáª‰∏≠‰∏çÂØªÂ∏∏ÁöÑÊµãËØïÊ°à‰æã<ul><li>Leads to various studies on ‚Äúsmarter‚Äù fuzzers</li></ul></li></ul></li></ul><h3 id="Black-box-fuzzing">4.2. Black-box fuzzing</h3><blockquote><p>The generation of values depends on the program input&#x2F;output behaviour, and not on its internal structure</p><ul><li>ÂÄºÁöÑ‰∫ßÁîüÂèñÂÜ≥‰∫éÁ®ãÂ∫èÁöÑËæìÂÖ•&#x2F;ËæìÂá∫Ë°å‰∏∫ÔºåËÄå‰∏çÊòØÂÖ∂ÂÜÖÈÉ®ÁªìÊûÑ</li></ul></blockquote><ol><li><strong>Random testing</strong> Ôºàoriginal fuzzingÔºâ<ol><li>input values are randomly sampled from the appropriate value domain</li></ol></li><li><strong>Grammar-based fuzzing</strong><ol><li>a model of the expected format of input values is taken into account during the generation of input values</li></ol></li><li><strong>Mutation-based fuzzing</strong><ol><li>the fuzzer is provided with <strong>typical input values</strong>; it generates <strong>new input values</strong> by performing <strong>small mutations</strong> on the provided input</li></ol></li></ol><ul><li>Use a model checker to produce an input that triggers the property violation</li></ul><p><strong>Â∫îÁî®</strong></p><center><img loading="lazy" src="/posts/6f7caca3/13.png" width="600"></center><center><img loading="lazy" src="/posts/6f7caca3/14.png" width="600"></center><h4 id="AFL">4.2.1. AFL</h4><p>AFL (American Fuzzy Lop) takes an evolutionary approach to learn mutations based on measuring code coverage </p><ul><li>basic idea: if a mutation of the input triggers a new path through the code, then it is an exciting mutation; otherwise, the mutation is discarded<ul><li>Â¶ÇÊûúËæìÂÖ•ÁöÑÁ™ÅÂèòËß¶Âèë‰∫Ü‰ª£Á†ÅÁöÑÊñ∞Ë∑ØÂæÑÔºåÈÇ£‰πàÂÆÉÂ∞±ÊòØ‰∏Ä‰∏™‰ª§‰∫∫ÂÖ¥Â•ãÁöÑÁ™ÅÂèòÔºõÂê¶ÂàôÔºåÁ™ÅÂèòÂ∞±‰ºöË¢´‰∏¢ÂºÉ</li></ul></li><li>Produce random mutations of the input and observe their effect on code coverage, AFL can learn what interesting inputs are<ul><li>‰∫ßÁîüËæìÂÖ•ÁöÑÈöèÊú∫Á™ÅÂèòÔºåËßÇÂØüÂÆÉ‰ª¨ÂØπ‰ª£Á†ÅË¶ÜÁõñÁéáÁöÑÂΩ±ÂìçÔºåAFLÂèØ‰ª•‰∫ÜËß£‰ªÄ‰πàÊòØÊúâË∂£ÁöÑËæìÂÖ• </li><li>‰πüÂ∞±ÊòØÊâÄË∞ìÁöÑ<strong>Coverage-Guided</strong></li></ul></li><li>Code instrumented to observe execution paths: ‚Äì if source code is available, then use modified compiler; otherwise, run code in an emulator</li></ul><h3 id="White-box-fuzzing">4.3. White-box fuzzing</h3><blockquote><p>The internal structure of the program is analysed to assist in the generation of appropriate input values</p><ul><li>ÂØπÁ®ãÂ∫èÁöÑÂÜÖÈÉ®ÁªìÊûÑËøõË°åÂàÜÊûêÔºå‰ª•ÂçèÂä©ÁîüÊàêÈÄÇÂΩìÁöÑËæìÂÖ•ÂÄº</li></ul></blockquote><ul><li>The primary systematic white-box fuzzing technique is a <strong>dynamic symbolic execution</strong><ul><li>Executes a program with concrete input values and builds at the same time a <strong>path condition</strong><ul><li>An <strong>expression</strong> that specifies the <strong>constraints</strong> on those input values that have to be fulfilled <strong>to take this specific execution path</strong></li></ul></li><li>Solve input values that do not satisfy the path condition of the current execution<ul><li>the fuzzer can make sure that these input values will drive the program to a different execution path, thus improving coverage Ê®°Á≥äÂô®ÂèØ‰ª•Á°Æ‰øùËøô‰∫õËæìÂÖ•ÂÄºÂ∞ÜÈ©±Âä®Á®ãÂ∫èËøõÂÖ•‰∏çÂêåÁöÑÊâßË°åË∑ØÂæÑÔºå‰ªéËÄåÊèêÈ´òË¶ÜÁõñÁéá</li></ul></li></ul></li></ul><p><strong>Step</strong></p><ul><li>Combine <strong>fuzz testing</strong> with <strong>dynamic test generation</strong></li><li>Run the code with some initial input </li><li>Collect constraints on input with symbolic execution </li><li>Generate new constraints </li><li>Solve constraints with c**onstraint solver **</li><li>SynthesizeÂêàÊàê new inputs</li><li>Leverages Directed Automated Random Testing</li></ul><center><img loading="lazy" src="/posts/6f7caca3/9.png" width="600"></center><center><img loading="lazy" src="/posts/6f7caca3/10.png" width="600"></center><h3 id="BMC-for-Coverage-Test-Generation">4.4. BMC for Coverage Test Generation</h3><ol><li>Translate the program to an intermediate representation (IR) </li><li><strong>Add goals indicating the coverage</strong><ol><li>location, branch, decision, condition and path</li></ol></li><li>Symbolically execute IR to produce an SSA program </li><li>Translate the resulting SSA program into a logical formula </li><li><strong>Solve the formula iteratively to cover different goals</strong> </li><li>Interpret the solution to <strong>figure out the input conditions</strong></li><li>SpitÂêêÂá∫ those input conditions out as a test case</li></ol><center><img loading="lazy" src="/posts/6f7caca3/11.png" width="600"></center><p><strong>example</strong></p><ul><li><code>esbmc main.c lib/lib.c --error-label GOALX -I lib/</code></li></ul><center><img loading="lazy" src="/posts/6f7caca3/12.jpg" width="600"></center><h2 id="summary">5. summary</h2><center><img loading="lazy" src="/posts/6f7caca3/8.png" width="600"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Testing-for-functionality-vs-testing-for-security&quot;&gt;1. Testing for functionality vs testing for security&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A majority of security defects and vulnerabilities in software are not directly related to functionality&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i.e. Side-channel effect in the hardware ‰æß‰ø°ÈÅì&lt;/li&gt;
&lt;li&gt;information obtained from the impl. rather than weaknesses in the code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traditional testing checks functionalities for sensible inputs and corner conditions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security testing &lt;strong&gt;also&lt;/strong&gt; requires looking for the &lt;strong&gt;wrong, unwanted behavior for uncommon inputs&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;users&lt;/strong&gt; will complain about &lt;strong&gt;functional problems&lt;/strong&gt;, but &lt;strong&gt;hackers&lt;/strong&gt; will not complain about &lt;strong&gt;security problems&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test a software system, we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;test suite&lt;/strong&gt;ÊµãËØïÂ•ó‰ª∂: a collection of input data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test oracle&lt;/strong&gt;ÊµãËØïÂáÜÂàô: decides if a test succeeded or led to an error&lt;ul&gt;
&lt;li&gt;A test oracle consists of a long list, which &lt;strong&gt;for every individual test case, specifies what should happen&lt;/strong&gt;&lt;br&gt;‚Äì A simple test oracle: just looking &lt;strong&gt;if the application does not crash&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Code-Coverage-‰ª£Á†ÅË¶ÜÁõñ&quot;&gt;2. Code Coverage ‰ª£Á†ÅË¶ÜÁõñ&lt;/h2&gt;&lt;h3 id=&quot;Statement-Coverage-ËØ≠Âè•Ë¶ÜÁõñ&quot;&gt;2.1. Statement Coverage ËØ≠Âè•Ë¶ÜÁõñ&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;involves the execution of all the executable statements at least once&lt;ul&gt;
&lt;li&gt;Ê∂âÂèäÊâÄÊúâÂèØÊâßË°åËØ≠Âè•ÁöÑËá≥Â∞ë‰∏ÄÊ¨°ÊâßË°å&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/6f7caca3/1.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;Decision-Coverage-Âà§ÂÆöË¶ÜÁõñ&quot;&gt;2.2. Decision Coverage Âà§ÂÆöË¶ÜÁõñ&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;reports the true or false outcomes of each Boolean expression (tough to achieve 100%) &lt;ul&gt;
&lt;li&gt;Êä•ÂëäÊØè‰∏™Â∏ÉÂ∞îË°®ËææÂºèÁöÑÁúüÊàñÂÅáÁªìÊûú&lt;/li&gt;
&lt;li&gt;(decision outcomes exercised &amp;#x2F; total decision outcomes) * 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Software Security" scheme="https://hejueyun.github.io/categories/Security/Software-Security/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>Detection of Software Vulnerabilities: Static Analysis</title>
    <link href="https://hejueyun.github.io/posts/536aff33/"/>
    <id>https://hejueyun.github.io/posts/536aff33/</id>
    <published>2022-05-05T12:30:25.000Z</published>
    <updated>2022-06-01T10:49:30.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Verification-vs-Validation">1. Verification vs Validation</h2><ul><li>Verification: ‚ÄúAre we building the product right?‚Äù  <ul><li>The software should conform to its specification</li></ul></li><li>Validation: ‚ÄúAre we building the right product?‚Äù <ul><li>The software should do what the user requires</li></ul></li><li>Verification and validation must be applied at each stage in the software process</li></ul><h2 id="Static-and-Dynamic-Verification">2. Static and Dynamic Verification</h2><p>static verification</p><ul><li>aka Software inspections</li><li>Code analysis can prove the absence of errors but might subject to incorrect results</li></ul><p>dynamic verification</p><ul><li>aka Software testing</li><li>The system is executed with test data</li><li>Operational behaviour is observed</li></ul><center><img loading="lazy" src="/posts/536aff33/1.png" width="600"></center><h3 id="The-V-model-of-development">2.1. The V-model of development</h3><center><img loading="lazy" src="/posts/536aff33/2.png" width="600"></center><h2 id="Detection-of-Vulnerabilities">3. Detection of Vulnerabilities</h2><ul><li><p>Detect the presence of vulnerabilities in the code during the development, testing, and maintenance</p></li><li><p>Trade-off between <strong>soundness</strong> and <strong>completeness</strong></p><ul><li>Achieving <strong>soundness</strong> requires reasoning about all executions of a program<ul><li>This can be done by static checking of the program code while making suitable abstractions of the executions</li></ul></li><li>Achieving <strong>completeness</strong> can be done by performing actual, concrete executions of a program that are witnesses to any vulnerability reported<ul><li>The analysis technique has to come up with concrete inputs for the program that triggers a vulnerability</li><li>A typical dynamic approach is software testing: the tester writes test cases with concrete inputs and specific checks for the outputs</li></ul></li></ul></li><li><p>Detection tools can use a <strong>hybridÊ∑∑Âêà combination of static and dynamic analysis techniques</strong> to achieve a good trade-off between soundness and completeness</p></li><li><p><strong>Dynamic verification</strong> should be used in conjunction with <strong>static verification</strong> to provide <strong>full code coverage</strong></p></li></ul><h2 id="difference-among-static-analysis-testing-x2F-simulation-and-debugging">4. difference among static analysis, testing &#x2F; simulation, and debugging</h2><center><img loading="lazy" src="/posts/536aff33/3.jpg" width="600"></center><ul><li>Simulation<ul><li>Checks only <strong>some</strong> of the system executions, thus may miss errors</li></ul></li><li>Static analysis (BMC) <ul><li>Exhaustively explores <strong>all</strong> executions</li><li>Report errors as <strong>traces</strong></li><li>May produce <strong>incorrect results</strong></li></ul></li></ul><h3 id="Avoiding-state-space-explosion">4.1. Avoiding state space explosion</h3><ul><li>Bounded Model Checking (BMC)<ul><li>Breadth-first search (BFS) approach ÂπøÂ∫¶‰ºòÂÖà</li></ul></li><li>Symbolic Execution<ul><li>Depth-first search (DFS) approach Ê∑±Â∫¶‰ºòÂÖà</li></ul></li></ul><h3 id="V-amp-V-vs-debugging">4.2. V&amp;V vs debugging</h3><ul><li>V &amp; V is concerned with establishing the absence or existence of defects in a program, resp.</li><li>Debugging is concerned with two main tasks <ul><li>Locating</li><li>Repairing these errors</li></ul></li><li>Debugging involves <ul><li>Formulating a hypothesis about program behaviour </li><li>Test these hypotheses to find the system error</li></ul></li></ul><center><img loading="lazy" src="/posts/536aff33/4.png" width="600"></center><h2 id="Concurrency-verification">5. Concurrency verification</h2><center><img loading="lazy" src="/posts/536aff33/5.jpg" width="600"></center><center><img loading="lazy" src="/posts/536aff33/6.png" width="600"></center><p><strong>Concurrency errors</strong></p><ul><li>progress errors: deadlock, starvation, ‚Ä¶ <ul><li>typically caused by wrong synchronization</li></ul></li><li>safety errors: assertion violation<ul><li>typically caused by data races (i.e., unsynchronized access to shared data)</li></ul></li></ul><p><strong>Concurrent programming styles</strong></p><ul><li>communication via message passing<ul><li>‚Äútruly‚Äù parallel distributed systems ‚ÄúÁúüÊ≠£ÁöÑ ‚ÄúÂπ∂Ë°åÂàÜÂ∏ÉÂºèÁ≥ªÁªü</li></ul></li><li>communication via shared memory<ul><li>multi-threaded programs</li></ul></li></ul><p><strong>Round-robin scheduling</strong></p><ul><li>context: segment of a run of an active thread $t_i$</li><li>context switch: change of active thread from $t_i$ to $t_k$ <ul><li><strong>global state</strong> is passed on to $t_k$ </li><li>context switch back to $t_i$ resumes at old local state (incl. pc)</li></ul></li><li>round: formed of one context of each thread</li><li>round robin schedule: same order of threads in each round</li><li>can simulate all schedules by round robin schedules</li></ul><center><img loading="lazy" src="/posts/536aff33/7.png" width="300"></center><ul><li>Êõ¥Â§öÂèØÂèÇËÄÉÔºö<a href="https://hejueyun.github.io/posts/ad1bb4ae/">Êìç‰ΩúÁ≥ªÁªüÂ§áÂøòÂΩï‚ÄìÂ§ÑÁêÜÊú∫</a></li></ul><h3 id="BMC-of-Multi-threaded-Software">5.1. BMC of Multi-threaded Software</h3><p><strong>Idea</strong>: iteratively generate all possible interleavings and call the BMC procedure on each interleaving</p><center><img loading="lazy" src="/posts/536aff33/8.png" width="600"></center><h3 id="Lazy-exploration-of-interleavings">5.2. Lazy exploration of interleavings</h3><p><strong>Idea</strong>: iteratively generate all possible interleavings and call the BMC procedure on each interleaving, combines:</p><ul><li><strong>symbolic</strong> model checking: on each individual interleaving</li><li><strong>explicit state</strong> model checking: explore all interleavings</li></ul><p><strong>Reachability Tree</strong></p><center><img loading="lazy" src="/posts/536aff33/9.png" width="600"></center><ul><li>ÊØè‰∏ÄÂ±ÇÁõ∏ÂΩì‰∫éÂ§öËµ∞‰∏ÄÊ≠•ÂçïÊ≠•Ôºå‰æãÂ¶ÇÂ∑¶Â≠êÊ†ëÔºåÂú®‰∏ä‰∫Üm1ÁöÑÈîÅ‰πãÂêéÔºåË∑≥Âà∞readerÁ∫øÁ®ãÊòØÊó†Ê≥ïËøõÂÖ•csÁöÑÔºåÊâÄ‰ª•‰ºöË¢´blocked.</li></ul><center><img loading="lazy" src="/posts/536aff33/10.jpg" width="600"></center><p><strong>Exploring Reachability Tree</strong></p><ul><li>Use a reachability tree (RT) to describe reachable states of a multi-threaded program</li><li>Each node in the RT is a tuple $\left (A_i,C_i,s_i,    \left \langle l_i^j,G_i^j \right \rangle ^n_{j&#x3D;i} \right )_i$<ul><li>$A_i$ represents the <strong>currently active thread</strong> ÂΩìÂâçÊ¥ªË∑ÉÁ∫øÁ®ã</li><li>$C_i$ represents the <strong>context switch number</strong> ‰∏ä‰∏ãÊñáÂàáÊç¢Â∫èÂè∑</li><li>$s_i$ represents the <strong>current state</strong> ÂΩìÂâçÁä∂ÊÄÅ</li><li>$l_i^j$ represents the <strong>current location</strong> of thread $j$ ÂëΩ‰ª§instruction‰ΩçÁΩÆ</li><li>$G_i^j$ represents the <strong>control flow guards accumulated in thread</strong> $j$ along the path from $l_0^j$ to $l_i^j$ ÁßØÁ¥ØÁöÑÂÆàÊä§Êù°‰ª∂</li></ul></li></ul><p><strong>Expansion Rules of the RT</strong></p><center><img loading="lazy" src="/posts/536aff33/12.jpg" width="600"></center><p><strong>main algorithm</strong></p><ol><li>Initialize the stack with the initial <strong>node</strong> $v_0$ and the initial <strong>path</strong> $\pi_0 &#x3D; \left \langle v_0 \right \rangle$</li><li>If the stack is empty, terminate with ‚Äúno error‚Äù</li><li>Pop the current node $v$ and current path $\pi$ off the stack and compute the set $v‚Äô$ of successorsÂêéÁª≠ of $v$ using rules R1-R8</li><li>If $v‚Äô$ is empty, derive the VC $\phi^{\pi}_k$ for $\pi$ and call the SMT solver on it. If $\phi^{\pi}_k$ is satisfiable, terminate with ‚Äúerror‚Äù; otherwise, goto step 2</li><li>If $v‚Äô$ is not empty, then for each node $v \in v‚Äô$, add $v$ to $\pi$, and push node and extended path on the stack. goto step 3.</li></ol><center><img loading="lazy" src="/posts/536aff33/11.png" width="450"></center><p>can suffer performance degradation:</p><ul><li>in particular for correct programs where we need to invoke the SMT solver once for each possible execution path</li></ul><h3 id="Schedule-Recording">5.3. Schedule Recording</h3><p><strong>Idea</strong>: systematically encode all possible <strong>interleavings</strong> into one <strong>formula</strong></p><ul><li>explore reachability tree in same way as lazy approach<ul><li>but call SMT solver only once</li></ul></li><li>add a schedule guard $ts_i$ for each context switch block $i$ (0&lt; $ts_i$ &lt; #threads)<ul><li>record in which order the scheduler has executed the program</li><li>SMT solver determines the order in which threads are simulated</li></ul></li><li>add <strong>scheduler guards</strong> only to effective statements<ul><li>record <strong>effective context switches (ECS)</strong> (assignments and assertions)</li><li>ECS block: sequence of program statements that are executed with no intervening ECS</li></ul></li></ul><center><img loading="lazy" src="/posts/536aff33/13.png" width="600"></center><p>number of threads and context switches grows very large quickly, and easily ‚Äúblow-up‚Äù the solver</p><ul><li>there is a clear trade-off between usage of time and memory resources</li></ul><h2 id="Sequentialization-Â∫èÂàóÂåñ">6. Sequentialization Â∫èÂàóÂåñ</h2><ul><li>Building verification tools for full-fledgedÊàêÁÜüÁöÑ <strong>concurrent</strong> languages is difficult and expensive<ul><li>but scalable verification techniques exist for <strong>sequential</strong> languages<ul><li>Abstraction techniques</li><li>SAT&#x2F;SMT techniques</li></ul></li></ul></li></ul><p>Sequentialization:</p><ul><li>convert concurrent programs into sequential programs such that <strong>reachability is preserved</strong></li><li>replace control non-determinism by data non-determinism</li><li>source-to-source transformation: T1 ‚à• T2 ‚Üù T1‚Äô ; T2‚Äô</li></ul><h3 id="KISS">6.1. KISS</h3><p><strong>Keep It Simple and Sequential</strong></p><ul><li>Under-approximation (subset of interleavings) <ul><li>‰πüÂ∞±ÊòØËØ¥‰∏ç‰ºöcoverÊâÄÊúâÊÉÖÂÜµ</li></ul></li><li>Thread creation ‚Üí function call<ul><li>ThreadË¢´ËΩ¨Êç¢‰∏∫function</li><li>at context-switches &#x2F; when a thread is terminated, <strong>either</strong>:<ul><li>the active thread is terminated &#x2F; the thread that has called it is resumed (if any)</li><li><strong>or</strong> a not yet scheduled thread is started (by calling its main function)</li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/536aff33/14.png" width="600"></center><center><img loading="lazy" src="/posts/536aff33/15.png" width="600"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Verification-vs-Validation&quot;&gt;1. Verification vs Validation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Verification: ‚ÄúAre we building the product right?‚Äù  &lt;ul&gt;
&lt;li&gt;The software should conform to its specification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Validation: ‚ÄúAre we building the right product?‚Äù &lt;ul&gt;
&lt;li&gt;The software should do what the user requires&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verification and validation must be applied at each stage in the software process&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Static-and-Dynamic-Verification&quot;&gt;2. Static and Dynamic Verification&lt;/h2&gt;&lt;p&gt;static verification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aka Software inspections&lt;/li&gt;
&lt;li&gt;Code analysis can prove the absence of errors but might subject to incorrect results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dynamic verification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aka Software testing&lt;/li&gt;
&lt;li&gt;The system is executed with test data&lt;/li&gt;
&lt;li&gt;Operational behaviour is observed&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/536aff33/1.png&quot; width=&quot;600&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;The-V-model-of-development&quot;&gt;2.1. The V-model of development&lt;/h3&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/536aff33/2.png&quot; width=&quot;600&quot;&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Software Security" scheme="https://hejueyun.github.io/categories/Security/Software-Security/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing A Software Verifier - POP</title>
    <link href="https://hejueyun.github.io/posts/a0a87206/"/>
    <id>https://hejueyun.github.io/posts/a0a87206/</id>
    <published>2022-05-02T15:11:23.000Z</published>
    <updated>2022-05-06T22:06:09.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction">1. Introduction</h2><p>The complexity of manually and dynamic testing increases with the growth of the project. This results in the increasing usage of static analysis tools, such as bounded model checker, which do not require compilation and act automatically [1]. As an SMT-based model checker for program static analysis and verification, ESBMC has been successfully used in a variety of environments due to its adaptability to multi-language, multi-platform and high efficiency[2]. However, these features have led to the difficulty of fuzzing this software verifier. Firstly, the construction of a generation-based fuzzer for ESBMC is a challenge. The adaptability for multiple source programming languages means that the fuzzer needs to consider certain source language‚Äôs grammar, in the worst case, constructing different inputs for corresponding front-ends. Secondly, the construction of a coverage-guided mutation-based fuzzer is a challenge, as directly generated random input cannot be ‚Äúunderstood‚Äù by ESBMC and will be excluded beyond validating. These deficiencies will result in fuzzy tests that do not detect errors hidden in the deep execution path of the program and insufficient code coverage. Hence, we propose a fuzzer construction on intermediate representation, which refers to Goto programs. Instead of converting from the source file, this generic fuzzer would generate syntactically correct Goto programs directly. The introduction of mutation will further dynamically modify the properties in the Goto programs by tracking and updating the corpus. These Goto programs will finally be used as input to fuzz test the ESBMC.</p><p>The achievement of this goal can be divided into the following steps: (1) Summarise the syntax grammar for constructing Goto intermediate representation, including the symbol table and Goto instructions, i.e. each statement in the Goto program, as well as the Goto programs itself. (2) Investigate a mutation approach for the generated Goto programs, which will be achieved by introducing libFuzzer[3]. (3) Design and implement the program architecture of the Goto-fuzzer. (4) Debugging and testing, including error detection and performance testing. (5) Fuzz the ESBMC by Goto-fuzzer. Collect the error logs and coverage information.(6) Analyse the data and draw conclusions.</p><h2 id="Background">2. Background</h2><h3 id="ESBMC">2.1. ESBMC</h3><p>ESBMC is a licensed open-source SMT-based contextual boundary model checker that has been widely used to verify multi-language programs, including C&#x2F;C++, Java and Solidity. ESBMC can automatically find memory safety and assertion violations[4]. The basic workflow of this bounded model checker begins with a transition system $M$, a property $œÜ$, and a bound $k$. ESBMC unwinds the system $k$ times and converts it into a verification condition (VC) $œà$. ESBMC checks the negation of this VC so that $œà$ is satisfiable if and only if $œÜ$ has a counterexample of depth $k$ or less. To cope with increasing software complexity, sorts of SMT (Satisfiability Modulo Theories) solvers have been used as the back-end of ESBMC for solving the generated VCs[5].</p><p>From an architectural point of view, ESBMC can be divided into three components: front-end, middleware and back-end. A C++ Oriented ESBMC structure can been shown by Figure 1.</p><center><img loading="lazy" src="/posts/a0a87206/3.svg"></center><center><b>FIGURE 1</b> C++ oriented ESBMC's architecture overview. White rectangles represent input and output; grey rectangles represent the steps of the verification</center><h4 id="Front-end">2.1.1. Front-end</h4><p>Front-end is an important piece of technology that should facilitate the transition between the program under verification and a format the tool can work upon. Despite that several front-ends have been constructed corresponding to different programming languages in ESBMCÔºåthe final output will always be a symbol table, an auxiliary data structure storing the meaning and range of variable names. A general front-end framework includes a pre-processor, scanner, parser and type checker. <strong>Pre-processor</strong> handles special operations that will be performed according to the preprocessor instructions, such as replacement or expansion macros [6]. A lexical analysis of the <strong>scanner</strong> and a syntax score of the <strong>parser</strong> resulted in the Abstract Syntax Tree (AST) [7]. To simplify the analysis, ASTs have been converted into a simpler form, called an intermediate representation (IR), by <strong>type checker</strong> in which a symbol table is generated simultaneously. At this point, the source code as input is converted into symbol tables [8].  </p><h4 id="Middleware">2.1.2. Middleware</h4><p>In ESBMC, the generated symbol table enables the middleware to perform further actions, including the conversion from the original program into the equivalent Goto program, an intermediate representation generated from the symbol table, the generation of the single static assignment (SSA) form and the symbolical execution of the program.</p><p><strong>Goto Converter</strong> firstly AST into its Control flow chart form, which refers to Goto programs. These programs are language independent and similar to the intermediate languages of many compilers. Each program is a list of instructions, each of which has the type of instruction (one of 19 instructions), a code expression, a protection expression and possibly some target for the next instruction. An <strong>Instructions Type</strong> is an enum value describing the action performed by this instruction. <strong>Guard</strong> is an (arbitrarily complex) expression (usually an expert) of Boolean type. And <strong>Code</strong> represents a code statement, which can be seen as a unit in the symbol table. The type field determines the meaning of an instruction node, while the guard and code fields are used for a variety of purposes by different types of instructions [9].</p><p><strong>Symbolic Engine</strong> will firstly convert the variables from program text to a single static assignment (SSA) form. New variables are created to identify branch and loop entry conditions. These variables will guard the assignments based on the branch taken [4]. Symbolic execution will be performed after the conversion to perform semantic analysis, including dynamic memory checks (bounds, memory alignment, offset pointer-free, and double-free) and unwinding assertions. The point of this step is to make sure each assignment is independent.[8] </p><h4 id="Back-end">2.1.3. Back-end</h4><p>During this workflow, two sets of SMT formulae are created based on the SSA expressions. We denote $C$ for the constraints and $P$ for the properties. These quantifier-free formulae will be used as input for the SMT solver, a counterexample will be created if there exists a violation of a given property, or an unsatisfiable answer if the property holds [4]. </p><h3 id="Fuzzing">2.2. Fuzzing</h3><p>Fuzz testing (fuzzing) is a software testing technique. The core idea is to feed random data generated automatically into a program by a fuzzer. Traditionally, fuzzers can be classified into two categories based on how they are input, including generation-based fuzzers and coverage-guided mutation-based fuzzers.</p><h4 id="Generation-Based-Fuzzer">2.2.1. Generation-Based Fuzzer</h4><p>A <strong>generation-based</strong> fuzzer construct inputs according to some provided format specification, especially the grammar of a language[11]. One of the good examples of such fuzzers is <strong>Csmith</strong> [10] which is already applied in ESBMC. Csmith works as a generator for C programs. These programs will be fed to the target software, in most cases compilers, run the executables and compare the outputs. In practice, it is used as a stress testing tool to check the stability of ESBMC.</p><h4 id="Mutation-Based-Fuzzer">2.2.2. Mutation-Based Fuzzer</h4><p>A <strong>mutation-based</strong> fuzzer generates inputs by randomly altering analyst-supplied or created seeds.<br>These programmes do not require syntactic definitions and are not limited to a single input type [11]. These coverage-guided fuzzers use coverage information as feedback to alter existing inputs into new ones, attempting to maximise the amount of code covered by the overall input corpus. </p><p><strong>LibFuzzer</strong> is a powerful mutation-based Fuzzer chosen as our research object. LibFuzzer is linked to the library under test and feeds fuzzed inputs to it through a defined fuzzing target function. The fuzzer records which branches of the code were accessed and creates mutations on the corpus of input data to optimise code coverage. LLVM‚Äôs SanitizerCoverage instrumentation provides code coverage information for libFuzzer. [3]</p><h4 id="Structure-Aware-Fuzzer">2.2.3. Structure-Aware Fuzzer</h4><p>Both fuzzer types mentioned above are inherently flawed. On one hand, A generation-based fuzzer lacks a coverage-guided trace-feedback mechanism, which leads to possible duplication of the generated test cases. Another common flaw in generation-based testing occurs when the input is required to fulfil sophisticated semantic validity criteria that are not explicitly evaluated by the generator [13]. On the other hand, the presence of checksums in the input format or the complexity of the input format itself can easily trip up a mutation-based fuzzer, as virtually all generated inputs can be invalid for the target data structure.</p><p>We, therefore, consider a <strong>structure-aware</strong> fuzzer proposed by Google [12]. This fuzzer is a combination of the two fuzzing approaches described above: as a generation-based fuzzer in essence, the generator will now accept random value generated by the mutation-based fuzzer as seed. This mutator, in this case, libFuzzer, will mutate and optimise the random bytes by tracking and feedback.</p><h2 id="Research-Methodology">3. Research Methodology</h2><p>This section is originally divided into three subsections, with Section 3.1 discussing the introduction and application of structure-aware fuzzer to ESBMC, after which two approaches are proposed. We will first introduce the first approach in Section 3.2, which uses Csmith as a generator, and then mutates the original program via libFuzzer. We will discuss this method and explain why the second approach was chosen. In Section 3.2, we will t describe the second approach that will be used in development.</p><h3 id="Introduce-Structure-Aware-fuzzer-to-ESBMC">3.1. Introduce Structure-Aware fuzzer to ESBMC</h3><p>First, we need to decide the output form of the fuzzer, in this case, the generator. In theory, the potential object can be any temporary variable passed in the ESBMC workflow. We have chosen the Goto program as the output for several reasons: (1) the Goto program is language-independent, reflected in no dependency on the front-end (2) Goto program is a demarcation between syntax and semantics. As described in Section 2.1.2, symbolic execution represents the input to a program symbolically, based on constraints obtained by analysing the semantics of the program, whilst the semantics in the program will be translated and executed. The correctness of both syntax and semantics is required in and beyond this component, yet previously only the syntax was required. The main goal, therefore, is to create semantically arbitrary, in most cases incorrect, but syntactically correct goto programs.</p><p>Next, we explore how to achieve randomness via mutation. We use structure-aware mutations to look for interesting input structures in the space of valid inputs, which is mirrored in the Goto program‚Äôs randomization of the structure between instructions. We also use structure-preserving mutations to create distinct mutations of the same input structure to investigate alternative execution trails. This is accomplished by making the values of context-sensitive variables unequal [13].</p><p>As shown in Figure 2, we take a simple goto program as an example, where we can make the assignment to x precede its definition by changing the order between instructions; in addition, we can break the contextual relationship between the target of the GOTO instruction and the LABEL instruction by making their values no longer equal, thus changing the semantics without violating the syntax grammar rules.  that the changes of names or values of variables would predictably be unhelpful.</p><center><img loading="lazy" src="/posts/a0a87206/4.svg"></center><center><b>FIGURE 2</b> A simple Goto program</center><h3 id="First-Approach-Csmith-Mutation-Fuzzer">3.2. First Approach: Csmith-Mutation Fuzzer</h3><center><img loading="lazy" src="/posts/a0a87206/2.svg"></center><center><b>FIGURE 3</b> Csmith-mutation fuzzer architecture. White rectangles represent components reused from ESBMC; grey rectangles represent new created components</center><p>We propose the first implementation approach, whose architecture is shown in Figure 2. First, Csmith will create random C files, which will be passed through a front-end and a converter to form Goto programs. Here we introduce a mutator which semantically randomizing Goto programs by libFuzzer. Randonmized goto programs will finally be deliverred to the subsequent process. A simplified version of the programming logic is shown in Figure 4.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size, string filepath)</span> </span>&#123;</span><br><span class="line">    Goto_program=<span class="built_in">c2goto</span>(filepath);  <span class="comment">// Convert C codes to Goto programs</span></span><br><span class="line">    Goto_program=<span class="built_in">mutateor</span>(Goto_program, Data,size)  <span class="comment">// randomise Goto programs by libFuzzer</span></span><br><span class="line">    <span class="built_in">do_bmc</span>(Goto_program);   <span class="comment">// Apply the Goto program to the subsequent process</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><b>FIGURE 4</b> Programming Logic of Csmith-Mutation Fuzzer</center><p>The advantage of the Csmith-Mutation Fuzzer is that it can reuse the existing generator Csmith and only need to consider constructing a mutator; however, it also has several drawbacks: (1) We cannot guarantee that all language features supported within ESBMC are covered, as Csmith‚Äôs C standard support is c99 while that of ESBMC is c11. This will result in some of the statements not being covered during fuzz testing; (2) The fuzzer cannot be refined to test for specific statements (3) The approach of Csmith fuzzing is still front-end related as C file can only be read in via C-based front-end (in this case clang). We would like to have a more generic, front-end-independent fuzzer.</p><h3 id="Second-Approach-Goto-Fuzzer">3.3. Second Approach: Goto-Fuzzer</h3><center><img loading="lazy" src="/posts/a0a87206/1.svg"></center><center><b>FIGURE 5</b> Goto-fuzzer architecture. White rectangles represent components reused from ESBMC; grey rectangles represent new created components</center><p>Here we propose a second approaches, the architecture of which is shown in Figure 5. The core difference between two methods is that the construction output of the generator has changed from a source file to an intermediate file, which refers to the symbol. The choice of the symbol table over the goto program as the output of the generator is more a matter of development convenience, as no direct functions to construct a Goto program are provided in ESBMC. In contrast, the construction of a code statement is considerably simpler. In addition, contextual properties are initialised automatically during the conversion from symbol table to goto program, which will be a tough task if building Goto program directly. To ensure that the symbol table based generator works indentically as the direct goto program generatorÔºåWe will prove that the types of generated statement will cover that of goto program instruction during the Goto converson. A simplified version of the programming implementation is shown in Figure 6.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size)</span> </span>&#123;</span><br><span class="line">    Goto_program = <span class="built_in">generator</span>(Data, Size);    <span class="comment">// use libFuzzer as seed generator </span></span><br><span class="line">    <span class="built_in">do_bmc</span>(Goto_program);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><b>FIGURE 6</b> Programming Logic of Goto-Fuzzer</center><h2 id="Ethics-and-professional-considerations">4. Ethics and professional considerations</h2><p>This project does not require the participation of any volunteers, nor will user data be collected in any formÔºå the involvement of humans and data can therefore be excluded. Considering that ESBMC is under the Apache License 2.0, our modifications and development should follow the same open-source rules. In addition, given that ESBMC will be used in commercial and other production environments, the fuzzer needs to be tested before it is released, and the project documentation needs to be supplemented with relevant notes.</p><h2 id="Risk-consideration">5. Risk consideration</h2><h3 id="Design-Stage">5.1. Design Stage</h3><p>To design an efficient structure-awared fuzzer, which is the combination of generation and mutation fuzzer, will be the first challenge. This will have a direct impact on the final outcome. For example, test cases generated from a mutation algorithm that lacks logic may have the following problems: (1) the test cases are not useful, which is often reflected in the simplicity of the test cases (2) the test cases are virtually identical to others from the aspect of code coverage, which will result in test objects being limited to only some branches. </p><h3 id="Implement-Stage">5.2. Implement Stage</h3><p>The difficulty of the implement of Goto-fuzzer can be reflected in several aspects. Coupling and component independence needed to be firstly considered at the top-level design stage in order to avoid fuzzer having side effects on other functions in ESBMC. In addition, although the data structures and libraries for the intermediate representation were already provided, there was still a lot of coding to be done. Furthermore, the complex internal cross-referencing within ESBMC and the use of ‚Äúmagic‚Äù functions put the developer‚Äôs C++ reading skills to the test.</p><h3 id="Debug-and-Test-Stage">5.3. Debug and Test Stage</h3><p>The debuging and testing of Goto-fuzzer will be challenge, as the interdependencies of the libraries make debugging Goto-fuzzer as time consuming as debugging the entire ESBMC, requiring recompilation and relinking of the entire ESBMC project.</p><h2 id="Project-evaluation">6. Project evaluation</h2><p>The project can be evaluated from the following aspects: First, the primary purpose of a fuzzer is to use it to find hidden bugs in the program, thus the ability of error detection will be tested. One possible approach is to quantify the statistics of distinct crash errors found, rates of the crash and wrong-code errors from different versions of ESBMC, as well as the statistics of Bug-Finding Performance as a function of test-case size [14]. What‚Äôs more, the improvement of code coverage will be measured. Tools for statistical code coverage are provided in ESBMC and can be output visually. In the worst-case scenario, where our Goto fuzzer fails to find any bug, then the code coverage will be the key evaluation of the effectiveness. Besides, despite the libFuzzer as the mutator being a pre-requisite for the project, we could also propose other mutation-based fuzzer to compare and evaluate their relative performance. This optional task will be done if possible.</p><h2 id="Planning">7. Planning</h2><p>As the stage division in the section above, the general arrangement of this project will be divided into four parts, as shown in the Gantt Chart in Figure 5. First, the design stage will take 2 weeks and will be devoted mainly to summarizing the syntax grammar for the generator and to working out how to apply mutation to this fuzzer. Second, the implementation stage will last a month, and this stage will complete all. As an optional arrangement, we consider building an additional interface to output the goto program for debugging purposes. This task will be cancelled due to insufficient time. Third, the debug and testing stage will take three weeks, during which we focus on collecting data to verify the effectiveness of our Goto fuzzer. Finally, the writing stage will begin with the design stage simultaneously and will continue until August 8th .</p><center><img loading="lazy" src="/posts/a0a87206/5.png"></center><center><b>FIGURE 7</b> Gantt Chart</center><h2 id="Reference">8. Reference:</h2><ul><li>[1]: Seacord, Robert C. The CERT C Secure Coding Standard, 2008, 1st. edition.</li><li>[2]: ESBMC. <a href="http://www.esbmc.org/">http://www.ESBMC.org/</a>.</li><li>[3]: Kostya Serebryany. libFuzzer - a Library for Coverage-Guided Fuzz Testing. <a href="https://llvm.org/docs/LibFuzzer.htm">https://llvm.org/docs/LibFuzzer.htm</a>.</li><li>[4]: ESBMC Book. <a href="http://www.esbmc.org/">http://www.ESBMC.org/</a></li><li>[5]: L. Cordeiro, B. Fischer and J. Marques-Silva, ‚ÄúSMT-Based Bounded Model Checking for Embedded ANSI-C Software,‚Äù 2009 IEEE&#x2F;ACM International Conference on Automated Software Engineering, 2009, pp. 137-148, doi: 10.1109&#x2F;ASE.2009.63.</li><li>[6]: Deitel, Paul J., and Harvey M. Deitel. C: How to Program; with an Introduction to C++. 8., ed.Global ed, Pearson, 2016.</li><li>[7]: Aho, Alfred V., and Alfred V. Aho, editors. Compilers: Principles, Techniques, &amp; Tools. 2nd ed, Pearson&#x2F;Addison Wesley, 200.</li><li>[8]: cprover - Background Concepts. <a href="http://cprover.diffblue.com/background-concepts.html">http://cprover.diffblue.com/background-concepts.html</a>.</li><li>[9]: cprover - goto programt. <a href="http://cprover.diffblue.com/group__goto-programs.html">http://cprover.diffblue.com/group__goto-programs.html</a>.</li><li>[10]: Csmith. <a href="https://embed.cs.utah.edu/csmith/">https://embed.cs.utah.edu/csmith/</a>.</li><li>[11]: Hui Peng, Yan Shoshitaishvili and Mathias Payer, T-Fuzz: Fuzzing by Program Transformation,<br>2018-05. </li><li>[12]: Google. Structure-Aware Fuzzing with libFuzzer. <a href="https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md">https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md</a>.</li><li>[13]: Nguyen, Hoang Lam and Grunske, Lars, BeDivFuzz: Integrating Behavioral Diversity into Generator-based Fuzzing, 2022. </li><li>[14]: Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and understanding bugs in C compilers. SIGPLAN Not. 46, 6 (June 2011), 283‚Äì294.</li></ul><div class="row">    <embed src="./report.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;p&gt;The complexity of manually and dynamic testing increases with the growth of the project. This results in the increasing usage of static analysis tools, such as bounded model checker, which do not require compilation and act automatically [1]. As an SMT-based model checker for program static analysis and verification, ESBMC has been successfully used in a variety of environments due to its adaptability to multi-language, multi-platform and high efficiency[2]. However, these features have led to the difficulty of fuzzing this software verifier. Firstly, the construction of a generation-based fuzzer for ESBMC is a challenge. The adaptability for multiple source programming languages means that the fuzzer needs to consider certain source language‚Äôs grammar, in the worst case, constructing different inputs for corresponding front-ends. Secondly, the construction of a coverage-guided mutation-based fuzzer is a challenge, as directly generated random input cannot be ‚Äúunderstood‚Äù by ESBMC and will be excluded beyond validating. These deficiencies will result in fuzzy tests that do not detect errors hidden in the deep execution path of the program and insufficient code coverage. Hence, we propose a fuzzer construction on intermediate representation, which refers to Goto programs. Instead of converting from the source file, this generic fuzzer would generate syntactically correct Goto programs directly. The introduction of mutation will further dynamically modify the properties in the Goto programs by tracking and updating the corpus. These Goto programs will finally be used as input to fuzz test the ESBMC.&lt;/p&gt;
&lt;p&gt;The achievement of this goal can be divided into the following steps: (1) Summarise the syntax grammar for constructing Goto intermediate representation, including the symbol table and Goto instructions, i.e. each statement in the Goto program, as well as the Goto programs itself. (2) Investigate a mutation approach for the generated Goto programs, which will be achieved by introducing libFuzzer[3]. (3) Design and implement the program architecture of the Goto-fuzzer. (4) Debugging and testing, including error detection and performance testing. (5) Fuzz the ESBMC by Goto-fuzzer. Collect the error logs and coverage information.(6) Analyse the data and draw conclusions.&lt;/p&gt;
&lt;h2 id=&quot;Background&quot;&gt;2. Background&lt;/h2&gt;&lt;h3 id=&quot;ESBMC&quot;&gt;2.1. ESBMC&lt;/h3&gt;&lt;p&gt;ESBMC is a licensed open-source SMT-based contextual boundary model checker that has been widely used to verify multi-language programs, including C&amp;#x2F;C++, Java and Solidity. ESBMC can automatically find memory safety and assertion violations[4]. The basic workflow of this bounded model checker begins with a transition system $M$, a property $œÜ$, and a bound $k$. ESBMC unwinds the system $k$ times and converts it into a verification condition (VC) $œà$. ESBMC checks the negation of this VC so that $œà$ is satisfiable if and only if $œÜ$ has a counterexample of depth $k$ or less. To cope with increasing software complexity, sorts of SMT (Satisfiability Modulo Theories) solvers have been used as the back-end of ESBMC for solving the generated VCs[5].&lt;/p&gt;
&lt;p&gt;From an architectural point of view, ESBMC can be divided into three components: front-end, middleware and back-end. A C++ Oriented ESBMC structure can been shown by Figure 1.&lt;/p&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/a0a87206/3.svg&quot;&gt;&lt;/center&gt;

&lt;center&gt;&lt;b&gt;FIGURE 1&lt;/b&gt; C++ oriented ESBMC&#39;s architecture overview. White rectangles represent input and output; grey rectangles represent the steps of the verification&lt;/center&gt;

&lt;h4 id=&quot;Front-end&quot;&gt;2.1.1. Front-end&lt;/h4&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ESBMC Symbol Table</title>
    <link href="https://hejueyun.github.io/posts/1ad13e77/"/>
    <id>https://hejueyun.github.io/posts/1ad13e77/</id>
    <published>2022-04-22T20:06:36.000Z</published>
    <updated>2022-04-27T17:50:42.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Namespacet">1. Namespacet</h2><blockquote><p>A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in them.</p><p>The basic idea is that you might want to combine a value table and a type table, so that for a variable you can lookup both of these essential properties, in one structure. </p></blockquote><h2 id="contextt">2. contextt</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">symbol_base_mapt symbol_base_map;</span><br><span class="line">symbolst symbols;</span><br><span class="line">ordered_symbolst ordered_symbols;</span><br></pre></td></tr></table></figure><h2 id="symbolt-x2F-symbolst">3. symbolt&#x2F;symbolst</h2><ul><li>GOTO conversion component constructs a goto-program from a symbol table. Each symbol in the symbol table with function type (that is, the symbol‚Äôs type field contains a <code>code_typet</code>) will be converted to a corresponding GOTO program. Function <code>goto_convertt::convert</code> turns each <code>codet</code> in the symbol table into corresponding GOTO instructions.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Namespacet&quot;&gt;1. Namespacet&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in them.&lt;/p&gt;
&lt;p&gt;The basic idea is that you might want to combine a value table and a type table, so that for a variable you can lookup both of these essential properties, in one structure. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;contextt&quot;&gt;2. contextt&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;symbol_base_mapt symbol_base_map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbolst symbols;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ordered_symbolst ordered_symbols;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;symbolt-x2F-symbolst&quot;&gt;3. symbolt&amp;#x2F;symbolst&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GOTO conversion component constructs a goto-program from a symbol table. Each symbol in the symbol table with function type (that is, the symbol‚Äôs type field contains a &lt;code&gt;code_typet&lt;/code&gt;) will be converted to a corresponding GOTO program. Function &lt;code&gt;goto_convertt::convert&lt;/code&gt; turns each &lt;code&gt;codet&lt;/code&gt; in the symbol table into corresponding GOTO instructions.&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>GOTO Language Syntax Grammar</title>
    <link href="https://hejueyun.github.io/posts/d48bdd8/"/>
    <id>https://hejueyun.github.io/posts/d48bdd8/</id>
    <published>2022-04-22T20:05:04.000Z</published>
    <updated>2022-08-16T19:16:14.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Expression">1. Expression</h2><ul><li>From the aspect of goto program, an expression (<code>expr2t</code>) is formed by <strong>two</strong> properties:<ul><li>expr_type (<code>type2t</code>): represents the type of an expression.</li><li>expr_ids (<code>expr_ids</code>): used for distinguishing different classes of expression</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr  ::=   expr_type + expr_ids  </span><br><span class="line">      |     expr     </span><br></pre></td></tr></table></figure><ul><li><p><strong>expr_type</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expr_type   ::=</span><br><span class="line">            | bool_id</span><br><span class="line">            | empty_id</span><br><span class="line">            | symbol_id</span><br><span class="line">            | struct_id</span><br><span class="line">            | union_id</span><br><span class="line">            | code_id</span><br><span class="line">            | array_id</span><br><span class="line">            | pointer_id</span><br><span class="line">            | unsignedbv_id</span><br><span class="line">            | signedbv_id</span><br><span class="line">            | fixedbv_id</span><br><span class="line">            | floatbv_id</span><br><span class="line">            | string_id</span><br><span class="line">            | cpp_name_id</span><br><span class="line">            | end_type_id</span><br></pre></td></tr></table></figure></li><li><p><strong>expr_ids</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expr_ids     ::=</span><br><span class="line">            |   constant_int_id</span><br><span class="line">            |   constant_fixedbv_id</span><br><span class="line">            |   constant_floatbv_id</span><br><span class="line">            |   constant_bool_id</span><br><span class="line">            |   constant_string_id</span><br><span class="line">            |   constant_struct_id</span><br><span class="line">            |   constant_union_id</span><br><span class="line">            |   constant_array_id</span><br><span class="line">            |   constant_array_of_id</span><br><span class="line">            ...</span><br><span class="line">            |   code_block_id</span><br><span class="line">            |   code_assign_id</span><br><span class="line">            |   code_init_id</span><br><span class="line">            ...</span><br><span class="line">            |¬†¬†¬†end_expr_id</span><br></pre></td></tr></table></figure></li></ul><h2 id="Goto-Instruction">2. Goto Instruction</h2><p>In ESBMC, a goto instruction (<code>goto_programt::instructiont</code>) is defined by <strong>three</strong> properties‚Äì The meaning of an instruction depends on the <strong>instruction_type</strong> (<code>goto_program_instruction_typet</code>) field, while different kinds of instructions make use of the fields <strong>guard</strong> (<code>expr2tc</code>) and <strong>code</strong> (<code>expr2tc</code>) for different purposes. </p><ul><li>In other words, these are the properties that need to be considered when initialising a goto-instruction data structure, any other property could be set default or generated afterwards. </li><li><code>expr2tc</code> is basically a reference pointer container for <code>expr2t</code>. In this situation, there is no need to distinguish these two.</li></ul><p>The syntax grammar can be roughly listed as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Instruction ::= </span><br><span class="line">            |   (instruction_type)</span><br><span class="line">            |   (instruction_type, guard)</span><br><span class="line">            |   (instruction_type, code)</span><br></pre></td></tr></table></figure><ul><li><p><strong>instruction_type</strong>: an enum value describing the action performed by this instruction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">instruction_type    ::=</span><br><span class="line">                    |   NO_INSTRUCTION_TYPE </span><br><span class="line">                    |   GOTO            </span><br><span class="line">                    |   ASSUME          </span><br><span class="line">                    |   ASSERT          </span><br><span class="line">                    |   OTHER           </span><br><span class="line">                    |   SKIP            </span><br><span class="line">                    |   LOCATION        </span><br><span class="line">                    |   END_FUNCTION   </span><br><span class="line">                    |   ATOMIC_BEGIN    </span><br><span class="line">                    |   ATOMIC_END      </span><br><span class="line">                    |   RETURN         </span><br><span class="line">                    |   ASSIGN         </span><br><span class="line">                    |   DECL           </span><br><span class="line">                    |   DEAD           </span><br><span class="line">                    |   FUNCTION_CALL   </span><br><span class="line">                    |   THROW          </span><br><span class="line">                    |   CATCH          </span><br><span class="line">                    |   THROW_DECL      </span><br><span class="line">                    |   THROW_DECL_END</span><br></pre></td></tr></table></figure></li><li><p><strong>code</strong>: represents the code expression whose <code>id</code> is a subset of <code>expr_ids</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">code.ids     ::=</span><br><span class="line">            |   code_block_id</span><br><span class="line">            |   code_assign_id</span><br><span class="line">            |   code_init_id</span><br><span class="line">            |   code_decl_id</span><br><span class="line">            |   code_dead_id</span><br><span class="line">            |   code_printf_id</span><br><span class="line">            |   code_expression_id</span><br><span class="line">            |   code_return_id</span><br><span class="line">            |   code_skip_id</span><br><span class="line">            |   code_free_id</span><br><span class="line">            |   code_goto_id</span><br><span class="line">            |   code_asm_id</span><br><span class="line">            |   code_function_call_id</span><br><span class="line">            |   code_comma_id</span><br><span class="line">            |   code_cpp_del_array_id</span><br><span class="line">            |   code_cpp_delete_id</span><br><span class="line">            |   code_cpp_catch_id</span><br><span class="line">            |   code_cpp_throw_id</span><br><span class="line">            |   code_cpp_throw_decl_id</span><br><span class="line">            |   code_cpp_throw_decl_end_id</span><br></pre></td></tr></table></figure></li><li><p><strong>guard</strong>: an (arbitrarily complex) expression (usually an exprt) of Boolean type, whose <code>id</code> is a subset of <code>expr_ids</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guard.id  ::=  </span><br><span class="line">          |     constant_bool_id</span><br><span class="line">          |     constant_int_id</span><br><span class="line">          |     constant_floatbv_id</span><br><span class="line">          |     constant_fixedbv_id</span><br></pre></td></tr></table></figure></li></ul><p>The detailed syntax grammar can be listed as follows. For simplification, we use the <strong>id</strong> of a expression directly to represent that expression, and <code>*</code> is denoted to represent a list of expressions&#x2F; instrucitons.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Instruction ::=</span><br><span class="line">            |   NO_INSTRUCTION_TYPE</span><br><span class="line">            |   GOTO   </span><br><span class="line">            |   GOTO + guard         </span><br><span class="line">            |   ASSUME + guard    </span><br><span class="line">            |   ASSERT + guard  </span><br><span class="line">            |   OTHER + code_expression_id</span><br><span class="line">            |   OTHER + code_free_id</span><br><span class="line">            |   OTHER + code_printf_id</span><br><span class="line">            |   OTHER + code_asm_id</span><br><span class="line">            |   OTHER + code_cpp_del_array_id</span><br><span class="line">            |   OTHER + code_cpp_delete_id</span><br><span class="line">            |   SKIP            </span><br><span class="line">            |   LOCATION        </span><br><span class="line">            |   ATOMIC_BEGIN + Instruction* + ATOMIC_END</span><br><span class="line">            |   RETURN </span><br><span class="line">            |   RETURN + code_return_id </span><br><span class="line">            |   ASSIGN + code_assign_id     </span><br><span class="line">            |   DECL + code_decl_id          </span><br><span class="line">            |   DEAD + code_dead_id         </span><br><span class="line">            |   FUNCTION_CALL + code_function_call_id</span><br><span class="line">            |   THROW  + code_cpp_throw_id*</span><br><span class="line">            |   CATCH  + code_cpp_catch_id*</span><br><span class="line">            |   THROW_DECL + code_cpp_throw_decl_id* </span><br><span class="line">            |   THROW_DECL_END + code_cpp_throw_decl_end_id*</span><br></pre></td></tr></table></figure><ul><li><code>NO_INSTRUCTION_TYPE</code>: Instruction will be set to <code>NO_INSTRUCTION_TYPE</code> if it is not explicitly defined.</li><li><code>GOTO</code>: <code>GOTO</code> targets if and only if <code>guard</code> is true. The <code>guard</code> will be set to <strong>TRUE</strong> if it is not explicitly given.</li><li><code>ASSUME</code>: This thread of execution waits for <code>guard</code> to evaluate to <strong>TRUE</strong>, which performs a non-failing guarded self loop.</li><li><code>ASSERT</code>: An assertion is <strong>TRUE</strong> &#x2F; safe if <code>guard</code> is <strong>TRUE</strong>  in all possible executions, otherwise it is <strong>FALSE</strong> &#x2F; unsafe. This instructions is used to express properties to be verified</li><li><code>OTHER</code>: Represents an expression that gets evaluated, but does not have any other effect on execution, i.e. doesn‚Äôt contain a <strong>call</strong> or <strong>assignment</strong>.         </li><li><code>SKIP</code>: Just advance the PC.            </li><li><code>LOCATION</code>: Semantically like <code>SKIP</code>.        </li><li><code>ATOMIC_BEGIN</code>, <code>ATOMIC_END</code>: Marks&#x2F; Ends a block without interleavings. When a thread executes <code>ATOMIC_BEGIN</code>, no thread other will be able to execute any Instruction until the same thread executes <code>ATOMIC_END</code>.</li><li><code>RETURN</code>: Set the value returned by <code>code</code> (which shall be either <strong>nil</strong> or an instance of <code>code_return_id</code>) and then jump to the end of the function.          </li><li><code>ASSIGN</code>: Update the left-hand side of <code>code</code> (an instance of <code>code_assign_id</code>) to the value of the right-hand side.          </li><li><code>DECL</code>: Introduces a symbol denoted by the field <code>code</code> (an instance of <code>code_decl_id</code>). Semantically, the life-time of which is bounded by a corresponding <code>DEAD</code> instruction.         </li><li><code>DEAD</code>: Ends the life of the symbol denoted by the field <code>code</code>.           </li><li><code>FUNCTION_CALL</code>: Invoke the function denoted by field <code>code</code> (an instance of <code>code_function_call_id</code>).   </li><li><code>THROW</code>: Throw an exception. Throw $exception_1, ‚Ä¶, exception_N$ where the list of exceptions is extracted from the <code>code</code> field      </li><li><code>CATCH</code>: Catch an exception.</li><li><code>THROW_DECL</code>: List of throws that a function can throw.    </li><li><code>THROW_DECL_END</code>: End of throw declaration.</li></ul><h2 id="Goto-Program">3. Goto Program</h2><p>An instance of goto program (<code>goto_programt</code>) is effectively a list of instructions, and must end with  <code>END_FUNCTION</code>. </p><ul><li><code>END_FUNCTION</code>: Must occur as the last instruction of the list and nowhere else.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GOTO-Conversion">4. GOTO Conversion</h2><center><img loading="lazy" src="/posts/d48bdd8/1.svg" width="700"></center><center>Fig 1. GOTO Conversion</center><p>Each symbol in the symbol table with function type (that is, the symbol‚Äôs type field contains a <code>code_typet</code>) will be converted to a corresponding <code>GOTO</code> program. The conversion happens in <strong>two</strong> phases:</p><ol><li><code>goto_convertt::convert</code> turns each <code>codet</code> in the symbol table into corresponding GOTO instructions</li><li><code>goto_convertt::finish_gotos</code> and others (i.e. <code>goto_convertt::optimize_guarded_gotos</code>) populate the <code>GOTO</code> and <code>CATCH</code> instructions‚Äô targets members, pointing to their possible successors. <code>DEAD</code> instructions are also added when GOTO instructions branch out of one or more lexical blocks</li></ol><p><code>codet</code> represents statements, which is a subset of expression( inherit from <code>exprt</code>). </p><ul><li><code>exprt</code>&#x2F; <code>typet</code>: </li><li><code>Statement</code>: </li><li><code>Operands</code>:</li></ul><p>The grammar of a (By default.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">            statment        operand(s) </span><br><span class="line">------------------------------------------------</span><br><span class="line">codet ::=</span><br><span class="line">      |     block</span><br><span class="line">      |     decl            op0</span><br><span class="line">      |     decl            op0, op1</span><br><span class="line">      |     decl-block</span><br><span class="line">      |     expression      op0</span><br><span class="line">      |     assign          op0, op1</span><br><span class="line">      |     init            op0, op1</span><br><span class="line">      |     assert          op0</span><br><span class="line">      |     assume</span><br><span class="line">      |     function_call</span><br><span class="line">      |     label           op0</span><br><span class="line">      |     switch_case     op0, op1</span><br><span class="line">      |     for             op0, op1, op2, op3</span><br><span class="line">      |     while           op0, op1</span><br><span class="line">      |     dowhile         op0, op1</span><br><span class="line">      |     switch</span><br><span class="line">      |     break</span><br><span class="line">      |     return</span><br><span class="line">      |     continue</span><br><span class="line">      |     goto</span><br><span class="line">      |     skip</span><br><span class="line">      |     non-deterministic-goto</span><br><span class="line">      |     ifthenelse</span><br><span class="line">      |     atomic_begin</span><br><span class="line">      |     atomic_end</span><br><span class="line">      |     cpp_delete</span><br><span class="line">      |     cpp_delete[]</span><br><span class="line">      |     cpp-catch</span><br><span class="line">      |     throw_decl</span><br><span class="line">      |     throw_decl_end</span><br><span class="line">      |     dead</span><br></pre></td></tr></table></figure><h3 id="Stage-1-Conversion-from-statement-to-goto-instruction">4.1. Stage 1: Conversion from statement to goto-instruction</h3><ul><li>Note that did not cover the case that <code>atomicity-check</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Function                  Input (codet)                 Output (codet/instructiont)</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">cconvert_block            (block)                       (codet*)</span><br><span class="line">cconvert_decl             (decl, op0)                   DECL</span><br><span class="line">                          (decl, op0, op1)              DECL ASSIGN</span><br><span class="line">cconvert_decl_block       (decl-block)                  (codet*)</span><br><span class="line">cconvert_expression       (expression, op0)             (ifthenelse)</span><br><span class="line">                          (expression, op0)             OTHER</span><br><span class="line">convert_assign            (assign, op0, op1)            ASSIGN</span><br><span class="line">convert_init              (init, op0, op1)              (assign)</span><br><span class="line">convert_assert            (assert, op0)                 ASSERT</span><br><span class="line">convert_assume            (assume, op0)                 ASSUME</span><br><span class="line">convert_function_call     (function_call)               (codet)</span><br><span class="line">convert_label             (label, op0)                  (codet)</span><br><span class="line">convert_switch_case       (switch_case, op0, op1)       (codet)</span><br><span class="line">convert_for               (for, op0, op1, op2, op3)     NO_INSTRUCTION_TYPE SKIP GOTO</span><br><span class="line">                          (for, op0, op1, op2, op3)     NO_INSTRUCTION_TYPE SKIP SKIP GOTO</span><br><span class="line">convert_while             (while, op0, op1)             SKIP GOTO</span><br><span class="line">convert_dowhile           (dowhile, op0, op1)           NO_INSTRUCTION_TYPE SKIP GOTO</span><br><span class="line">convert_switch            (switch)                      NO_INSTRUCTION_TYPE SKIP GOTO*</span><br><span class="line">convert_break             (break)                       GOTO</span><br><span class="line">convert_return</span><br></pre></td></tr></table></figure><ul><li><p><code>block</code>: By <code>goto_convertt::convert_block</code>Convert each expression (<code>exprt</code>) , which is stored as operand (<code>op</code>), to <code>codet</code>.  Each new <code>codet</code> then converts to goto-instruction later.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;        <span class="comment">// block begin</span></span><br><span class="line">  <span class="type">int</span> x; <span class="comment">// op[0]  =&gt;  codet(decl)   </span></span><br><span class="line">  x=<span class="number">1</span>;   <span class="comment">// op[1]  =&gt;  codet(assign)</span></span><br><span class="line">  ...   </span><br><span class="line">&#125;       <span class="comment">// block end</span></span><br></pre></td></tr></table></figure></li><li><p><code>decl</code>: takes <strong>one</strong> or <strong>two</strong> operands and always expects symbol as first operand (<code>op0</code>).</p><ul><li>if <strong>one</strong>, then generates a <code>DECL</code> instruction only.</li><li>if <strong>two</strong>, first the statement breaks up into decl and assignment, then generates a <code>DECL</code> instruction and a <code>ASSIGN</code> instruction.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x; <span class="comment">// one operand, will be converted to DECL</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>; <span class="comment">// two operand, will be spilted to two sub statement and converted to DECL and ASSIGN</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>decl-block</code>: Semantically like <code>block</code>.</p></li><li><p><code>expression</code>: takes <strong>one</strong> operand</p><ul><li>if  </li><li>else</li></ul></li><li><p><code>assign</code>:  takes <strong>two</strong> operands, denoted as <code>lhs</code>(<code>op0</code>) and <code>rhs</code>(<code>op1</code>)</p><ul><li>d</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">func</span>()      <span class="comment">// function_call </span></span><br><span class="line">x = <span class="keyword">new</span> <span class="built_in">class</span>() <span class="comment">// cpp_new</span></span><br><span class="line">x = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>] <span class="comment">// cpp_new[]</span></span><br><span class="line">x = y           <span class="comment">// other cases</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="block-code-statment-to-code-blockt">4.1.1. block code statment to code_blockt</h4><p>  - </p><h3 id="Stage-2-target-generation-and-optimisation">4.2. Stage 2: target generation and optimisation</h3><h3 id="Example">4.3. Example</h3><center><img loading="lazy" src="/posts/d48bdd8/2.svg" width="700"></center><center>Fig 2. C Program Being Converted Into GOTO Code </center><center>source: <a href="http://cprover.diffblue.com/group__goto-programs.html">cprover: goto-conversion</a></center><h2 id="Referrence">5. Referrence</h2><p>The syntax grammar are referred to:</p><ul><li><code>goto_*.h</code>&#x2F; <code>goto_*.cpp</code></li><li><code>symex_*.h</code>&#x2F; <code>symex_*.cpp</code></li><li><code>irep2_*.h</code>&#x2F;<code>irep2_*.cpp</code></li><li><a href="http://cprover.diffblue.com/group__goto-programs.html">cprover: goto-programs</a></li><li><a href="http://cprover.diffblue.com/group__util.html">cprover: util</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Expression&quot;&gt;1. Expression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;From the aspect of goto program, an expression (&lt;code&gt;expr2t&lt;/code&gt;) is formed by &lt;strong&gt;two&lt;/strong&gt; properties:&lt;ul&gt;
&lt;li&gt;expr_type (&lt;code&gt;type2t&lt;/code&gt;): represents the type of an expression.&lt;/li&gt;
&lt;li&gt;expr_ids (&lt;code&gt;expr_ids&lt;/code&gt;): used for distinguishing different classes of expression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;expr  ::=   expr_type + expr_ids  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |     expr     &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;expr_type&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;expr_type   ::=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | bool_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | empty_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | symbol_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | struct_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | union_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | code_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | array_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | pointer_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | unsignedbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | signedbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | fixedbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | floatbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | string_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | cpp_name_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            | end_type_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;expr_ids&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;expr_ids     ::=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_int_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_fixedbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_floatbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_bool_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_string_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_struct_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_union_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_array_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   constant_array_of_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_block_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_assign_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_init_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |¬†¬†¬†end_expr_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Goto-Instruction&quot;&gt;2. Goto Instruction&lt;/h2&gt;&lt;p&gt;In ESBMC, a goto instruction (&lt;code&gt;goto_programt::instructiont&lt;/code&gt;) is defined by &lt;strong&gt;three&lt;/strong&gt; properties‚Äì The meaning of an instruction depends on the &lt;strong&gt;instruction_type&lt;/strong&gt; (&lt;code&gt;goto_program_instruction_typet&lt;/code&gt;) field, while different kinds of instructions make use of the fields &lt;strong&gt;guard&lt;/strong&gt; (&lt;code&gt;expr2tc&lt;/code&gt;) and &lt;strong&gt;code&lt;/strong&gt; (&lt;code&gt;expr2tc&lt;/code&gt;) for different purposes. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In other words, these are the properties that need to be considered when initialising a goto-instruction data structure, any other property could be set default or generated afterwards. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;expr2tc&lt;/code&gt; is basically a reference pointer container for &lt;code&gt;expr2t&lt;/code&gt;. In this situation, there is no need to distinguish these two.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntax grammar can be roughly listed as follows.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Instruction ::= &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   (instruction_type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   (instruction_type, guard)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   (instruction_type, code)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;instruction_type&lt;/strong&gt;: an enum value describing the action performed by this instruction.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;instruction_type    ::=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   NO_INSTRUCTION_TYPE &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   GOTO            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   ASSUME          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   ASSERT          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   OTHER           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   SKIP            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   LOCATION        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   END_FUNCTION   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   ATOMIC_BEGIN    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   ATOMIC_END      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   RETURN         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   ASSIGN         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   DECL           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   DEAD           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   FUNCTION_CALL   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   THROW          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   CATCH          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   THROW_DECL      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    |   THROW_DECL_END&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;code&lt;/strong&gt;: represents the code expression whose &lt;code&gt;id&lt;/code&gt; is a subset of &lt;code&gt;expr_ids&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;code.ids     ::=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_block_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_assign_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_init_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_decl_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_dead_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_printf_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_expression_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_return_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_skip_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_free_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_goto_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_asm_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_function_call_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_comma_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_del_array_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_delete_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_catch_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_throw_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_throw_decl_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            |   code_cpp_throw_decl_end_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;guard&lt;/strong&gt;: an (arbitrarily complex) expression (usually an exprt) of Boolean type, whose &lt;code&gt;id&lt;/code&gt; is a subset of &lt;code&gt;expr_ids&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;guard.id  ::=  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |     constant_bool_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |     constant_int_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |     constant_floatbv_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |     constant_fixedbv_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ESBMC-An Efficient SMT-based Software Model Checker</title>
    <link href="https://hejueyun.github.io/posts/2f42f06c/"/>
    <id>https://hejueyun.github.io/posts/2f42f06c/</id>
    <published>2022-04-20T20:02:42.000Z</published>
    <updated>2022-05-24T12:05:50.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction">1. Introduction</h2><blockquote><p>It(ESBMC) does not require any special annotations in the source code to find such bugs, but it allows users to add their assertions and checks if they hold. In addition, ESBMC implements a k-induction proof rule and can be used to prove the absence of property violations (resp. the validity of user-defined assertions)</p><ul><li>ÂÆÉÔºàESBMCÔºâ‰∏çÈúÄË¶ÅÂú®Ê∫ê‰ª£Á†Å‰∏≠ËøõË°å‰ªª‰ΩïÁâπÊÆäÁöÑÊ≥®ÈáäÊù•ÂèëÁé∞ËøôÁßçÈîôËØØÔºå‰ΩÜÂÆÉÂÖÅËÆ∏Áî®Êà∑Ê∑ªÂä†‰ªñ‰ª¨ÁöÑÊñ≠Ë®ÄÂπ∂Ê£ÄÊü•ÂÆÉ‰ª¨ÊòØÂê¶ÊàêÁ´ã„ÄÇÊ≠§Â§ñÔºåESBMCÂÆûÁé∞‰∫Ü‰∏Ä‰∏™k-ÂΩíÁ∫≥ËØÅÊòéËßÑÂàôÔºåÂèØ‰ª•Áî®Êù•ËØÅÊòéÊ≤°ÊúâËøùÂèçÂ±ûÊÄßÔºàÂç≥Áî®Êà∑ÂÆö‰πâÁöÑÊñ≠Ë®ÄÁöÑÊúâÊïàÊÄßÔºâ</li></ul></blockquote><h2 id="ESBMC-Architecture">2. ESBMC Architecture</h2><center><img loading="lazy" src="/posts/2f42f06c/1.png" width="600"></center><ul><li>One of the significant challenges in software verification is the development and maintenance of an infrastructure that can reliably and efficiently handle real-world programs; it is an issue that only intensifies given the ever-evolving programming language standards.<ul><li>Êñ∞Ê†áÂáÜÂèëÂ∏ÉÈúÄË¶ÅÊñ∞ÁöÑÊîØÊåÅ</li></ul></li></ul><h3 id="Front-end">2.1. Front-end</h3><ul><li>an important piece of technology that should facilitate the transition between the <strong>program</strong> under verification and a <strong>format</strong> the tool can work upon</li></ul><h4 id="Clang">2.1.1. Clang</h4><p>ClangÊòØLLVMÁºñËØëÂô®ÁöÑc-familyÂâçÁ´ØÔºåClangÂèØËÉΩÊÑèÊåá‰∏âÁßç‰∏çÂêåÁöÑÂÆû‰ΩìÔºö</p><ul><li>ÂâçÁ´ØÔºàÂú®ClangÂ∫ì‰∏≠ÂÆûÁé∞Ôºâ</li><li>ÁºñËØëÂô®È©±Âä®Á®ãÂ∫èÔºàÂú®clangÂëΩ‰ª§ÂíåClangÈ©±Âä®Á®ãÂ∫èÂ∫ì‰∏≠ÂÆûÁé∞Ôºâ</li><li>ÂÆûÈôÖÁöÑÁºñËØëÂô®ÔºàÂú®clang -cc1ÂëΩ‰ª§‰∏≠ÂÆûÁé∞Ôºâ„ÄÇclang -cc1‰∏≠ÁöÑÁºñËØëÂô®‰∏ç‰ªÖÊòØÁî±ClangÂ∫ìÂÆûÁé∞ÔºåËøòÂπøÊ≥õÂú∞‰ΩøÁî®ÂÖ∂‰ªñLLVMÂ∫ìÊù•ÂÆûÁé∞ÁºñËØëÂô®ÁöÑ‰∏≠Á´Ø„ÄÅÂêéÁ´Ø‰ª•ÂèäÈõÜÊàêÁöÑÊ±áÁºñÂô®„ÄÇ</li><li><code>clang -emit-llvm -c size.c -o size.bc</code></li></ul><blockquote><p>Using the LLVM bitcode in the verification process <strong>brings some advantages</strong>; the bitcode is highly optimized by LLVM and will simplify the verification, thus reducing costs. <strong>However</strong>, <strong>there are disadvantages to this process</strong>, including <strong>losing context information</strong> (e.g., variable, class and function names are mangled in C++ ), source location information; <strong>in rare cases, optimizations can generate wrong results</strong> . While the latter can be avoided by disabling optimizations (and thus losing one of <strong>this approach‚Äôs</strong> advantages), the other two are not easily avoided by software verifiers.</p></blockquote><ul><li>ÂÖ∂‰ªñÂâçÁ´ØÁöÑ‰∏çË∂≥ËøòÊòØÂú®‰∫é‰ºö‰∏¢Â§±source location information<ul><li>‰∏¢Â§±‰∫Ü‰ºöÊÄé‰πàÊ†∑Âë¢Ôºü</li></ul></li></ul><h4 id="ESBMC-Front-end">2.1.2. ESBMC Front-end</h4><ul><li>Instead of working on the LLVM bitcode, <strong>ESBMC accesses the AST that generates the bitcode</strong><ul><li>We developed a new front-end <strong>based on clang</strong>. </li><li>We use <strong>clang</strong> to parse the C program, which generates the clang AST, and we <strong>convert it to the ESBMC AST</strong></li></ul></li></ul><h4 id="versus">2.1.3. versus</h4><ul><li>The clang front-end brings several <strong>advantages</strong> to the verification process. <ul><li>First, clang has a powerful static analyzer. It can provide state-of-the-art compiler diagnostics of the program, thus <strong>issuing the same warnings and errors</strong> that one would expect from a conventional compilation. </li><li>Second, <strong>the support for new language features is simplified</strong>. A newAST node converter needs only to be added to the converter class in ESBMC, rather than layering in the feature from flex lexer to type-checker. </li><li>Finally, by choosing the AST instead of the bitcode, <strong>a complete representation of the original program is available, including the original names of every class, function, and variable</strong>.</li></ul></li><li>The <strong>disadvantage</strong> is that ESBMC is <strong>unable to access the optimizations</strong> that LLVM performs on the bitcode</li></ul><h3 id="GOTO-Converter">2.2. GOTO Converter</h3><ul><li><p>This representation is similar to the control flow graph (CFG) representation used by conventional compilers, but we associate program statements with edges. </p><ul><li>In this process, the GOTOprogram is also simplified, and <strong>new property checks and instructions can be added</strong>.</li></ul></li><li><p>The GOTOprogram is a simplified version ofthe program: a branch and a backward GOTO replace for and while loops. It is very similar to a C program, containing assignments, function calls and returns, and location information.</p></li><li><p>Once the GOTO program is generated, the following transformations can be applied, depending on the set of options given to ESBMC:</p><ul><li><strong>Function inlining</strong><ul><li>replaces function calls with the instructions of the called function.</li></ul></li><li><strong>Interval analysis</strong><ul><li>performs an <strong>interval analysis</strong>Âå∫Èó¥ÂàÜÊûê for integer variables</li><li>The intervals are added back into the GOTO program as assumptions</li></ul></li><li><strong>Code transformations</strong><ul><li>introduce new instructions depending on several factors. </li><li>In particular, concurrency instructions can be inserted if the program is multi-threaded, and k-induction specific instructions are introduced if kinduction verification is enabled</li></ul></li><li><strong>Property checks</strong><ul><li>can insert several property checks into the GOTO program, including division by zero checks, integer, and float overflow checks, NaN checks (i.e., whether the result of an operation can be NaN), data race checks, deadlock checks, and atomicity checks. All these properties are encoded as <strong>assertions</strong> in the GOTO program.</li></ul></li></ul></li></ul><h3 id="Symbolic-Engine-Generating-SSA">2.3. Symbolic Engine: Generating SSA</h3><p>static single assignment (SSA)</p><ul><li><p>unwindsËß£ÂºÄ the GOTO program from the previous step</p></li><li><p>add further property checks, including <strong>dynamic memory checks</strong> (bounds, memory alignment, offset pointer-free, and double-free) and unwinding assertions</p></li><li><p>Main Goal: <strong>introduce fresh copy for each occurrence</strong></p></li></ul><p>‚Ä¶</p><h3 id="SMT-Solver-SMT-Encoding-of-C-Programs">2.4. SMT Solver: SMT Encoding of C Programs</h3><p>After the SSA set is created, the next step is to encode every (not sliced) assignment in SMT and check for satisfiability. </p><ul><li>We use a notation of constraints C and properties P when encoding the set of SSA. <ul><li>A <strong>constraint</strong> is an <strong>assignment</strong> or an <strong>assumption</strong> in the program. It constrains the value of a variable</li><li>while a <strong>property</strong> is an <strong>assertion</strong> in the program. <strong>This property needs to hold given the set of constraints</strong>.</li></ul></li><li>The constraints and properties are encoded in the form $C‚àß¬¨P$: given the set of constraints, <strong>the SMT solver will try to find an assignment to variables</strong> that satisfies the constraints and violates at least one property. <ul><li>SMTÊ±ÇËß£Âô®Â∞ÜËØïÂõæÊâæÂà∞‰∏Ä‰∏™Êª°Ë∂≥Á∫¶ÊùüÊù°‰ª∂Âπ∂Ëá≥Â∞ëËøùÂèç‰∏Ä‰∏™Â±ûÊÄßÁöÑÂèòÈáèËµãÂÄº</li></ul></li><li>Finally, if the SMT solver finds a model, ESBMC will generate a program <strong>counterexample</strong>: a set of assignments and the program‚Äôs violated property.</li></ul><p>‚Ä¶</p><h2 id="ESBMC‚Äôs-Verification-Modes">3. ESBMC‚Äôs Verification Modes</h2><h3 id="Bounded-Model-Checking">3.1. Bounded Model Checking</h3><ul><li><p><a href="https://hejueyun.github.io/posts/ade5e95e/">Bounded Model Checking | ÁÉèÂ∑¢</a></p></li><li><p>A <strong>node</strong> in the <strong>CFG</strong> represents either a (non-) deterministic assignment or a conditional statement, while an edge in the CFG represents a possible change in the program‚Äôs control location.</p><ul><li>CFG‰∏≠ÁöÑ‰∏Ä‰∏™ËäÇÁÇπ‰ª£Ë°®‰∏Ä‰∏™ÔºàÈùûÔºâÁ°ÆÂÆöÊÄßÁöÑËµãÂÄºÊàñ‰∏Ä‰∏™Êù°‰ª∂ËØ≠Âè•ÔºåËÄåCFG‰∏≠ÁöÑ‰∏ÄÊù°Ëæπ‰ª£Ë°®Á®ãÂ∫èÊéßÂà∂‰ΩçÁΩÆÁöÑÂèØËÉΩÂèòÂåñ„ÄÇ</li></ul></li><li><p>This graph is built as part of a translation process <strong>from program text to SSA</strong>.</p></li><li><p>A <strong>state transition system</strong>, denoted by M, is defined by a triple $(S, R, s_1)$ where S represents the set of states, $R ‚äÜ S √ó S$ represents the set of transitions and $s_1 ‚äÜ S$ represents the set of initial states.</p></li></ul><hr><blockquote><p>‰∫ãÂÆûËØÅÊòéÔºåÁ®ãÂ∫èÁöÑÊ®°ÂûãÊ£ÄÊü•ÈÄöÂ∏∏ÊòØ‰∏Ä‰∏™ÈöæÈ¢ò„ÄÇ ÈÄ†ÊàêËøôÁßçÊÉÖÂÜµÁöÑÈÉ®ÂàÜÂéüÂõ†ÊòØÔºåËÆ∏Â§öÊ®°ÂûãÊ£ÄÊü•ÁÆóÊ≥ïÈÉΩÂú®Âä™ÂäõÂØªÊ±Ç‰∏ÄÁßç‚ÄúÂÆåÊï¥ÊÄß‚ÄùÂΩ¢ÂºèÔºå<strong>ÂÆÉ‰ª¨Ë¶Å‰πàÊâæÂà∞Ë∏™Ëøπ(trace)ÔºåË¶Å‰πàËøîÂõûËØÅÊòéËøôÁßçË∏™Ëøπ‰∏çÂèØËÉΩÂ≠òÂú®ÁöÑËØÅÊçÆ„ÄÇ</strong></p><ul><li>trace: shows what statements are executed and in which order.</li></ul><p>Áî±‰∫éÊàë‰ª¨ÂØπ<strong>ÁîüÊàêÊµãËØïÁî®‰æã</strong>ÊÑüÂÖ¥Ë∂£ÔºåÂõ†Ê≠§Êàë‰ª¨Êõ¥ÂñúÊ¨¢‰∏ÄÁßç‰∏çÂêåÁöÑÊñπÊ≥ïÔºöÂèØËÉΩÂè™ÊúâÂú®ÂæàÈïøÊó∂Èó¥ÊâßË°åÂêéÊâçËÉΩÂà∞ËææÊüê‰∏™ÁõÆÊ†áÁä∂ÊÄÅÔºåÊàñËÄÖÊ†πÊú¨Êó†Ê≥ïÂà∞ËææÔºå‰ΩÜÊòØËøô‰∫õ‰ø°ÊÅØÂØπÊàë‰ª¨ÊûÑÂª∫ÊµãËØïÁî®‰æãÊ≤°ÊúâÂ∏ÆÂä©„ÄÇ Âá∫‰∫éËøô‰∏™ÂéüÂõ†ÔºåÊàë‰ª¨ÂºïÂÖ•‰∫Ü‰∏Ä‰∏™<strong>ÊâßË°åËæπÁïå(execution bound)</strong> ÔºåÂÆÉÊèèËø∞‰∫ÜÊàë‰ª¨Âú®ÂàÜÊûêÁ®ãÂ∫èÊó∂ÁöÑ<strong>Ê∑±Â∫¶</strong>„ÄÇ</p><p>‰ΩøÁî®ËøôÁßçÊâßË°åËæπÁïåÁöÑÊ®°ÂûãÊ£ÄÊü•ÊäÄÊúØÁß∞‰∏∫ <strong>ÊúâÁïåÊ®°ÂûãÊ£ÄÊü•(bounded model checking)</strong> Ôºõ ÂØπ‰∫éÁªôÂÆöÁöÑËæπÁïå nÔºåÂÆÉ‰ª¨Â∞ÜËøîÂõû‰∏ÄÊù°Ë∑üË∏™‰ø°ÊÅØÊàñ‰∏ÄÊù°ËØ¥Êòé‚ÄúÊó†Ê≥ïÂú® n Ê≠•ÂÜÖËææÂà∞ÁõÆÊ†áÁä∂ÊÄÅ‚ÄùÁöÑËØ≠Âè•„ÄÇ Âõ†Ê≠§ÔºåÂØπ‰∫éÁªôÂÆöÁöÑËæπÁïåÔºåÊàë‰ª¨ÊÄªÊòØÂæóÂà∞ÊâÄÊúâÂèØ‰ª•ËææÂà∞ÁöÑÁä∂ÊÄÅÁöÑ <strong>ËøëÊ¨†ÂÄº(underapproximationÔºå Âç≥Êé•Ëøë‰ΩÜÊ≤°ËææÂà∞)</strong> ÔºöÊàë‰ª¨ÂΩìÁÑ∂ÂèØ‰ª•Âú®ÁªôÂÆöÁöÑËåÉÂõ¥ÂÜÖÊâæÂà∞ÈÇ£‰∫õÂèØ‰ª•ËææÂà∞ÁöÑÁä∂ÊÄÅÔºå‰ΩÜÊòØÊàë‰ª¨<strong>ÂèØ‰ª•ÔºàmayÔºâ</strong>(<em>ÊïÖÊÑèÂú∞Ôºü</em>)ÈîôËøáÂè™ÊúâÈÄöËøáÊõ¥Â§öÊ≠•È™§ÊâçËÉΩËææÂà∞ÁöÑÁä∂ÊÄÅ„ÄÇ Áõ∏ÂèçÔºåÂ¶ÇÊûú‰∫ãÂÆû‰∏äÊúâ‰∏ÄÁßçÂà∞ËææËØ•Áä∂ÊÄÅÁöÑÊñπÊ≥ïÔºåÊàë‰ª¨Â∞ÜÊ∞∏Ëøú<br>‰∏ç‰ºöÂ£∞Áß∞Êüê‰∏™Áä∂ÊÄÅÂú®Êüê‰∏™ËåÉÂõ¥ÂÜÖÊòØ‰∏çÂèØÂà∞ËææÁöÑ</p></blockquote><h4 id="symbolic-model-checking-Á¨¶Âè∑Ê®°ÂûãÊ£ÄÊµã">3.1.1. symbolic model checking Á¨¶Âè∑Ê®°ÂûãÊ£ÄÊµã</h4><ul><li>The bounded model checking techniques used by the CPROVER framework are based on <strong>symbolic model checking</strong>, a <strong>family</strong> of model checking techniques that work on <strong>sets of program states</strong> and use advanced tools such as SAT solvers (more on that below) <strong>to calculate the set of reachable states</strong>.</li></ul><center><img loading="lazy" src="/posts/2f42f06c/2.png" width="600"></center><h4 id="How-bounded-model-checking-works">3.1.2. How bounded model checking works</h4><ol><li>Use <strong>bit vector</strong> representation to describe <strong>variables</strong> and <strong>operations on binary number</strong></li><li>transform to <strong>SSA</strong><ol><li>we <strong>might</strong> modify the SSA form (i.e. introducing <code>guard</code>)</li><li>thus finish encoding the behavior of programs as propositional formulas</li></ol></li><li>add <code>ASSERT</code>:  describe the property we want to prove.<ol><li>To do this, we introduce a primitive <code>ASSERT</code>. Let <code>e</code> be some expression; then <code>ASSERT(e)</code> is supposed to do nothing if <code>e</code> evaluates to true, and to abort the program if <code>e</code> evaluates to false.</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Origin</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = a;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bringing this into SSA form</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result<span class="number">.1</span> = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// As a first step, we modify the SSA form slightly by introducing an additional propositional variable C that tracks which branch of the if was taken. We call this variable the code guard variable, or guard for short</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  bit C; <span class="comment">/* Track which branch was taken */</span></span><br><span class="line">  C = a &lt; b;</span><br><span class="line">  <span class="comment">/* if (C) - not needed anymore thanks to SSA */</span></span><br><span class="line">    result<span class="number">.1</span> = b;</span><br><span class="line">  <span class="comment">/* else */</span></span><br><span class="line">    result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The resulting formula would be <blockquote><p>C &#x3D; a&lt;b and R1 &#x3D; B and R2 &#x3D; A and (C ‚áí return &#x3D; R1) and ((not C) ‚áí return &#x3D; R2).</p></blockquote></li></ul><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Origin</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = a;</span><br><span class="line">  <span class="built_in">ASSERT</span>(result &lt;= a); <span class="comment">// Added</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The corresponding SSA would be </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  bit C; <span class="comment">/* Track which branch was taken */</span></span><br><span class="line">  C = a &lt; b;</span><br><span class="line">  result<span class="number">.1</span> = b;</span><br><span class="line">  result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="built_in">ASSERT</span>(<span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>) &lt;= a);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We translate <code>ASSERT(Phi(C,result.1,result.2) &lt;= a)</code> into <blockquote><p>Œ¶(C,result.1,result.2) &lt;&#x3D; a </p></blockquote></li><li>The resulting formula would be <blockquote><p>C &#x3D; a&lt;b and R1 &#x3D; B and R2 &#x3D; A and (C ‚áí R1 &lt;&#x3D; A) and ((not C) ‚áí R2 &lt;&#x3D; A). (C ‚áí return &#x3D; R1) and ((not C) ‚áí return &#x3D; R2)</p></blockquote></li></ul><h3 id="Incremental-Bounded-Model-Checking">3.2. Incremental Bounded Model Checking</h3><ol><li>BMC tools drop completeness (i.e., the ability to prove that a program does not contain a bug) in favor of falsification. They are used mainly to find bugs, as they can only prove the absence of bugs if the whole state space is explored (e.g., all loops have been fully unwound). </li><li>In order to prove a program‚Äôs correctness, we need to compute the completeness threshold (CT), which can be smaller than or equal to the maximum number of loop iterations occurring in the program. However, computing CT to stop the BMC procedure and to conclude that no counterexample can be found is as hard as model checking the program </li><li>When running a BMC tool, one usually has to specify a bound k explicitly; this will be used to limit the visited regions of data structures (e.g., arrays) or the number of loop iterations. This limits the state space to be explored during verification, but leaves enough for real errors in applications to be found. </li><li>Since the best value for k is usually not known a prioriÂÖàÈ™å, one must repeatedly run the BMC tool with increasing values of k; every increase of k will increase the number of loop iterations, the recursion depth, and the time and memory requirements. To check whether the value of k is big enough, BMC tools <strong>insert unwinding assertions after each loop</strong>. <strong>Failing these assertions does not mean that the program has a bug, but the verification is incomplete.</strong></li></ol><p><strong>In ESBMC, there are two versions of incremental BMC</strong></p><ol><li>CFG is unwound before the SSA generation by creating copies of the loop body and removing the backward GOTO instruction.<ol><li>The main <strong>difference</strong> between the static incremental BMC algorithm in <strong>ESBMC</strong> and the one described by <strong>Donaldson</strong> is the handling of nested loops.</li><li>In both algorithms, the number of loop unwindings is set globally. However, nested inner loops are unwound first in ESBMC, while in Donaldson‚Äôs work outermost loops are unwound first.</li></ol></li><li>algorithm that incrementally unwinds the state transition system by running the symbolic engine with incremental numbers of unwinds.<ol><li>which allows incremental verification in many different configurations.</li><li>Falsification&#x2F; Termination&#x2F; Incremental Verification&#x2F; k-Induction</li></ol></li></ol><h4 id="Loop-unrolling-Âæ™ÁéØÂ±ïÂºÄ">3.2.1. Loop unrolling Âæ™ÁéØÂ±ïÂºÄ</h4><ul><li>Âæ™ÁéØÂ±ïÂºÄÔºàLoop unwindingÊàñloop unrollingÔºâÔºåÊòØ‰∏ÄÁßçÁâ∫Áâ≤Á®ãÂ∫èÁöÑÂ§ßÂ∞èÊù•Âä†Âø´Á®ãÂ∫èÊâßË°åÈÄüÂ∫¶ÁöÑ‰ºòÂåñÊñπÊ≥ï„ÄÇÂèØ‰ª•Áî±Á®ãÂ∫èÂëòÂÆåÊàêÔºå‰πüÂèØÁî±ÁºñËØëÂô®Ëá™Âä®‰ºòÂåñÂÆåÊàê„ÄÇ</li><li>Âæ™ÁéØÂ±ïÂºÄÊúÄÂ∏∏Áî®Êù•Èôç‰ΩéÂæ™ÁéØÂºÄÈîÄÔºå‰∏∫ÂÖ∑ÊúâÂ§ö‰∏™ÂäüËÉΩÂçïÂÖÉÁöÑÂ§ÑÁêÜÂô®Êèê‰æõÊåá‰ª§Á∫ßÂπ∂Ë°å„ÄÇ‰πüÊúâÂà©‰∫éÊåá‰ª§ÊµÅÊ∞¥Á∫øÁöÑË∞ÉÂ∫¶„ÄÇ</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) </span><br><span class="line">   a[i] = a[i] * b + c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Âæ™ÁéØÂ±ïÂºÄ2Ê¨°</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">58</span>; i+=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">  a[i] = a[i] * b + c;</span><br><span class="line">  a[i+<span class="number">1</span>] = a[i+<span class="number">1</span>] * b + c;</span><br><span class="line">  a[i+<span class="number">2</span>] = a[i+<span class="number">2</span>] * b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-k-induction-Algorithm">3.3. The k-induction Algorithm</h3><p>‚Ä¶</p><h2 id="ÂèÇËÄÉ">4. ÂèÇËÄÉ</h2><ul><li><a href="https://blog.csdn.net/qq_36287943/article/details/109626082">LLVM - Â≠¶‰π†Á¨îËÆ∞‰∏Ä - zhugl0</a></li><li><a href="http://cprover.diffblue.com/background-concepts.html#BMC_section">cprover: Background Concepts - Bounded model checking</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;It(ESBMC) does not require any special annotations in the source code to find such bugs, but it allows users to add their assertions and checks if they hold. In addition, ESBMC implements a k-induction proof rule and can be used to prove the absence of property violations (resp. the validity of user-defined assertions)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ÂÆÉÔºàESBMCÔºâ‰∏çÈúÄË¶ÅÂú®Ê∫ê‰ª£Á†Å‰∏≠ËøõË°å‰ªª‰ΩïÁâπÊÆäÁöÑÊ≥®ÈáäÊù•ÂèëÁé∞ËøôÁßçÈîôËØØÔºå‰ΩÜÂÆÉÂÖÅËÆ∏Áî®Êà∑Ê∑ªÂä†‰ªñ‰ª¨ÁöÑÊñ≠Ë®ÄÂπ∂Ê£ÄÊü•ÂÆÉ‰ª¨ÊòØÂê¶ÊàêÁ´ã„ÄÇÊ≠§Â§ñÔºåESBMCÂÆûÁé∞‰∫Ü‰∏Ä‰∏™k-ÂΩíÁ∫≥ËØÅÊòéËßÑÂàôÔºåÂèØ‰ª•Áî®Êù•ËØÅÊòéÊ≤°ÊúâËøùÂèçÂ±ûÊÄßÔºàÂç≥Áî®Êà∑ÂÆö‰πâÁöÑÊñ≠Ë®ÄÁöÑÊúâÊïàÊÄßÔºâ&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ESBMC-Architecture&quot;&gt;2. ESBMC Architecture&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/2f42f06c/1.png&quot; width=&quot;600&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;One of the significant challenges in software verification is the development and maintenance of an infrastructure that can reliably and efficiently handle real-world programs; it is an issue that only intensifies given the ever-evolving programming language standards.&lt;ul&gt;
&lt;li&gt;Êñ∞Ê†áÂáÜÂèëÂ∏ÉÈúÄË¶ÅÊñ∞ÁöÑÊîØÊåÅ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Front-end&quot;&gt;2.1. Front-end&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;an important piece of technology that should facilitate the transition between the &lt;strong&gt;program&lt;/strong&gt; under verification and a &lt;strong&gt;format&lt;/strong&gt; the tool can work upon&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Clang&quot;&gt;2.1.1. Clang&lt;/h4&gt;&lt;p&gt;ClangÊòØLLVMÁºñËØëÂô®ÁöÑc-familyÂâçÁ´ØÔºåClangÂèØËÉΩÊÑèÊåá‰∏âÁßç‰∏çÂêåÁöÑÂÆû‰ΩìÔºö&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ÂâçÁ´ØÔºàÂú®ClangÂ∫ì‰∏≠ÂÆûÁé∞Ôºâ&lt;/li&gt;
&lt;li&gt;ÁºñËØëÂô®È©±Âä®Á®ãÂ∫èÔºàÂú®clangÂëΩ‰ª§ÂíåClangÈ©±Âä®Á®ãÂ∫èÂ∫ì‰∏≠ÂÆûÁé∞Ôºâ&lt;/li&gt;
&lt;li&gt;ÂÆûÈôÖÁöÑÁºñËØëÂô®ÔºàÂú®clang -cc1ÂëΩ‰ª§‰∏≠ÂÆûÁé∞Ôºâ„ÄÇclang -cc1‰∏≠ÁöÑÁºñËØëÂô®‰∏ç‰ªÖÊòØÁî±ClangÂ∫ìÂÆûÁé∞ÔºåËøòÂπøÊ≥õÂú∞‰ΩøÁî®ÂÖ∂‰ªñLLVMÂ∫ìÊù•ÂÆûÁé∞ÁºñËØëÂô®ÁöÑ‰∏≠Á´Ø„ÄÅÂêéÁ´Ø‰ª•ÂèäÈõÜÊàêÁöÑÊ±áÁºñÂô®„ÄÇ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clang -emit-llvm -c size.c -o size.bc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËΩØ‰ª∂ÂÆâÂÖ®Â§áÂøòÂΩïÔºöCERT C Coding StandardÁ¨îËÆ∞</title>
    <link href="https://hejueyun.github.io/posts/e8d0ec3/"/>
    <id>https://hejueyun.github.io/posts/e8d0ec3/</id>
    <published>2022-04-08T20:29:29.000Z</published>
    <updated>2022-04-17T22:59:27.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Expressions-EXP">1. Expressions (EXP)</h2><h3 id="EXP30-C-Do-not-depend-on-the-order-of-evaluation-for-side-effects">1.1. EXP30-C. Do not depend on the order of evaluation for side effects</h3><blockquote><p>At specific points during execution, known as <strong>sequence points</strong>, all side effects of previous evaluations are complete, and no side effects of subsequent evaluations have yet taken place. Do not depend on the order of evaluation for side effects unless there is an intervening sequence point</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* i is modified twice between sequence points */</span> </span><br><span class="line">i = ++i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* i is read other than to determine the value to be stored */</span> </span><br><span class="line">a[i++] = i;</span><br></pre></td></tr></table></figure><ul><li>Attempting to modify an object multiple times between sequence points may cause that object to take on an unexpected value, which can lead to unexpected program behavior</li></ul><h4 id="ÂâØ‰ΩúÁî®">1.1.1. ÂâØ‰ΩúÁî®</h4><blockquote><p>Âú®‰∫ßÁîü‰∏Ä‰∏™ÂÄºÁöÑËøáÁ®ã‰∏≠ÔºåË°®ËææÂºèÂèØËÉΩ‰ºöÂØπÁéØÂ¢ÉÂÅöÂá∫ÂÖ∂‰ªñÊîπÂèòÔºåËøôÊ†∑ÁöÑÊîπÂèòË¢´Áß∞‰∏∫ÂâØ‰ΩúÁî®(side effect)ÔºåËØ∏Â¶ÇÂèòÈáèÁöÑÂÄºË¢´‰øÆÊîπÔºåÊàñËÄÖËæìÂÖ•ËæìÂá∫ÊµÅÁöÑÊï∞ÊçÆÊúâÊâÄÂèòÂåñ</p></blockquote><ul><li>Ë°®ËææÂºè<code>x + 1;</code>Â∞±‰∫ßÁîü‰∫Ü‰∏Ä‰∏™ÂÄºÔºå‰ΩÜÊòØÂÆÉÊ≤°Êúâ‰∫ßÁîü‰∏Ä‰∏™ÂâØ‰ΩúÁî®</li><li>Ë°®ËææÂºè<code>x = x+ 3;</code>‰∫ßÁîü‰∫Ü‰∏Ä‰∏™ÂÄºÔºåÂêåÊó∂‰πü‰ºö‰∫ßÁîü‰∏Ä‰∏™ÂâØ‰ΩúÁî®</li></ul><center><img loading="lazy" src="/posts/e8d0ec3/1.png" width="600"></center><h3 id="EXP32-C-Do-not-access-a-volatile-object-through-a-nonvolatile-reference">1.2. EXP32-C. Do not access a volatile object through a nonvolatile reference</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> **ipp; </span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> *ip;</span><br><span class="line">  <span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;i = %d.\n&quot;</span>, i);</span><br><span class="line">  ipp = &amp;ip; <span class="comment">/* May produce a warning diagnostic */</span> </span><br><span class="line">  ipp = (<span class="type">int</span>**) &amp;ip; <span class="comment">/* Constraint violation; may produce a warning diagnostic */</span></span><br><span class="line">  *ipp = &amp;i; <span class="comment">/* Valid */</span> </span><br><span class="line">  <span class="keyword">if</span> (*ip != <span class="number">0</span>) &#123; <span class="comment">/* Valid */</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The assignment <code>ipp = &amp;ip</code> is not safe because it allows the valid code that follows to reference the value of the volatile object <code>i</code> through the non-volatile-qualified reference <code>ip</code></p></blockquote><ul><li>Accessing an object with a volatile-qualified type through a reference with a non-volatile-qualified type is undefined behavior</li></ul><h3 id="EXP33-C-Do-not-read-uninitialized-memory">1.3. EXP33-C. Do not read uninitialized memory</h3><blockquote><p>Although compilers and static analysis tools often detect uses of uninitialized variables when they have access to the source code, diagnosing the problem is difficult or impossible when either the initialization or the use takes place in object code for which the source code is inaccessible. </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_negative</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sign;</span><br><span class="line">  <span class="built_in">set_flag</span>(number, &amp;sign); </span><br><span class="line">  <span class="keyword">return</span> sign &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *array = (<span class="type">int</span> *)<span class="built_in">malloc</span>(OLD_SIZE * <span class="built_in">sizeof</span>(<span class="type">int</span>)); </span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == array) &#123; </span><br><span class="line">  <span class="comment">/* Handle error */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; OLD_SIZE; ++i) &#123; </span><br><span class="line">  array[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The programmer neglected to account for the case where <code>number</code> is equal to 0. Because the local variable <code>sign</code> is uninitialized when calling <code>set_flag()</code> and is never written to by <code>set_flag()</code>, the comparison operation exhibits undefined behavior when reading sign.</li><li>Reading uninitialized variables is undefined behavior and can result in <strong>unexpected program behavior</strong>. In some cases, these security flaws may allow the <strong>execution of arbitrary code</strong>.</li></ul><h3 id="EXP34-C-Do-not-dereference-null-pointers">1.4. EXP34-C. Do not dereference null pointers</h3><blockquote><p>Dereferencing a null pointer is undefined behavior</p></blockquote><ul><li>Dereferencing a null pointer is undefined behavior, typically <strong>abnormal program termination</strong>. In some situations, however, dereferencing a null pointer can lead to the execution of arbitrary code</li></ul><h3 id="EXP35-C-Do-not-modify-objects-with-temporary-lifetime">1.5. EXP35-C. Do not modify objects with temporary lifetime</h3><blockquote><p>The C11 Standard introduced a new term: <strong>temporary lifetime</strong>. Modifying an object with temporary lifetime is undefined behavior</p><ul><li>the <strong>structure</strong> or <strong>union</strong> contains a member with <strong>array</strong> type (including, recursively, members of all contained structures and unions) refers to an object with automatic storage duration and temporary lifetime.</li></ul></blockquote><hr><blockquote><p>This noncompliant code example conforms to the C11 Standard; however, it fails to conform to C99. If compiled with a C99-conforming implementation, this code has undefined behavior <strong>because the sequence point preceding the call to <code>printf()</code> comes between the call and the access by <code>printf()</code> of the string in the returned object</strong></p></blockquote><ul><li>‰πüÂ∞±ÊòØËØ¥C99‰∏ãÂÖàÂêéÈ°∫Â∫è‰∏çÁ°ÆÂÆö</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123; <span class="type">char</span> a[<span class="number">8</span>]; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> <span class="built_in">salutation</span>(<span class="type">void</span>) &#123; <span class="keyword">struct</span> <span class="title class_">X</span> result = &#123; <span class="string">&quot;Hello&quot;</span> &#125;; <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> <span class="built_in">addressee</span>(<span class="type">void</span>) &#123; <span class="keyword">struct</span> <span class="title class_">X</span> result = &#123; <span class="string">&quot;world&quot;</span> &#125;; <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Noncompliant*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, %s!\n&quot;</span>, <span class="built_in">salutation</span>().a, <span class="built_in">addressee</span>().a); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Compliant*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">X</span> my_salutation = <span class="built_in">salutation</span>(); </span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">X</span> my_addressee = <span class="built_in">addressee</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, %s!\n&quot;</span>, my_salutation.a, my_addressee.a); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Attempting to modify an array or access it after its lifetime expires may result in erroneous program behavior</li></ul><h3 id="EXP36-C-Do-not-cast-pointers-into-more-strictly-aligned-pointer-types">1.6. EXP36-C. Do not cast pointers into more strictly aligned pointer types</h3><blockquote><p>Do not convert a pointer value to a pointer type that is more strictly aligned than the referenced type. Different alignments are possible for different types of objects. If the type-checking system is overridden by an explicit cast or the pointer is converted to a void pointer (void *) and then to a different type, the alignment of an object may be changed.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; </span><br><span class="line">  <span class="type">char</span> c = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="type">int</span> *ip = (<span class="type">int</span> *)&amp;c; <span class="comment">/* This can lose information */</span> </span><br><span class="line">  <span class="type">char</span> *cp = (<span class="type">char</span> *)ip;</span><br><span class="line">  <span class="comment">/* Will fail on some conforming implementations */</span> </span><br><span class="line">  <span class="built_in">assert</span>(cp == &amp;c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ê≠£Á°ÆÁöÑ</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i = c; </span><br><span class="line">  <span class="type">int</span> *ip = &amp;i;</span><br><span class="line">  <span class="built_in">assert</span>(ip == &amp;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>the char pointer <code>&amp;c</code> is converted to the more strictly aligned int pointer <code>ip</code>. On some implementations, <code>cp</code> will not match <code>&amp;c</code>.</li><li>Accessing a pointer or an object that is not properly aligned can cause a program to <strong>crash</strong> or give erroneous information, or it can cause <strong>slow pointer accesses</strong> (if the architecture allows misaligned accesses).</li></ul><h4 id="EXP36-C-EX2">1.6.1. EXP36-C-EX2</h4><blockquote><p>If a pointer is known to be correctly aligned to the target type, then a cast to that type is permitted. There are several cases where a pointer is known to be correctly aligned to the target type. The pointer could point to an object declared with a suitable alignment specifier. It could point to an object returned by aligned_alloc(), calloc(), malloc(), or realloc()</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdalign.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Align c to the alignment of an int */</span> </span><br><span class="line">  <span class="built_in">alignas</span>(<span class="type">int</span>) <span class="type">char</span> c = <span class="string">&#x27;x&#x27;</span>; </span><br><span class="line">  <span class="type">int</span> *ip = (<span class="type">int</span> *)&amp;c; </span><br><span class="line">  <span class="type">char</span> *cp = (<span class="type">char</span> *)ip;</span><br><span class="line">  <span class="comment">/* Both cp and &amp;c point to equally aligned objects */</span> </span><br><span class="line">  <span class="built_in">assert</span>(cp == &amp;c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXP37-C-Call-functions-with-the-correct-number-and-type-of-arguments">1.7. EXP37-C. Call functions with the correct number and type of arguments</h3><ul><li>Do not call a function with the wrong number or type of arguments.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* In another source file */</span> </span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">long</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* In this source file, no f prototype in scope */</span> </span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">g</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">f</span>(x); <span class="comment">// wrong</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">f</span>((<span class="type">long</span>)x); <span class="comment">//correct</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Calling a function with incorrect arguments can result in unexpected or unintended program behavior</li></ul><h3 id="EXP39-C-Do-not-access-a-variable-through-a-pointer-of-an-incompatible-type">1.8. EXP39-C. Do not access a variable through a pointer of an incompatible type</h3><ul><li>Modifying a variable through a pointer of an incompatible type (other than unsigned char) can lead to unpredictable results</li><li>Accessing an object by means of any other lvalue expression (other than unsigned char) is undefined behavior</li><li>Optimizing for performance can lead to aliasing errors that can be quite difficult to detect. Furthermore, as in the preceding example, unexpected results can lead to <strong>buffer overflow attacks</strong>, <strong>bypassing security checks</strong>, or unexpected execution.</li></ul><h3 id="EXP40-C-Do-not-modify-constant-objects">1.9. EXP40-C. Do not modify constant objects</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> **ipp; </span><br><span class="line"><span class="type">int</span> *ip;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">42</span>; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  ipp = &amp;ip; <span class="comment">/* Constraint violation */</span> </span><br><span class="line">  *ipp = &amp;i; <span class="comment">/* Valid */</span> </span><br><span class="line">  *ip = <span class="number">0</span>; <span class="comment">/* Modifies constant i (was 42) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXP42-C-Do-not-compare-padding-data">1.10. EXP42-C. Do not compare padding data</h3><ul><li>There may be unnamed padding within a structure object, but not at its beginning. . . . </li><li>There may be unnamed padding at the end of a structure or union.</li><li>unnamed members of objects of structure and union type do not participate in initialization. Unnamed members of structure objects have indeterminate value even after initialization<ul><li>ÁªìÊûÑÂíåËÅîÂêàÁ±ªÂûãÁöÑÂØπË±°ÁöÑÊú™ÂëΩÂêçÊàêÂëò‰∏çÂèÇ‰∏éÂàùÂßãÂåñ„ÄÇÁªìÊûÑ‰ΩìÂØπË±°ÁöÑÊú™ÂëΩÂêçÊàêÂëòÂú®ÂàùÂßãÂåñÂêé‰πüÊúâ‰∏çÁ°ÆÂÆöÁöÑÂÄº</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span> &#123; </span><br><span class="line">  <span class="type">char</span> c; </span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">13</span>]; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wrong</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> s *left, <span class="type">const</span> <span class="keyword">struct</span> s *right)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">memcmp</span>(left, right, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> s))) &#123; </span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//correct</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> s *left, <span class="type">const</span> <span class="keyword">struct</span> s *right)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> ((left &amp;&amp; right) &amp;&amp; (left-&gt;c == right-&gt;c) </span><br><span class="line">  &amp;&amp; (left-&gt;i == right-&gt;i) </span><br><span class="line">  &amp;&amp; (<span class="number">0</span> == <span class="built_in">memcmp</span>(left-&gt;buffer, right-&gt;buffer, <span class="number">13</span>))) &#123; </span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>memcmp()</code> is used to compare the contents of two structures, including any padding bytes</li></ul><h4 id="EXP42-C-EX1">1.10.1. EXP42-C-EX1</h4><center><img loading="lazy" src="/posts/e8d0ec3/2.png" width="550"></center><h3 id="EXP43-C-Avoid-undefined-behavior-when-using-restrict-qualified-pointers">1.11. EXP43-C. Avoid undefined behavior when using restrict-qualified pointers</h3><ul><li><p>deleting all instances of the qualifier from a program does not change its meaning (that is, observable behavior).</p></li><li><p>undefined behavior:</p><blockquote><p>A restrict-qualified pointer is assigned a value based on another restricted pointer whose associated block neither began execution before the block associated with this pointer, nor ended before the assignment </p></blockquote></li><li><p><strong><code>restrict</code> says that two pointers cannot point to overlappingÈáçÂè†ÁöÑ memory regions. The most common usage is for function arguments.</strong></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *restrict a; </span><br><span class="line"><span class="type">int</span> *restrict b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> c[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; </span><br><span class="line">  c[<span class="number">0</span>] = <span class="number">17</span>; </span><br><span class="line">  c[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">  a = &amp;c[<span class="number">0</span>]; </span><br><span class="line">  b = &amp;c[<span class="number">1</span>];</span><br><span class="line">  a = b; <span class="comment">/* Undefined behavior */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The incorrect use of restrict-qualified pointers can result in undefined behavior that might be exploited to cause data <strong>integrity</strong> violations.</li></ul><h3 id="EXP44-C-Do-not-rely-on-side-effects-in-operands-to-sizeof-Alignof-or-Generic">1.12. EXP44-C. Do not rely on side effects in operands to sizeof, _Alignof, or _Generic</h3><ul><li>Some operators <strong>do not evaluate their operands beyond the type information the operands provide</strong>. When using one of these operators, do not pass an operand that would otherwise yield a side effect since the side effect will not be generated.</li><li>The sizeof operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. In most cases, the operand is not evaluated. <ul><li>A possible exception is when the type of the operand is a variable length array typeÔºàVLAÔºâ</li><li>ÁÑ∂ËÄåin the case of a VLA used in sizeof, have <strong>unspecified results</strong></li><li>ÊâÄ‰ª•ÁªìËÆ∫ËøòÊòØ‰∏çË¶ÅÂú®sizeofÈáåÂâØ‰ΩúÁî®VLA</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">14</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">sizeof</span>(a++);</span><br></pre></td></tr></table></figure><ul><li>expression <code>a++</code> is not evaluatedËÆ°ÁÆó</li></ul><h3 id="EXP45-C-Do-not-perform-assignments-in-selection-statements">1.13. EXP45-C. Do not perform assignments in selection statements</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a = b) &#123; </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123; <span class="comment">/* ... */</span> &#125; <span class="keyword">while</span> (<span class="built_in">foo</span>(), x = y);</span><br></pre></td></tr></table></figure><h4 id="EXP45-C-EX2">1.13.1. EXP45-C-EX2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((x = y)) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="EXP46-C-Do-not-use-a-bitwise-operator-with-a-Boolean-like-operand">1.14. EXP46-C. Do not use a bitwise operator with a Boolean-like operand</h3><ul><li>Ê∑∑Ê∑Ü‰∫Ü<code>&amp;</code>Âíå<code>&amp;&amp;</code><ul><li>The expression <code>x &amp; y</code> will perform a bitwise operation on each individual bit in <code>x</code> and <code>y</code>. So if x is <code>1010</code> in binary and y is <code>1100</code> then <code>x &amp; y</code> will evaluate to <code>1000</code>.</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">getuid</span>() &amp; <span class="built_in">geteuid</span>() == <span class="number">0</span>)) &#123; <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">getuid</span>() &amp;&amp; <span class="built_in">geteuid</span>() == <span class="number">0</span>)) &#123; <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Risk-Assessment">1.15. Risk Assessment</h3><table><thead><tr><th>Rule</th><th>Severity</th><th>Likelihood</th><th>Remediation Cost</th><th>Priority</th><th>Level</th></tr></thead><tbody><tr><td>EXP30-C</td><td>Medium</td><td>Probable</td><td>Medium</td><td>P8</td><td>L2</td></tr><tr><td>EXP32-C</td><td>Low</td><td>Likely</td><td>Medium</td><td>P6</td><td>L2</td></tr><tr><td>EXP33-C</td><td>High</td><td>Probable</td><td>Medium</td><td>P12</td><td>L1</td></tr><tr><td>EXP34-C</td><td>High</td><td>Likely</td><td>Medium</td><td>P18</td><td>L1</td></tr><tr><td>EXP35-C</td><td>Low</td><td>Probable</td><td>Medium</td><td>P4</td><td>L3</td></tr><tr><td>EXP36-C</td><td>Low</td><td>Probable</td><td>Medium</td><td>P4</td><td>L3</td></tr><tr><td>EXP37-C</td><td>Medium</td><td>Probable</td><td>High</td><td>P4</td><td>L3</td></tr><tr><td>EXP39-C</td><td>Medium</td><td>Unlikely</td><td>High</td><td>P2</td><td>L3</td></tr><tr><td>EXP40-C</td><td>Low</td><td>Unlikely</td><td>Medium</td><td>P2</td><td>L3</td></tr><tr><td>EXP42-C</td><td>Medium</td><td>Probable</td><td>Medium</td><td>P8</td><td>L2</td></tr><tr><td>EXP43-C</td><td>Medium</td><td>Probable</td><td>High</td><td>P4</td><td>L3</td></tr><tr><td>EXP44-C</td><td>Low</td><td>Unlikely</td><td>Low</td><td>P3</td><td>L3</td></tr><tr><td>EXP45-C</td><td>Low</td><td>Likely</td><td>Medium</td><td>P6</td><td>L2</td></tr><tr><td>EXP46-C</td><td>Low</td><td>Likely</td><td>Low</td><td>P9</td><td>L2</td></tr></tbody></table><h2 id="Memory-Mem">2. Memory (Mem)</h2><p>.</p><h2 id="Array-ARR">3. Array (ARR)</h2><p>.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Expressions-EXP&quot;&gt;1. Expressions (EXP)&lt;/h2&gt;&lt;h3 id=&quot;EXP30-C-Do-not-depend-on-the-order-of-evaluation-for-side-effects&quot;&gt;1.1. EXP30-C. Do not depend on the order of evaluation for side effects&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;At specific points during execution, known as &lt;strong&gt;sequence points&lt;/strong&gt;, all side effects of previous evaluations are complete, and no side effects of subsequent evaluations have yet taken place. Do not depend on the order of evaluation for side effects unless there is an intervening sequence point&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* i is modified twice between sequence points */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = ++i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* i is read other than to determine the value to be stored */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[i++] = i;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Attempting to modify an object multiple times between sequence points may cause that object to take on an unexpected value, which can lead to unexpected program behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ÂâØ‰ΩúÁî®&quot;&gt;1.1.1. ÂâØ‰ΩúÁî®&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Âú®‰∫ßÁîü‰∏Ä‰∏™ÂÄºÁöÑËøáÁ®ã‰∏≠ÔºåË°®ËææÂºèÂèØËÉΩ‰ºöÂØπÁéØÂ¢ÉÂÅöÂá∫ÂÖ∂‰ªñÊîπÂèòÔºåËøôÊ†∑ÁöÑÊîπÂèòË¢´Áß∞‰∏∫ÂâØ‰ΩúÁî®(side effect)ÔºåËØ∏Â¶ÇÂèòÈáèÁöÑÂÄºË¢´‰øÆÊîπÔºåÊàñËÄÖËæìÂÖ•ËæìÂá∫ÊµÅÁöÑÊï∞ÊçÆÊúâÊâÄÂèòÂåñ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ë°®ËææÂºè&lt;code&gt;x + 1;&lt;/code&gt;Â∞±‰∫ßÁîü‰∫Ü‰∏Ä‰∏™ÂÄºÔºå‰ΩÜÊòØÂÆÉÊ≤°Êúâ‰∫ßÁîü‰∏Ä‰∏™ÂâØ‰ΩúÁî®&lt;/li&gt;
&lt;li&gt;Ë°®ËææÂºè&lt;code&gt;x = x+ 3;&lt;/code&gt;‰∫ßÁîü‰∫Ü‰∏Ä‰∏™ÂÄºÔºåÂêåÊó∂‰πü‰ºö‰∫ßÁîü‰∏Ä‰∏™ÂâØ‰ΩúÁî®&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/e8d0ec3/1.png&quot; width=&quot;600&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;EXP32-C-Do-not-access-a-volatile-object-through-a-nonvolatile-reference&quot;&gt;1.2. EXP32-C. Do not access a volatile object through a nonvolatile reference&lt;/h3&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Software Security" scheme="https://hejueyun.github.io/categories/Security/Software-Security/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËΩØ‰ª∂ÂÆâÂÖ®Â§áÂøòÂΩïÔºöMem Management</title>
    <link href="https://hejueyun.github.io/posts/de2aa2c7/"/>
    <id>https://hejueyun.github.io/posts/de2aa2c7/</id>
    <published>2022-04-01T11:56:49.000Z</published>
    <updated>2022-04-06T11:49:35.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="risk-assessment">1. risk assessment</h2><blockquote><p>CERT C Coding Standard contains a <strong>risk assessment</strong> section</p></blockquote><h3 id="Severity-‰∏•ÈáçÊÄß">1.1. Severity ‰∏•ÈáçÊÄß</h3><ul><li>How serious are the consequences of the rule being ignored</li></ul><table><thead><tr><th>Value</th><th>Meaning</th><th>Examples of Vulnerabilities</th></tr></thead><tbody><tr><td>1</td><td>low</td><td>Denial-of-service attack, abnormal termination</td></tr><tr><td>2</td><td>medium</td><td>Data integrity violation, unintentional information disclosure</td></tr><tr><td>3</td><td>high</td><td>Run arbitrary code</td></tr></tbody></table><h3 id="Likelihood-ÂèØËÉΩÊÄß">1.2. Likelihood ÂèØËÉΩÊÄß</h3><ul><li>How likely is it that a flaw introduced by ignoring the rule can lead to an exploitable vulnerability</li></ul><table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>Unlikely</td></tr><tr><td>2</td><td>Probable</td></tr><tr><td>3</td><td>likely</td></tr></tbody></table><h3 id="Detection-and-Correction-Ê£ÄÊµãÂíåÁ∫†Ê≠£">1.3. Detection and Correction Ê£ÄÊµãÂíåÁ∫†Ê≠£</h3><ul><li>How will we cope with detection and correction</li></ul><table><thead><tr><th>Value</th><th>Meaning</th><th>Detection</th><th>Correction</th></tr></thead><tbody><tr><td>1</td><td>low</td><td>Automatic(Static and Dynamic Analysis)</td><td>Automatic(Fault Localisation and Repair)</td></tr><tr><td>2</td><td>medium</td><td>Automatic(Static and Dynamic Analysis)</td><td>Manual</td></tr><tr><td>3</td><td>high</td><td>Manual(Code Inspection)</td><td>Manual</td></tr></tbody></table><h3 id="Risk-Management">1.4. Risk Management</h3><ul><li>The three values are then multiplied together for each rule: severity, likelihood and remediation cost<ul><li>10 distinct values are possible: 1, 2, 3, 4, 6, 8, 9, 12, 18, and 27</li></ul></li><li>priority range<ul><li>12 to 27 are Level 1</li><li>6 to 9 are Level 2</li><li>1 to 4 are Level 3</li></ul></li></ul><center><img loading="lazy" src="/posts/de2aa2c7/2.png" width="550"></center><h2 id="CERT-C-Coding-Standard">2. CERT C Coding Standard</h2><h3 id="MEM30-C-Do-not-access-freed-memory">2.1. MEM30-C. Do not access freed memory</h3><p><strong>dangling pointers</strong>ÊÇ¨Á©∫ÊåáÈíà</p><ul><li>Pointers to memory that has been deallocated<ul><li>Accessing a dangling pointer is undefined behaviour and can result in exploitable vulnerabilities</li></ul></li></ul><p><strong>example</strong></p><ul><li><code>p</code> is freed before <code>p-&gt;next</code> is executed, so that <code>p-&gt;next</code> reads memory that has already been freed</li></ul><p><strong>Risk Assessment</strong></p><ul><li>Reading memory that has been freed<ul><li>abnormal program termination</li><li>denial-of-service attacks</li></ul></li><li>Writing memory<ul><li>execution of arbitrary code</li></ul></li></ul><h3 id="MEM31-C-Free-dynamically-allocated-memory-when-no-longer-needed">2.2. MEM31-C. Free dynamically allocated memory when no longer needed</h3><p><strong>example</strong></p><ul><li>The object allocated by the call to malloc() is not freed before the end of the lifetime of the last pointer</li></ul><center><img loading="lazy" src="/posts/de2aa2c7/3.png" width="550"></center><h3 id="MEM33-C-Allocate-and-copy-structures-containing-a-flexible-array-member-dynamically">2.3. MEM33-C. Allocate and copy structures containing a flexible array member dynamically</h3><blockquote><p>As a special case, the last element of a structure with more than one named member may have an incomplete array type; this is called a flexible array member. In most situations, the flexible array member is ignored. In particular, the size of the structure is as if the flexible array member were omitted except that it may have more trailing padding than the omission would imply.</p></blockquote><p><strong>example</strong></p><center><img loading="lazy" src="/posts/de2aa2c7/4.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/5.png" width="550"></center><h3 id="MEM34-C-Only-free-memory-allocated-dynamically">2.4. MEM34-C. Only free memory allocated dynamically</h3><ul><li>Freeing memory that is not allocated dynamically can result in heap corruption</li></ul><p><strong>Risk Assessment</strong></p><ul><li>The consequences of this error depend on the implementation<ul><li>they range from nothing to arbitrary code execution if that memory is reused by <code>malloc()</code></li></ul></li></ul><h3 id="MEM35-C-Allocate-sufficient-memory-for-an-object">2.5. MEM35-C. Allocate sufficient memory for an object</h3><ul><li>An insufficient amount of memory can be allocated where sizeof(long) is larger than sizeof(int), which can cause a heap buffer overflow</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/de2aa2c7/6.png" width="550"></center><h3 id="MEM36-C-Do-not-modify-the-alignment-of-objects-by-calling-realloc">2.6. MEM36-C. Do not modify the alignment of objects by calling realloc()</h3><ul><li>Do not invoke realloc() to modify the size of allocated objects that have stricter alignment requirements than those guaranteed by malloc()</li></ul><center><img loading="lazy" src="/posts/de2aa2c7/7.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/8.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/9.png" width="550"></center><h2 id="Secure-C-Programming">3. Secure C Programming</h2><ol><li>Pointers should not be left uninitialized</li><li>They should be assigned either NULL or the address of a valid item in memory</li><li>When you use free to deallocate dynamically allocated memory, the pointer passed to free is not assigned a new value, so it still points to the memory location where the dynamically allocated memory used to be</li><li>When you free dynamically allocated memory, you should immediately assign the pointer either NULL or a valid address<ol><li>We chose not to do this for local pointer variables that immediately go out of scope after a call to free</li></ol></li><li>Undefined behavior occurs when you attempt to use free to deallocate dynamic memory that was already deallocated‚Äîthis is known as a ‚Äúdouble free vulnerability‚Äù</li><li>To ensure that you don‚Äôt attempt to deallocate the same memory more than once, immediately set a pointer to NULL after the call to free‚Äî attempting to free a NULL pointer has no effect</li><li>Function malloc returns NULL if it‚Äôs unable to allocate the requested memory</li><li>You should always ensure that malloc did not return NULL before attempting to use the pointer that stores malloc‚Äôs return value</li></ol><h2 id="Tool-Selection-and-Validation">4. Tool Selection and Validation</h2><blockquote><p>Although rule checking can be performed manually, with increasing program size and complexity, it rapidly becomes infeasible. For this reason, the use of static analysis tools is recommended</p><p>When choosing a source code analysis tool, it is clearly desirable that the tool be able to enforce as many of the guidelines on the wiki as possible</p></blockquote><h3 id="Completeness-and-Soundness">4.1. Completeness and Soundness</h3><blockquote><p>It should be recognized that, in general, determining conformance to coding rules and recommendations is computationally undecidable. The precision of static analysis has practical limitations.</p><ul><li>Â∫îËØ•ËÆ§ËØÜÂà∞Ôºå‰∏ÄËà¨Êù•ËØ¥ÔºåÁ°ÆÂÆöÊòØÂê¶Á¨¶ÂêàÁºñÁ†ÅËßÑÂàôÂíåÂª∫ËÆÆÂú®ËÆ°ÁÆó‰∏äÊòØÊó†Ê≥ïÂÜ≥ÂÆöÁöÑ„ÄÇÈùôÊÄÅÂàÜÊûêÁöÑÁ≤æÁ°ÆÊÄßÊúâÂÆûÈôÖÁöÑÈôêÂà∂„ÄÇ</li></ul></blockquote><blockquote><p>For example, the halting theorem of computer science states that programs exist in which exact control flow cannot be determined statically. Consequently, any property dependent on control flow‚Äîsuch as halting‚Äîmay be indeterminate for some programs. A consequence of undecidability is that it may be impossible for any tool to determine statically whether a given guideline is satisfied in specific circumstances. The widespread presence of such code may also lead to unexpected results from an analysis tool.</p></blockquote><ul><li>the analysis may generate:<ul><li>Flase negatives</li><li>Flase positive</li></ul></li></ul><center><img loading="lazy" src="/posts/de2aa2c7/1.png" width="550"></center><ul><li>An analyzer is considered <strong>sound</strong> with respect to a specific guideline if it cannot give a false-negative result, meaning it finds all violations of the guideline within the entire program</li><li>An analyzer is considered <strong>complete</strong> if it cannot issue false-positive results, or false alarms</li><li>incomplete: <ul><li>You cannot prove everything that in the system is True</li><li>There are some assertion cannot be triggered.</li></ul></li></ul><h4 id="False-Negatives">4.1.1. False Negatives</h4><blockquote><p><strong>Failure to report a real flaw in the code is usually regarded as the most serious analysis error, as it may leave the user with a false sense of security</strong>. Most tools err on the side of caution and consequently generate false positives. </p></blockquote><h4 id="False-Positives">4.1.2. False Positives</h4><blockquote><p><strong>The tool reports a flaw when one does not exist</strong>. False positives may occur because the code is too complex for the tool to perform a complete analysis. The use of features such as function pointers and libraries may make false positives more likely</p></blockquote><h3 id="Taint-Analysis-Ê±°ÁÇπÂàÜÊûê">4.2. Taint Analysis Ê±°ÁÇπÂàÜÊûê</h3><ul><li>If the value of an operand or argument may be outside the domain of an operation or function that consumes that value, and the value is derived from any external input to the program (such as a command-line argument, data returned from a system call, or data in shared memory), that value is tainted, and its origin is known as a tainted source.</li></ul><h4 id="Sanitization">4.2.1. Sanitization</h4><p>To remove the taint from a value, the value must be sanitized to ensure that it is in the defined domain of any restricted sink into which it flows.</p><ul><li>Operands and arguments whose domain is a subset of the domain described by their types are called restricted sinks. Any integer operand used in a pointer arithmetic operation is a restricted sink for that operand<ul><li>ÊØîÂ¶ÇÊï∞ÁªÑË∂äÁïåÂ∞±ÁÆóout of domain?</li></ul></li></ul><p>Êõ¥Â§öÂèÇËÄÉ</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html">AddressSanitizer ‚Äî Clang 15.0.0git documentation</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;risk-assessment&quot;&gt;1. risk assessment&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CERT C Coding Standard contains a &lt;strong&gt;risk assessment&lt;/strong&gt; section&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Severity-‰∏•ÈáçÊÄß&quot;&gt;1.1. Severity ‰∏•ÈáçÊÄß&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;How serious are the consequences of the rule being ignored&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Examples of Vulnerabilities&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;Denial-of-service attack, abnormal termination&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;Data integrity violation, unintentional information disclosure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;Run arbitrary code&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;Likelihood-ÂèØËÉΩÊÄß&quot;&gt;1.2. Likelihood ÂèØËÉΩÊÄß&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;How likely is it that a flaw introduced by ignoring the rule can lead to an exploitable vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Unlikely&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Probable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;likely&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;Detection-and-Correction-Ê£ÄÊµãÂíåÁ∫†Ê≠£&quot;&gt;1.3. Detection and Correction Ê£ÄÊµãÂíåÁ∫†Ê≠£&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;How will we cope with detection and correction&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Software Security" scheme="https://hejueyun.github.io/categories/Security/Software-Security/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>Bounded Model Checking</title>
    <link href="https://hejueyun.github.io/posts/ade5e95e/"/>
    <id>https://hejueyun.github.io/posts/ade5e95e/</id>
    <published>2022-03-30T22:02:54.000Z</published>
    <updated>2022-05-27T12:58:46.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Circuit-Satisfiability">1. Circuit Satisfiability</h2><center><img loading="lazy" src="/posts/ade5e95e/7.png" width="650"></center><ul><li>problem</li></ul><center><img loading="lazy" src="/posts/ade5e95e/8.png" width="650"></center><ul><li>Áî±Ê≠§ÂºïÂÖ•‰∫ÜFormula Satisfiability<ul><li>The <strong>SAT</strong> problem asks whether a given <strong>Boolean formula</strong> is satisfiable</li><li>The <strong>SMT</strong> decides the satisfiability of <strong>first-order logic formulae</strong> using the combination of different background theories</li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/9.png" width="450"></center><h2 id="BMC">2. BMC</h2><p>BMC: ÊúâÁïåÊ®°ÂûãÊ£ÄÊµã</p><center><img loading="lazy" src="/posts/ade5e95e/4.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/10.png" width="650"></center><h3 id="MC-vs-BMC">2.1. MC vs BMC</h3><center><img loading="lazy" src="/posts/ade5e95e/5.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/6.png" width="650"></center><ul><li>Ê≥®ÊÑècompleteness threshold</li></ul><h3 id="example">2.2. example</h3><center><img loading="lazy" src="/posts/ade5e95e/11.jpg" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/12.jpg" width="650"></center><h3 id="Step">2.3. Step</h3><center><img loading="lazy" src="/posts/ade5e95e/13.png" width="650"></center><hr><center><img loading="lazy" src="/posts/ade5e95e/14.JPG" width="350"></center><h2 id="SAT-x2F-SMT-based-BMC-tools-for-C">3. SAT&#x2F;SMT-based BMC tools for C</h2><center><img loading="lazy" src="/posts/ade5e95e/15.png" width="650"></center><h3 id="Typical-features">3.1. Typical features</h3><ul><li><strong>full language support</strong><ul><li>bit-precise operations, structs, arrays, ‚Ä¶ </li><li>heap-allocated memory </li><li>concurrency</li></ul></li><li><strong>built-in safety checks</strong><ul><li>overflow, div-by-zero, array out-of-bounds indexing, ‚Ä¶ </li><li>memory safety: nil pointer deref, memory leaks, ‚Ä¶ </li><li>deadlocks, race conditions</li></ul></li><li><strong>user-specified assertions and error labels</strong></li><li><strong>non-deterministic modelling</strong> <ul><li>nondeterministic assignments </li><li>assume-statements</li></ul></li></ul><h3 id="General-Architecture-and-Approach">3.2. General Architecture and Approach</h3><center><img loading="lazy" src="/posts/ade5e95e/16.png" width="650"></center><p>General approach</p><ol><li>Simplify control flow</li><li>Unwind <strong>all</strong> of the loops (ÊåáÁöÑÊòØÈÉΩ‰ºöË¢´unwindÔºå‰ΩÜunwindÂ§öÂ∞ëÊ¨°ËøòÊòØÁî±boundÂÜ≥ÂÆö)</li><li>Convert into single static assignment (SSA) form</li><li>Convert into equations and simplify</li><li>(Bit-blast) <blockquote><p>‚ÄúBit-blasting‚ÄùÊØîÁâπÁàÜÁ†¥ is a technique for <strong>reducing first-order terms and predicates</strong> in the theory of bit-vectors 1 <strong>to propositional logic</strong>. Every bit in each <strong>bit-vector term</strong> is represented by a propositional <strong>literal and clauses</strong> are added that link them.</p></blockquote></li><li>Solve with a SAT&#x2F;SMT solver</li><li>Convert SAT <strong>assignment</strong> into a counterexample</li></ol><h4 id="Control-flow-simplifications">3.2.1. Control flow simplifications</h4><ul><li>remove all side effects<ul><li>e.g., j&#x3D;++i; becomes i &#x3D;i+1; j &#x3D; i;</li></ul></li><li>simplify all control flow structures into core forms<ul><li>e.g., replace for, do while by while</li><li>e.g., replace case by if</li></ul></li><li>make control flow explicit<ul><li>e.g., replace continue, break by goto</li><li>e.g., replace if, while by goto</li></ul></li></ul><h4 id="Loop-unwinding">3.2.2. Loop unwinding</h4><ul><li>all loops are ‚Äúunwound‚Äù<ul><li>i.e., replaced by several guarded copies of the loop body<ul><li>same for backward gotos and recursive functions </li><li>can use different unwinding bounds for different loops</li></ul></li><li>each statement is executed <strong>at most once</strong><ul><li>to check <strong>whether unwinding is sufficient</strong> special ‚Äúunwinding assertion‚Äù claims are added</li></ul></li><li>‚áíif a program satisfies all of its <strong>claims</strong> and all <strong>unwinding assertions</strong> then it is correct!</li></ul></li><li>multiple loops<ul><li>use <code>--partial-loops</code> to suppress insertion (?)</li><li>nsound</li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/17.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/18.png" width="650"></center><h4 id="Safety-conditions">3.2.3. Safety conditions</h4><ul><li>Built-in safety checks converted into explicit assertions<ul><li>e.g., array safety: <code>a[i]=...;</code> $\leftrightarrow$ <code>assert(0 &lt;= i &amp;&amp; i &lt; N); a[i]=...;</code></li></ul></li><li>sometimes easier at intermediate representation or formula level<ul><li>e.g., word-aligned pointer access, overflow, ‚Ä¶</li></ul></li></ul><h4 id="Transforming-straight-line-programs-into-equations">3.2.4. Transforming straight-line programs into equations</h4><ul><li>each variable is assigned only once<ul><li><code>x=1; y=2;</code> $\leftrightarrow$ <code>x0=1; y0=2&#39;</code></li></ul></li><li>variables are assigned multiple times<ul><li><code>x=1; x=x+1;</code> $\leftrightarrow$ <code>x0=1; x1=x0+1;&#39;</code></li></ul></li><li>in control flow branches (if-statements)<ul><li>for each control flow <strong>join point</strong>ËøûÊé•ÁÇπ, add a new variable with <strong>guarded assignment</strong> as definition<ul><li>also called $œï$-function</li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/19.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/20.png" width="650"></center><h4 id="Handling-arrays">3.2.5. Handling arrays</h4><ul><li>Arrays can be replaced by individual variables, with a ‚Äúdemux‚ÄùËß£Á†Å at each access<ul><li>surprisingly effective (for N&lt;1000) because value of i can often be determined statically<ul><li>due to <strong>constant propagation</strong></li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/21.png" width="650"></center><p><strong>Handling arrays with theories</strong></p><ul><li>Arrays can be seen as ADT (abstract data type, ÊäΩË±°Êï∞ÊçÆÁªìÊûÑ) with two operations:<ul><li>read</li><li>write</li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/22.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/23.png" width="650"></center><h4 id="Modeling-with-non-determinism">3.2.6. Modeling with non-determinism</h4><p>Extend C with three modeling features</p><ul><li><code>assert(e)</code>: <strong>aborts</strong> execution when e is false, no-op otherwise<ul><li><code>void assert (_Bool e) &#123; if (!e) exit(); &#125;</code></li></ul></li><li><code>nondet_int()</code>: <strong>returns</strong> non-deterministicÈùûÁ°ÆÂÆöÔºà‰πüÂ∞±ÊòØÈöèÊú∫ÔºüÔºâ int-value<ul><li><code>int nondet_int () &#123; int x; return x; &#125;</code></li></ul></li><li><code>assume(e)</code>: <strong>‚Äúignores‚Äù</strong> execution when e is false, no-op otherwise<ul><li><code>void assume (_Bool e) &#123; while (!e) ; &#125;</code></li></ul></li></ul><p><strong>General approach</strong></p><ul><li>use C program to set up structure and deterministic computations</li><li>use non-determinism to set up <strong>search space</strong> </li><li>use assumptions to constrain search space</li><li>use failing assertion to start search</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="type">int</span> x=<span class="built_in">nondet_int</span>(),y=<span class="built_in">nondet_int</span>(),z=<span class="built_in">nondet_int</span>(); </span><br><span class="line">  __ESBMC_assume(x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; z &gt; <span class="number">0</span>); </span><br><span class="line">  __ESBMC_assume(x &lt; <span class="number">16384</span> &amp;&amp; y &lt; <span class="number">16384</span> &amp;&amp; z &lt; <span class="number">16384</span>); </span><br><span class="line">  <span class="built_in">assert</span>(x*x + y*y != z*z); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BMC-of-Multi-threaded-Software">4. BMC of Multi-threaded Software</h2><ul><li>ËßÅ<a href="https://hejueyun.github.io/posts/536aff33/">Detection of Software Vulnerabilities: Static Analysis</a></li></ul><h2 id="SAT-vs-SMT">5. SAT vs SMT</h2><center><img loading="lazy" src="/posts/ade5e95e/24.png" width="650"></center><h2 id="SMT-based-BMC">6. SMT-based BMC</h2><ul><li>In SMT-based BMC, œà is a <strong>quantifier-free</strong> formula in a <strong>decidable</strong> subset of <strong>first-order logic</strong> which is then checked for <strong>satisfiability</strong> by an SMT solver</li><li>SMT-based BMC must consider a number of <strong>issues that are not easily mapped into the theories supported by SMT solvers</strong> Ôºài.e. embedded softwareÔºâ<blockquote><p>In previous work on SMTbased BMC for software only the theories of uninterpreted functions, arrays and linear arithmetic were considered, but no encoding was provided for <strong>ANSI-C constructs</strong> such as <strong>bit-level operations</strong>, <strong>fixedpoint</strong> <strong>arithmetic</strong>, <strong>pointers</strong> (i.e., pointer arithmetic and comparisons) and <strong>unions</strong>.</p></blockquote></li></ul><h3 id="Generation-of-VCs">6.1. Generation of VCs</h3><ul><li><p>VC: verification condition </p><blockquote><p>BMC unrolls the system k times and translates it into a verification condition (VC) $œà$ such that $œà$ is satisfiable if and only if $œÜ$ has a counterexample of depth k or less</p><p>The VC $œà$ is a quantifier-free formula in a decidable subset of first-order logic, which is then checked for satisfiability by an SMT solver</p></blockquote></li><li><p><strong>model checking problem</strong> is formulated by constructing the following logical formulaÔºö$œà_k&#x3D;I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} Œ≥(s_j, s_{j+1}) \land \lnot œÜ(s_i)$</p><ul><li>$œÜ$ is a safety property</li><li>$I$ the set of initial states of $M$</li><li>$Œ≥(s_j, s_{j+1})$ the transition relation of M between time steps $j$ and $j + 1$</li><li>$I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} Œ≥(s_j,s_{j+1})$ <ul><li>represents the executions of M of length i and the original formula can be satisfied if and only if for some $i ‚â§ k$ there exists a reachable state at time step i in which œÜ is violated</li></ul></li></ul></li><li><p>If it is <strong>satisfiable</strong>, then the SMT solver provides a satisfying assignment, from which we can extract the values of the program variables to construct a counter-example</p><ul><li>A counter-example for a property œÜ is a sequence of states $s_0, s_1,‚Ä¶,s_k$ with $s_0 ‚àà S_0$, $s_k ‚àà S$, and $Œ≥(s_i, s_{i+1})$ for $0 ‚â§ i &lt; k$.</li></ul></li><li><p>If it is <strong>unsatisfiable</strong>, we can conclude that no error state is reachable in k steps or less</p></li></ul><div class="admonition caution"><p>It is important to note that this approach can be used only to find violations of the property up to the bound k. In order to prove properties we need to compute the completeness threshold (CT), which can be smaller than or equal to the maximum number of loop-iterations occurring in the program (ÂÆåÂ§áÊÄßÈòàÂÄºÔºàCTÔºâÔºåÂÆÉÂèØ‰ª•Â∞è‰∫éÊàñÁ≠â‰∫éÁ®ãÂ∫è‰∏≠Âá∫Áé∞ÁöÑÊúÄÂ§ßÂæ™ÁéØËø≠‰ª£Ê¨°Êï∞)</p></div><ul><li>‰πüÂ∞±ÊòØÊúâ‰∏çÊúâÁïåÈÉΩÂ∑Æ‰∏çÂ§ö‰∫Ü</li></ul><p>points</p><ul><li>the encoding techniques that we use to convert the constraints and properties from the ANSI-C programs into the <strong>different background theories of the SMT solvers</strong></li><li>approach to decide the best encoding and solver to be used during the verification process.</li></ul><h2 id="CBMC">7. CBMC</h2><ul><li>CBMC implements BMC for ANSI-C&#x2F;C++ programs using <strong>SAT</strong> solvers<ul><li>process C&#x2F;C++ code using the goto-cc tool</li><li>process the C&#x2F;C++ files and to build an abstract syntax tree (AST) (via internal parser based on Flex&#x2F;Bison)<blockquote><p>The typechecker of CBMC‚Äôs front-end annotates this AST with types and generates a symbol table. CBMC‚Äôs IRep class then converts the annotated AST into an internal, language-independent format used by the remaining phase of the front-end.</p></blockquote></li></ul></li></ul><h2 id="ESBMC">8. ESBMC</h2><h3 id="Tool-Architecture">8.1. Tool Architecture</h3><h4 id="Frontend">8.1.1. Frontend</h4><ul><li>The <strong>white</strong> boxes (except for the SMT solver) represent the components that we reused from the CBMC model checker without any modification</li></ul><h4 id="Middleware">8.1.2. Middleware</h4><ul><li><p>The <strong>gray</strong> boxes with dashed lines represent the components that we modified in order to:</p><ul><li>generate VCs to check for memory leaks (implemented in GOTO program</li><li>to simplify the unrolled formula (implemented in GOTO symex</li><li>to perform an <strong>up-front analysis</strong>ÂÖàÊúüÂàÜÊûê in the CFG of the program to determine the best encoding and solver for a particular program (implemented in GOTO symex</li></ul></li><li><p><strong>GOTO program component</strong></p><ul><li>converts the ANSI-C program into a GOTO-program, which simplifies the representation (e.g., replacement of switch and while by if and goto statements)</li><li>and handles the unrolling of the loops and the elimination of recursive functions</li></ul></li><li><p><strong>GOTO symex component</strong></p><ul><li>performs a symbolic simulation of the program</li></ul></li></ul><h4 id="Backend">8.1.3. Backend</h4><ul><li>In the back-end of ESBMC, we build two sets of quantifier-free formulae C (for the constraints) and P (for the properties)<ul><li>C encodes the first part of $œà_k$ (more precisely, $I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} Œ≥(s_j, s_{j+1})$ )</li><li>$¬¨P$ encodes the second part (more precisely, $\bigvee_{i&#x3D;0}^k \lnot œÜ(s_i)$)</li><li>we check $C \models_{\tau} P$ using an SMT solver<ul><li>If the answer is satisfiable, we have found a violation of the property œÜ, which is encoded in $œà_k$. </li><li>If not, the property holds up to the bound k.</li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/2.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/3.png" width="650"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Circuit-Satisfiability&quot;&gt;1. Circuit Satisfiability&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/7.png&quot; width=&quot;650&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;problem&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/8.png&quot; width=&quot;650&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;Áî±Ê≠§ÂºïÂÖ•‰∫ÜFormula Satisfiability&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;SAT&lt;/strong&gt; problem asks whether a given &lt;strong&gt;Boolean formula&lt;/strong&gt; is satisfiable&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;SMT&lt;/strong&gt; decides the satisfiability of &lt;strong&gt;first-order logic formulae&lt;/strong&gt; using the combination of different background theories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/9.png&quot; width=&quot;450&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;BMC&quot;&gt;2. BMC&lt;/h2&gt;&lt;p&gt;BMC: ÊúâÁïåÊ®°ÂûãÊ£ÄÊµã&lt;/p&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/4.png&quot; width=&quot;650&quot;&gt;&lt;/center&gt;

&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/10.png&quot; width=&quot;650&quot;&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="ESBMC" scheme="https://hejueyun.github.io/categories/Security/ESBMC/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-‰∏ÄÈò∂ÈÄªËæë-SMT</title>
    <link href="https://hejueyun.github.io/posts/39d160ca/"/>
    <id>https://hejueyun.github.io/posts/39d160ca/</id>
    <published>2022-03-10T16:05:21.000Z</published>
    <updated>2022-05-24T12:19:22.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SAT-vs-SMT-Â∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÈóÆÈ¢ò-vs-ÂèØÊª°Ë∂≥ÊÄßÊ®°ÁêÜËÆ∫">1. SAT vs SMT Â∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÈóÆÈ¢ò vs  ÂèØÊª°Ë∂≥ÊÄßÊ®°ÁêÜËÆ∫</h2><ul><li>SMTÂ∞ÜSATÊé®ÂπøÂà∞Ê∂âÂèä ÂÆûÊï∞ „ÄÅ Êï¥Êï∞ Âíå&#x2F;ÊàñÂêÑÁßç Êï∞ÊçÆÁªìÊûÑ ÔºàÂ¶Ç ÂàóË°® „ÄÅ Êï∞ÁªÑ „ÄÅ ‰ΩçÂêëÈáè Âíå Â≠óÁ¨¶‰∏≤</li><li>Áî±‰∫éÂ∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÂ∑≤ÁªèÊòØ NP ÂÆåÂÖ®ÁöÑÔºåÊâÄ‰ª• SMT ÈóÆÈ¢òÈÄöÂ∏∏ÊòØ NPÂõ∞ÈöæÁöÑ ÔºåÂπ∂‰∏îÂØπ‰∫éËÆ∏Â§öÁêÜËÆ∫Êù•ËØ¥ÂÆÉÊòØ ‰∏çÂèØÂà§ÂÆö(nondeterministic)</li></ul><center><img loading="lazy" src="/posts/39d160ca/1.png" width="550"></center><p>SMTÊòØÊåáÂè¶Â§ñ‰∏ÄÁ±ªÂÖ¨ÂºèÁöÑÂèØÊª°Ë∂≥ÊÄßÂà§ÂÆöÈóÆÈ¢ò„ÄÇËøô‰∏ÄÁ±ªÂÖ¨ÂºèÂÖ∑Êúâ‰∏§‰∏™ÁâπÁÇπÔºö</p><ul><li>Âú®ÂëΩÈ¢òÈÄªËæëÂÖ¨ÂºèÈáåÈù¢Ê∑∑ÂÖ•‰∫Ü‰∏Ä‰∫õ‰∏ÄÈò∂ÈÄªËæëË°®ËææÂºè</li><li>ÂÖ∑Êúâ‰ªªÊÑèÁöÑÂ∏ÉÂ∞îÁªìÊûÑ</li></ul><blockquote><p>SAT solvers are automatic and efficient</p><p>However, systems are usually designed and modeled at a higher level than the Boolean level and the translation to Boolean logic can be expensive. <strong>A primary goal of research in Satisfiability Modulo Theories (SMT) is to create verification engines that can reason natively at a higher level of abstraction, while still retaining the speed and automation of today‚Äôs Boolean engines</strong></p></blockquote><center><img loading="lazy" src="/posts/39d160ca/22.png" width="550"></center><hr><ul><li><strong>SMT Solver &#x3D; SAT Solver + Theory Solver</strong></li></ul><h2 id="Solver-vs-Checker">2. Solver vs Checker</h2><ul><li>In model checking, you have a model and a specification (or property), and you check if the model meets the specification.</li><li>In SAT solving, you have a formula and you try to find a satisfying assignment to it.</li></ul><hr><ul><li>To perform model checking a reachability analysis is needed and to do this the program transitions are often executed symbolically</li><li>The solution to the resulting satisfaction problem is created by a solver</li></ul><h2 id="overflow-Ê∫¢Âá∫">3. overflow Ê∫¢Âá∫</h2><h3 id="arithmetic-overflow-ÁÆóÊúØÊ∫¢Âá∫">3.1. arithmetic overflow ÁÆóÊúØÊ∫¢Âá∫</h3><ul><li>ÂΩìËÆ°ÁÆó‰∫ßÁîüÂá∫Êù•ÁöÑÁªìÊûúÊòØÈùûÂ∏∏Â§ßÁöÑÔºåÂ§ß‰∫éÂØÑÂ≠òÂô®ÊàñÂ≠òÂÇ®Âô®ÊâÄËÉΩÂ≠òÂÇ®ÊàñË°®Á§∫ÁöÑËÉΩÂäõÈôêÂà∂</li><li>‰ªª‰ΩïÊï∞Èô§‰ª•Èõ∂ÁöÑËÆ°ÁÆóÔºàDivided by zeroÔºâ‚Äú‰∏çÊòØ‚ÄùÁÆóÊúØÊ∫¢Âá∫ÁöÑ‰∏ÄÁßç„ÄÇÂú®Êï∞Â≠¶‰∏äÂè™ËÉΩÊòéÊòæÁÆóÊòØ‰∏çÊòéÁ°ÆÁöÑÂÆö‰πâÔºàUndefinedÔºâÔºõÂÆÉËÆ°ÁÆóÂá∫Êù•ÁöÑÁªìÊûúÂè™ËÉΩÂΩìÊàêÊòØ‚ÄúÊ≤°Êúâ‚ÄùÂÄºÔºåËÄå‰∏çÊòØÈùûÂ∏∏Â§ßÁöÑÊó†ÈôêÊï∞ÂÄº</li></ul><h3 id="arithmetic-underflowÁÆóÊúØ‰∏ãÊ∫¢">3.2. arithmetic underflowÁÆóÊúØ‰∏ãÊ∫¢</h3><ul><li>ÁÆóÊúØ‰∏ãÊ∫¢‰πüÁß∞‰∏∫ÊµÆÁÇπÊï∞‰∏ãÊ∫¢ÔºåÊòØÊåáËÆ°ÁÆóÊú∫ÊµÆÁÇπÊï∞ËÆ°ÁÆóÁöÑÁªìÊûúÂ∞è‰∫éÂèØ‰ª•Ë°®Á§∫ÁöÑÊúÄÂ∞èÊï∞</li><li>‰æãÂ¶ÇÔºåÊµÆÁÇπÊï∞ÊåáÊï∞ËåÉÂõ¥‰∏∫-128Ëá≥127Ôºå‰∏Ä‰∏™ÁªùÂØπÂÄºÂ∞è‰∫é2‚àí127ÁöÑÊµÆÁÇπÊï∞Â∞±‰ºöÈÄ†Êàê‰∏ãÊ∫¢ÔºàÂÅáËÆæ-128ÁöÑÈò∂Á†ÅÁî®‰∫éË°®Á§∫Ë¥üÊó†Á©∑Ôºâ</li></ul><h2 id="Theory-ÁêÜËÆ∫">4. Theory ÁêÜËÆ∫</h2><ul><li>A theory T is a consistent‰∏ÄËá¥ÁöÑ set of first-order formulas<ul><li><strong>Equality</strong> (also called theory of uninterpreted functions UF</li><li><strong>Linear arithmetic</strong></li><li><strong>Arrays</strong></li><li>‚Ä¶</li></ul></li></ul><h3 id="‰∏ÄËá¥ÊÄßÔºàconsistency">4.1. ‰∏ÄËá¥ÊÄßÔºàconsistency)</h3><ul><li>Êåá‰∏Ä‰∏™ÂΩ¢ÂºèÁ≥ªÁªü‰∏≠‰∏çËï¥Ê∂µÁüõÁõæ<ul><li>ËØ≠‰πâ‰∏äÔºöÂΩì‰∏Ä‰∏™ÂëΩÈ¢òSÊòØÁî±ËÆ∏Â§öÂëΩÈ¢òÁªÑÊàêÊó∂ÔºåÂ¶ÇÊûúÊâÄÊúâÂëΩÈ¢òÂèØÂêåÊó∂‰∏∫ÁúüÔºåÂàôSÊòØ‰∏ÄËá¥ÁöÑÔºåÂê¶ÂàôSÊòØ‰∏ç‰∏ÄËá¥ÁöÑ</li><li>ËØ≠Ê≥ï‰∏äÔºöÂÖ¨ÁêÜÁ≥ªÁªü‰∏çËÉΩÊé®ÂØºÂá∫‰∏§‰∏™Áõ∏ÂèçÁöÑÁªìÊûú„ÄÇ‰∫¶Âç≥‰∏çÂ≠òÂú®ÂëΩÈ¢òPÔºå‰ΩøÂæóP‚ÜíQÂíåP‚Üí~QÂêåÊó∂ÊàêÁ´ã</li></ul></li></ul><h3 id="Validity-modulo-theories-ÊúâÊïàÊÄßÊ®°ÂºèÁêÜËÆ∫">4.2. Validity modulo theories ÊúâÊïàÊÄßÊ®°ÂºèÁêÜËÆ∫</h3><ul><li>$T_1‚à™T_2‚à™‚Ä¶‚à™T_n \models{} ‚àÄ\bar{x}F(\bar{x})$</li><li>here each $T_i$ is a first-order theory and $F(\bar{x})$ is a quantifier-free formule</li></ul><center><img loading="lazy" src="/posts/39d160ca/3.png" width="550"></center><ul><li>$\simeq{}$ Â§ßÊ¶ÇÊòØÊåálogical equivalence<ul><li>ÈùûÂèçÂ∏∏ËØÜÁöÑÔºåÂèØ‰ª•Áî®Â∏∏ËØÜÊù•ÁêÜËß£</li></ul></li></ul><h3 id="Satisfiability-Modulo-Theories-ÂèØÊª°Ë∂≥ÊÄßÊ®°ÂºèÁêÜËÆ∫">4.3. Satisfiability Modulo Theories ÂèØÊª°Ë∂≥ÊÄßÊ®°ÂºèÁêÜËÆ∫</h3><ul><li>From Validity Modulo Theories to Satisfiability Modulo Theories:</li></ul><center><img loading="lazy" src="/posts/39d160ca/4.png" width="550"></center><h3 id="SMT-solvers">4.4. SMT solvers</h3><center><img loading="lazy" src="/posts/39d160ca/5.png" width="550"></center><h2 id="Theory-of-equality-QF-UF-and-UF">5. Theory of equality (QF_UF and UF)</h2><ul><li>QFÊòØÊåá<code>quantifier-free</code></li></ul><center><img loading="lazy" src="/posts/39d160ca/6.png" width="550"></center><ul><li>Function congruence: ÂáΩÊï∞ÂêåÊûÑ<ul><li><em>Â∑Æ‰∏çÂ§öÁõ∏ÂΩì‰∫éÂèåÂ∞ÑÔºü</em></li></ul></li></ul><center><img loading="lazy" src="/posts/39d160ca/7.png" width="550"></center><p><strong>issue</strong></p><ul><li>Equality axioms are very prolificÂ§ö‰∫ßÁöÑ, resolution will quickly generate many irrelevant clauses.</li><li>Resolving with symmetry axiom we can produce all permutations of left and right sides of all equations. Transitivity axiom can resolve with symmetry axioms and itself producing longer clauses.</li></ul><h3 id="Inference-rules">5.1. Inference rules</h3><center><img loading="lazy" src="/posts/39d160ca/8.png" width="550"></center><ul><li>Paramodulation: Ë∞ÉËäÇ</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/9.png" width="550"></center><ul><li>Idea: Only replace ‚Äúbigger‚Äù terms by ‚Äúsmaller‚Äù terms</li><li>Ê≥®ÊÑèÁ¨¨‰∏ÉÊ≠•‰∏çÊòØ $f(b)&#x3D;f(b)$ Ôºå‰∏çË¶ÅÈ©¨Ëôé</li></ul><h3 id="Uninterpreted-function">5.2. Uninterpreted function</h3><ul><li>In mathematical logic, an uninterpreted function or function symbol is one that has no other property than its name and n-ary form. Function symbols are used, together with constants and variables, to form terms.<ul><li>Áõ∏ÂΩì‰∫éÂçïÁ∫Ø0-aryÁ¨¶Âè∑$f$</li></ul></li><li>The theory of uninterpreted functions is also sometimes called the free theory, because it is freely generated, and thus a free object<ul><li>‰∏çË¢´ÈáèËØçÁ∫¶ÊùüÁöÑ</li></ul></li></ul><center><img loading="lazy" src="/posts/39d160ca/10.png" width="550"></center><h2 id="Theory-of-Arrays">6. Theory of Arrays</h2><ul><li>Array signature $Œ£array &#x3D;&lt; { select&#x2F;2, store&#x2F;3 } , { \simeq{}} &gt;$</li></ul><h3 id="AxiomsÂÖ¨ÁêÜ">6.1. AxiomsÂÖ¨ÁêÜ</h3><ul><li>$‚àÄA, I , E [select(store(A, I , E ), I ) \simeq{} E ]$<ul><li>if we store an element in an array and read from the same position then we should obtain the same element</li><li>Ê≥®ÊÑèstoreÁöÑËøîÂõûÂÄºÊòØ‰∏Ä‰∏™Êñ∞ÁöÑArray</li></ul></li><li>$‚àÄA, I , J, E [I \not\simeq{} J ‚Üí select(store(A, I , E ), J) \simeq{} select(A, J)]$<ul><li>if we store an element at position i then at all other positions elements are unchanged</li></ul></li></ul><h2 id="Theory-of-Linear-Arithmetic-ÔºàQF-LRAÔºâ">7. Theory of Linear Arithmetic ÔºàQF_LRAÔºâ</h2><h3 id="linear-constraints-Á∫øÊÄßÁ∫¶Êùü">7.1. linear constraints Á∫øÊÄßÁ∫¶Êùü</h3><center><img loading="lazy" src="/posts/39d160ca/11.png" width="550"></center><hr><center><img loading="lazy" src="/posts/39d160ca/12.png" width="550"></center><center><img loading="lazy" src="/posts/39d160ca/15.png" width="550"></center><h3 id="Inference-rules-1">7.2. Inference rules</h3><center><img loading="lazy" src="/posts/39d160ca/14.png" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/16.png" width="550"></center><h2 id="SMT-solver">8. SMT solver</h2><center><img loading="lazy" src="/posts/39d160ca/13.png" width="550"></center><ul><li>‰πüÂ∞±ÊòØËã•theory solverÊúÄÁªàÁªìÊûú‰∏çÊòØ $\bot$ ,ÈÇ£‰πàÂ∞±ÊòØmodel‰∏≠ÁöÑ‰∏Ä‰∏™ÂÄºÔºåÂç≥‰∏∫sat</li></ul><h3 id="Abstract-DPLL">8.1. Abstract DPLL</h3><center><img loading="lazy" src="/posts/39d160ca/17.jpg" width="550"></center><center><img loading="lazy" src="/posts/39d160ca/18.jpg" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/19.jpg" width="550"></center><ul><li>ÂèØ‰ª•ÁúãÂà∞theory unsatÁöÑÂéüÂõ†ÊòØ1Ôºå2ÊâÄ‰ª•ÂèØ‰ª•Áõ¥Êé•ÂõûÈÄÄ</li><li>Ê≥®ÊÑèÊúÄÂêé‰∏ÄÊ≠•‰∏çÊòØdecideÊâÄ‰ª•Ê≤°Êúâback jump</li></ul><h3 id="minimal-steps">8.2. minimal steps</h3><center><img loading="lazy" src="/posts/39d160ca/21.png" width="550"></center><ul><li>ÁÆÄËÄåË®Ä‰πãÂ∞±ÊòØÂè™ËÄÉËôë‰∫ßÁîüÂΩ±ÂìçÁöÑÈÇ£Âá†Ê≠•ÔºåÂπ∂ÂÜô‰∏∫negationÂä†ÂõûProp</li></ul><center><img loading="lazy" src="/posts/39d160ca/20.jpg" width="550"></center><h2 id="ÂèÇËÄÉ">9. ÂèÇËÄÉ</h2><ul><li><a href="https://stackoverflow.com/questions/43908872/smt-sat-solver-vs-model-checker">SMT&#x2F;SAT Solver vs Model Checker - Stack Overflow</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SAT-vs-SMT-Â∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÈóÆÈ¢ò-vs-ÂèØÊª°Ë∂≥ÊÄßÊ®°ÁêÜËÆ∫&quot;&gt;1. SAT vs SMT Â∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÈóÆÈ¢ò vs  ÂèØÊª°Ë∂≥ÊÄßÊ®°ÁêÜËÆ∫&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SMTÂ∞ÜSATÊé®ÂπøÂà∞Ê∂âÂèä ÂÆûÊï∞ „ÄÅ Êï¥Êï∞ Âíå&amp;#x2F;ÊàñÂêÑÁßç Êï∞ÊçÆÁªìÊûÑ ÔºàÂ¶Ç ÂàóË°® „ÄÅ Êï∞ÁªÑ „ÄÅ ‰ΩçÂêëÈáè Âíå Â≠óÁ¨¶‰∏≤&lt;/li&gt;
&lt;li&gt;Áî±‰∫éÂ∏ÉÂ∞îÂèØÊª°Ë∂≥ÊÄßÂ∑≤ÁªèÊòØ NP ÂÆåÂÖ®ÁöÑÔºåÊâÄ‰ª• SMT ÈóÆÈ¢òÈÄöÂ∏∏ÊòØ NPÂõ∞ÈöæÁöÑ ÔºåÂπ∂‰∏îÂØπ‰∫éËÆ∏Â§öÁêÜËÆ∫Êù•ËØ¥ÂÆÉÊòØ ‰∏çÂèØÂà§ÂÆö(nondeterministic)&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/39d160ca/1.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;p&gt;SMTÊòØÊåáÂè¶Â§ñ‰∏ÄÁ±ªÂÖ¨ÂºèÁöÑÂèØÊª°Ë∂≥ÊÄßÂà§ÂÆöÈóÆÈ¢ò„ÄÇËøô‰∏ÄÁ±ªÂÖ¨ÂºèÂÖ∑Êúâ‰∏§‰∏™ÁâπÁÇπÔºö&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Âú®ÂëΩÈ¢òÈÄªËæëÂÖ¨ÂºèÈáåÈù¢Ê∑∑ÂÖ•‰∫Ü‰∏Ä‰∫õ‰∏ÄÈò∂ÈÄªËæëË°®ËææÂºè&lt;/li&gt;
&lt;li&gt;ÂÖ∑Êúâ‰ªªÊÑèÁöÑÂ∏ÉÂ∞îÁªìÊûÑ&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SAT solvers are automatic and efficient&lt;/p&gt;
&lt;p&gt;However, systems are usually designed and modeled at a higher level than the Boolean level and the translation to Boolean logic can be expensive. &lt;strong&gt;A primary goal of research in Satisfiability Modulo Theories (SMT) is to create verification engines that can reason natively at a higher level of abstraction, while still retaining the speed and automation of today‚Äôs Boolean engines&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/39d160ca/22.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SMT Solver &amp;#x3D; SAT Solver + Theory Solver&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Solver-vs-Checker&quot;&gt;2. Solver vs Checker&lt;/h2&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-‰∏ÄÈò∂ÈÄªËæë-ÂΩíÁªì</title>
    <link href="https://hejueyun.github.io/posts/e24b211f/"/>
    <id>https://hejueyun.github.io/posts/e24b211f/</id>
    <published>2022-03-06T21:08:15.000Z</published>
    <updated>2022-05-22T23:21:33.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="atom-vs-literal-vs-term">1. atom vs literal  vs term</h2><ul><li>a: $p$<ul><li>Âú®‰∏ÄÈò∂ÈÄªËæë‰∏ãÂæóÂà∞Êâ©Â±ï</li></ul></li><li>l: $p$  $\lnot{p}$  <ul><li>Ê≥®ÊÑèÊâ©Â±ïÂà∞ÂëΩÈ¢òÈÄªËæë‰∏≠Êó∂Ôºå$P$Â∞±ÂèØ‰ª•Â∏¶‰∏äÂáΩÊï∞ÂíåË∞ìËØç<blockquote><ul><li>In propositional calculus a literal is simply a propositional variable or its negation.</li><li>In predicate calculus a literal is an atomic formula or its negation, where an atomic formula is a predicate symbol applied to some terms, ${\displaystyle P(t_{1},\ldots ,t_{n})}$ with the terms recursively defined starting from constant symbols, variable symbols, and function symbols. For example,  ${\displaystyle \neg Q(f(g(x),y,2),x)}$ is a negative literal with the <strong>constant symbol</strong> 2, the <strong>variable symbols</strong> x, y, the <strong>function symbol</strong>s f, g, and the <strong>predicate symbol</strong> Q.</li></ul></blockquote></li></ul></li><li>t: $v$  $f^{n}$  $a$<ul><li>Ê≥®ÊÑètermÊòØÂèòÈáèËÄåÈùûÂ≠óÈù¢ÈáèÔºåÂ¶Çx+yÔºåËÄå‰∏çÊòØp+q</li></ul></li></ul><h2 id="Âêà‰∏Ä-Unification">2. Âêà‰∏Ä Unification</h2><ul><li>Let s and t be two terms (or atoms), A <strong>unifier</strong> of s and t is a substitition <strong>œÉ</strong> that makes the two identical, formally<ul><li>sœÉ &#x3D; tœÉ</li></ul></li></ul><center><img loading="lazy" src="/posts/e24b211f/1.png" width="550"></center><h3 id="ÊúÄ‰∏ÄËà¨ÁöÑÂêà‰∏Ä-Most-general-unifier">2.1. ÊúÄ‰∏ÄËà¨ÁöÑÂêà‰∏Ä Most general unifier</h3><p>œÉ is a most general unifier of s and t, denoted mgu(s, t),</p><ul><li>if œÉ is a unifier of s and t and for any other unifier Œ∏ of s and t,</li><li><strong>there is</strong> a substitution œÅ such that<ul><li>œÉœÅ &#x3D; Œ∏</li></ul></li></ul><h3 id="Unifiers-and-most-general-unifiers-in-general">2.2. Unifiers and most general unifiers, in general</h3><center><img loading="lazy" src="/posts/e24b211f/2.png" width="550"></center><ul><li>simultaneous&#x2F;Àåsa…™.m…ôlÀàte…™.ni.…ôs&#x2F; ÂêåÊó∂ÁöÑ</li></ul><h2 id="unification-algorithm-Âêà‰∏ÄÁÆóÊ≥ïÊ±ÇËß£mgu">3. unification algorithm Âêà‰∏ÄÁÆóÊ≥ïÊ±ÇËß£mgu</h2><ul><li>Input: An equational system E</li><li>Goal: Determine if E is unifiable, and <strong>if it is, to read off mgu</strong></li><li>Output: Equational system E‚Äô in <strong>solved form</strong>, or ‚ä• (for not unifiable)</li><li>Perform the following transformations on the set of equations <strong>as long as any one of them is applicable</strong>:<ul><li>Ê≥®ÊÑè‰∏ÄÂÆöË¶ÅÁî®Âà∞‰∏çËÉΩÁî®‰∏∫Ê≠¢Ôºå‰∏ÄËà¨ÁªìÊûú‰ºöÊòØÂ∑¶ÂºèÁî±Â∏¶ÊúâÂêå‰∏ÄÂèòÈáèÁöÑÂè≥ÂºèË°®ËææÔºå‰æãÂ¶ÇÔºö<ul><li>$x&#x3D;y$</li><li>$z&#x3D;f(y)$</li></ul></li></ul></li></ul><ol><li>Transform t&#x3D;x, where t is not a variable, to x&#x3D;t. ÂèòÈáèÊç¢Âà∞Â∑¶‰æßÔºåÈùûÂèòÈáèÊç¢Âà∞Âè≥Ëæπ</li><li>Erase the equation x&#x3D;x. Ê∂àÈô§Áõ∏Á≠âÂºè</li><li>Let t‚Ä≤&#x3D;t‚Ä≥ be an equation where t‚Ä≤, t‚Ä≥ are not variables. ‚ÄúÈùûÂèòÈáè&#x3D;ÈùûÂèòÈáè‚ÄùÁöÑÊÉÖÂÜµ<ol><li>If the outermost function symbols of t‚Ä≤ and t‚Ä≥ are not identical, terminate the algorithm and report not unifiable. Â¶ÇÊûút‚Ä≤Âíåt‚Ä≥ÁöÑÊúÄÂ§ñÂ±ÇÂáΩÊï∞Á¨¶Âè∑‰∏ç‰∏ÄËá¥ÔºåÂàôÁªàÊ≠¢ÁÆóÊ≥ïÔºåÂπ∂Êä•Âëä<strong>‰∏çÂèØÂêà‰∏Ä</strong></li><li>Otherwise, replace the equation $f(t_1^{‚Äò},‚Ä¶t_k^{‚Äò})&#x3D;f(t_1^{‚Äò‚Äô},‚Ä¶t_k^{‚Äò‚Äô})$ by the k equations $t_1^{‚Äò}&#x3D;t_1^{‚Äò‚Äô},‚Ä¶t_k^{‚Äò}&#x3D;t_k^{‚Äò‚Äô}$ . Âê¶ÂàôÊõøÊç¢</li></ol></li><li>Let x&#x3D;t be an equation such that x has another occurrence in the set. Âêå‰∏ÄÂèòÈáèÂ§öÊ¨°Âá∫Áé∞<ol><li>If x occurs in t and x differs from t, terminate the algorithm and report not unifiable</li><li>Otherwise, transform the set by replacing all occurrences of x in other equations by t. Âê¶ÂàôÔºåÈÄöËøáÂ∞ÜÂÖ∂‰ªñÊñπÁ®ã‰∏≠ÊâÄÊúâÂá∫Áé∞ÁöÑxÊõøÊç¢‰∏∫tÊù•ËΩ¨Êç¢Ëøô‰∏™ÈõÜÂêà</li><li>rule 4 also called the <strong>occurs-check</strong></li></ol></li></ol><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/3.png" width="650"></center><ul><li>ÂæóÂà∞mgu</li></ul><h3 id="‚áí-U-unification-rules">3.1. $‚áí_{U^-}$unification rules</h3><center><img loading="lazy" src="/posts/e24b211f/4.png" width="550"></center><ul><li>Orientation: ÊñπÂêë</li><li>Trivial: ÁêêÁ¢éÔºàÂèØÁêÜËß£‰∏∫Êó†‰ª∑ÂÄºÔºâ</li><li>Disagreement&#x2F;ClashÔºöÂàÜÊ≠ß&#x2F;ÂÜ≤Á™Å</li><li>DecompositionÔºöÂàÜËß£</li><li>Occur-checkÔºöÂá∫Áé∞Ê£ÄÊü•ÔºàÂèØÁêÜËß£‰∏∫Â≠òÂú®Ê£ÄÊü•Ôºâ</li><li>SubstitutionÔºöÊõøÊç¢</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/5.png" width="550"></center><ul><li>‰πüÂ∞±ÊòØÂèòÈáèÊç¢Êàêterm</li></ul><h3 id="term-equation">3.2. term equation</h3><ul><li>The unifiability of ${ p(f(x)),g(y),p(f(f(a))),g(z) }$ is expressed by the set of term equations<ul><li>${ f(x)&#x3D;f(f(a)), g(y)&#x3D;g(z) }$</li></ul></li></ul><h3 id="solved-form">3.3. solved form</h3><ul><li>A set of term equations is in solved form iff:<ul><li>All equations are of the form $x_i &#x3D;t_i$ where x i is a variable.</li><li>Each variable $x_i$ that appears on the left-hand side of an equation does not appear elsewhere in the set.</li></ul></li><li>A set of equations in solved form defines a substitution:<ul><li>${ x_1\leftarrow{t_1},‚Ä¶,x_n\leftarrow{t_n} }$</li></ul></li></ul><p>‰πüÂ∞±ÊòØËØ¥ÂøÖÈ°ªÊòØÁî®termÊù•Êõø‰ª£ÂèòÈáèÔºåËÄå‰∏çÊòØÂçïÁ∫ØÁöÑÁî®ÂÖ∂‰ªñÂèòÈáèÊù•rename</p><h2 id="Ordered-resolution-with-selection">4. Ordered resolution with selection</h2><h3 id="Selection-functions">4.1. Selection functions</h3><ul><li>A selection function is a mapping<ul><li>$S : C\rightarrowtail{}$ (multi-)set of occurrences of <strong>negative</strong> literals in C</li></ul></li></ul><center><img loading="lazy" src="/posts/e24b211f/7.png" width="550"></center><h3 id="Maximal-and-strictly-maximal-literals">4.2. Maximal and strictly maximal literals</h3><center><img loading="lazy" src="/posts/e24b211f/6.png" width="550"></center><ul><li>ÁâπÂà´Ê≥®ÊÑèÁ¨¨‰∏â‰∏™ÔºåË¶ÅÊ±ÇÁöÑÊòØthere existÂ∞±ÂèØÔºåÂõ†Ê≠§Á±ª‰ºº $P(f (x)) ‚à® P (g(y))$‰∏≠ÊâæÊúÄÂ§ßÔºåÂ∞±ÂæóÂàÜÊÉÖÂÜµËÆ®ËÆ∫<ul><li>ÊòØÂê¶ÂèØËÉΩÁõ∏Á≠âÔºü</li></ul></li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/8.png" width="550"></center><ul><li>A literal L is (strictly) maximal wrt. a general clause C<ul><li>iff ‚àÉ gr. œÉ s.t. LœÉ and $C_œÉ$ are ground and for all L‚Äô in $C_œÉ$: $L_œÉ\geq{L‚Äô}$ ($L_œÉ&gt;{L‚Äô}$)</li></ul></li></ul><h2 id="General-resolution-system">5. General resolution system</h2><p>Ordered resolution with selection is parameterisedÂèÇÊï∞Âåñ with:</p><ul><li>a fixed total, well-founded ordering $&gt;$ on ground atoms</li><li>a fixed selection function S</li></ul><h3 id="Resolution-rule">5.1. Resolution rule</h3><center><img loading="lazy" src="/posts/e24b211f/9.png" width="550"></center><ul><li>Note: <strong>Renaming variables apart</strong> needs to be applied to the premises before applying resolution</li></ul><h3 id="Factoring-rule">5.2. Factoring rule</h3><center><img loading="lazy" src="/posts/e24b211f/10.png" width="550"></center><ul><li>FactorsÂç≥‰∏∫: $C‚à®A$</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/11.png" width="550"></center><ul><li>Á¨¨ÂõõË°åÔºönot P &gt; not R</li></ul><center><img loading="lazy" src="/posts/e24b211f/16.png" width="550"></center><ul><li>Ê≥®ÊÑèÊ≠§Â§ÑÊòØÂü∫‰∫é‰ª•‰∏äÁöÑorderÔºåÂê¶ÂàôÊó†Ê≥ïËøõË°å</li><li>‰πüÂ∞±ÊòØÔºö<strong>‰∏Ä‰∏™CNFÊó¢ÂèØ‰ª•ÈÄöËøáherbrand theoremÊ±ÇËß£sat&#x2F;unsatÔºå‰πüÂèØ‰ª•general resolutionÊ±ÇËß£sat&#x2F;unsat</strong></li></ul><p><strong>Ê≥®ÊÑè</strong></p><center><img loading="lazy" src="/posts/e24b211f/17.png" width="550"></center><h3 id="for-propositional-x2F-ground-clauses-ÂõûÈÄÄÂà∞ÂëΩÈ¢òÈÄªËæë">5.3. for propositional&#x2F;ground clauses ÂõûÈÄÄÂà∞ÂëΩÈ¢òÈÄªËæë</h3><center><img loading="lazy" src="/posts/e24b211f/12.png" width="550"></center><h3 id="Search-spaces-become-smaller">5.4. Search spaces become smaller</h3><center><img loading="lazy" src="/posts/e24b211f/13.png" width="550"></center><h3 id="Properties-of-ordered-resolution-with-selection">5.5. Properties of ordered resolution with selection</h3><center><img loading="lazy" src="/posts/e24b211f/15.png" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/14.png" width="550"></center><h3 id="‰∏Ä‰∏™Áâπ‰æãÁöÑËÆ®ËÆ∫">5.6. ‰∏Ä‰∏™Áâπ‰æãÁöÑËÆ®ËÆ∫</h3><ul><li>È¶ñÂÖàÔºåmguÊòØ‰∏çËÉΩrenameÁöÑ</li><li>‰ΩÜÂú®resÂâçÔºåË¶Årename<ul><li>mguÊòØres‰∏≠ÁöÑ‰∏Ä‰∏™Ê≠•È™§ rename -&gt; res(mgu)</li></ul></li><li>ÊåâÂèØ‰ª•resÁöÑÊñπÂêëËøõË°åÔºö</li></ul><center><img loading="lazy" src="/posts/e24b211f/18.png" width="550"></center><blockquote><p>you need to work out if there is a ground substitution that makes one of the literals maximsl or strictly maximal</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;atom-vs-literal-vs-term&quot;&gt;1. atom vs literal  vs term&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;a: $p$&lt;ul&gt;
&lt;li&gt;Âú®‰∏ÄÈò∂ÈÄªËæë‰∏ãÂæóÂà∞Êâ©Â±ï&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;l: $p$  $\lnot{p}$  &lt;ul&gt;
&lt;li&gt;Ê≥®ÊÑèÊâ©Â±ïÂà∞ÂëΩÈ¢òÈÄªËæë‰∏≠Êó∂Ôºå$P$Â∞±ÂèØ‰ª•Â∏¶‰∏äÂáΩÊï∞ÂíåË∞ìËØç&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In propositional calculus a literal is simply a propositional variable or its negation.&lt;/li&gt;
&lt;li&gt;In predicate calculus a literal is an atomic formula or its negation, where an atomic formula is a predicate symbol applied to some terms, ${\displaystyle P(t_{1},\ldots ,t_{n})}$ with the terms recursively defined starting from constant symbols, variable symbols, and function symbols. For example,  ${\displaystyle \neg Q(f(g(x),y,2),x)}$ is a negative literal with the &lt;strong&gt;constant symbol&lt;/strong&gt; 2, the &lt;strong&gt;variable symbols&lt;/strong&gt; x, y, the &lt;strong&gt;function symbol&lt;/strong&gt;s f, g, and the &lt;strong&gt;predicate symbol&lt;/strong&gt; Q.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;t: $v$  $f^{n}$  $a$&lt;ul&gt;
&lt;li&gt;Ê≥®ÊÑètermÊòØÂèòÈáèËÄåÈùûÂ≠óÈù¢ÈáèÔºåÂ¶Çx+yÔºåËÄå‰∏çÊòØp+q&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Âêà‰∏Ä-Unification&quot;&gt;2. Âêà‰∏Ä Unification&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Let s and t be two terms (or atoms), A &lt;strong&gt;unifier&lt;/strong&gt; of s and t is a substitition &lt;strong&gt;œÉ&lt;/strong&gt; that makes the two identical, formally&lt;ul&gt;
&lt;li&gt;sœÉ &amp;#x3D; tœÉ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/e24b211f/1.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;ÊúÄ‰∏ÄËà¨ÁöÑÂêà‰∏Ä-Most-general-unifier&quot;&gt;2.1. ÊúÄ‰∏ÄËà¨ÁöÑÂêà‰∏Ä Most general unifier&lt;/h3&gt;&lt;p&gt;œÉ is a most general unifier of s and t, denoted mgu(s, t),&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if œÉ is a unifier of s and t and for any other unifier Œ∏ of s and t,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;there is&lt;/strong&gt; a substitution œÅ such that&lt;ul&gt;
&lt;li&gt;œÉœÅ &amp;#x3D; Œ∏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Unifiers-and-most-general-unifiers-in-general&quot;&gt;2.2. Unifiers and most general unifiers, in general&lt;/h3&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/e24b211f/2.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-Á®ãÂ∫èÈ™åËØÅ-ÂçèËÆÆÂÆâÂÖ®ÂàÜÊûê</title>
    <link href="https://hejueyun.github.io/posts/fa02fe64/"/>
    <id>https://hejueyun.github.io/posts/fa02fe64/</id>
    <published>2022-03-03T12:53:42.000Z</published>
    <updated>2022-03-20T19:29:40.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Neuman-Stubblebine-key-exchange-protocol">1. The Neuman-Stubblebine key exchange protocol</h2><center><img loading="lazy" src="/posts/fa02fe64/1.png" width="550"></center><center><img loading="lazy" src="/posts/fa02fe64/2.png" width="550"></center><h3 id="breaking">1.1. breaking</h3><center><img loading="lazy" src="/posts/fa02fe64/5.png" width="550"></center><ul><li>The intruder now sends a message to B, and the message will make B believe it‚Äôs actually from A. Thus B will start to use the wrong key, i.e. an insecure key. <ul><li>ÂÖ•‰æµËÄÖÁé∞Âú®ÂêëBÂèëÈÄÅ‰∏Ä‰∏™‰ø°ÊÅØÔºåËøô‰∏™‰ø°ÊÅØÂ∞Ü‰ΩøBÁõ∏‰ø°ÂÆÉÂÆûÈôÖ‰∏äÊù•Ëá™AÔºåÂõ†Ê≠§BÂ∞ÜÂºÄÂßã‰ΩøÁî®ÈîôËØØÁöÑÂØÜÈí•ÔºåÂç≥‰∏Ä‰∏™‰∏çÂÆâÂÖ®ÁöÑÂØÜÈí•„ÄÇ</li></ul></li></ul><h2 id="Verification-of-security-protocols-using-resolution">2. Verification of security protocols using resolution</h2><ul><li>The idea is that the security property says an unsafe state is possible</li><li>Since first-order logic is not <strong>decidable</strong>, there is however no guarantee that the saturation will terminate when the security property does not hold. Non-termination can therefore indicate the existence of a potential attack on the protocol.</li></ul><center><img loading="lazy" src="/posts/fa02fe64/3.png" width="550"></center><h2 id="Assumptions-in-security-protocol-analysis">3. Assumptions in security protocol analysis</h2><p>What can an intruder do?</p><ul><li>The intruder can capture all messages sent by one participant to another</li><li>It can send a message it has constructed to any other participant</li><li>It can generate new keys, new nonces, timestamps . . .</li><li>It can construct new messages from the ones it has, using legal constructors</li><li>The intruder can decomposeÂàÜËß£ tuples from which messages are formed</li><li>It can decrypt encrypted parts, but only if it knows the key I.e. we assume perfect cryptography: an intruder cannot break any keys nor does it know any of the initial keys $K_{at}$ at or $K_{bt}$</li></ul><h2 id="Encoding">4. Encoding</h2><center><img loading="lazy" src="/posts/fa02fe64/4.png" width="550"></center><h3 id="The-capabilities-of-the-intruderÂÖ•‰æµËÄÖ">4.1. The capabilities of the intruderÂÖ•‰æµËÄÖ</h3><center><img loading="lazy" src="/posts/fa02fe64/6.png" width="550"></center><center><img loading="lazy" src="/posts/fa02fe64/7.png" width="550"></center><h2 id="SPASS">5. SPASS</h2><blockquote><p>SPASS is an automated theorem prover for first-order logic with equality. So the input for the prover is a first-order formula in our syntax. </p><ul><li>Running SPASS on such a formula results in the final output SPASS beiseite: <code>Proof found.</code> if the formula is valid, </li><li>SPASS beiseite: <code>Completion found.</code> if the formula is not valid </li><li>and because validity in first-order logic is undecidable, <strong>SPASS may run forever without producing any final result.</strong></li></ul></blockquote><hr><blockquote><p>An SPASS input file consists of three parts, a description part started with list_of_descriptions., a part where the signature is declared starting with list_of_symbols., a part where all axioms are given, starting with list_of_formulae(axioms). and a final part where all conjectures are presented, starting with list_of_formulae(conjectures)</p><p>Then SPASS tries to prove that the conjunction of all axiom formulae implies the disjunction of all conjectures</p></blockquote><h2 id="Saturation">6. Saturation</h2><blockquote><p>Aclause C is a <strong>condensation</strong> of a clause D,if C is a proper (unordered) factor of D that subsumes D</p><p>A set of clauses N is called <strong>saturated</strong> if it is closed under condensation, the deletion of subsumed clauses and any clause generated by an ordered resolution inference from clauses from N is subsumed by some clause in N</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;The-Neuman-Stubblebine-key-exchange-protocol&quot;&gt;1. The Neuman-Stubblebine key exchange protocol&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/fa02fe64/1.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/fa02fe64/2.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;h3 id=&quot;breaking&quot;&gt;1.1. breaking&lt;/h3&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/fa02fe64/5.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;The intruder now sends a message to B, and the message will make B believe it‚Äôs actually from A. Thus B will start to use the wrong key, i.e. an insecure key. &lt;ul&gt;
&lt;li&gt;ÂÖ•‰æµËÄÖÁé∞Âú®ÂêëBÂèëÈÄÅ‰∏Ä‰∏™‰ø°ÊÅØÔºåËøô‰∏™‰ø°ÊÅØÂ∞Ü‰ΩøBÁõ∏‰ø°ÂÆÉÂÆûÈôÖ‰∏äÊù•Ëá™AÔºåÂõ†Ê≠§BÂ∞ÜÂºÄÂßã‰ΩøÁî®ÈîôËØØÁöÑÂØÜÈí•ÔºåÂç≥‰∏Ä‰∏™‰∏çÂÆâÂÖ®ÁöÑÂØÜÈí•„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Verification-of-security-protocols-using-resolution&quot;&gt;2. Verification of security protocols using resolution&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The idea is that the security property says an unsafe state is possible&lt;/li&gt;
&lt;li&gt;Since first-order logic is not &lt;strong&gt;decidable&lt;/strong&gt;, there is however no guarantee that the saturation will terminate when the security property does not hold. Non-termination can therefore indicate the existence of a potential attack on the protocol.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/fa02fe64/3.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;Assumptions-in-security-protocol-analysis&quot;&gt;3. Assumptions in security protocol analysis&lt;/h2&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>Ë•øË°åÊº´ËÆ∞-ÂÖ∂ÂÖ≠</title>
    <link href="https://hejueyun.github.io/posts/2ba8f82c/"/>
    <id>https://hejueyun.github.io/posts/2ba8f82c/</id>
    <published>2022-02-26T22:26:20.000Z</published>
    <updated>2022-03-27T12:26:12.528Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="a3bc817c3908ae67f704dabface47ef124dac94f6605c34ea7c8fd49515ab6c8">63a8672ddbb5b9158eb55097173249fad22b496a8876cf71b079381ad234cb95f094e21606daf1717aa32ac9bb46c3ec99a387f812d0a9e5a45bfd529c7b8ed5f86a0a6f45900b64a15b4130bd6ed52d8ef450f58e114d4fe18874ddcc125aa94adc7a4a8723b962b279a3d4fb7200835168fbe214ea68576e259f43343e2c7a777ab0f877cfb6fb4968bbe09478ebb4c8d82d533ea85f08a5195375f39c020dcf3cc513e539010453d4dc45f2948ba6de705108a00df9f7fc634cf34cf86bc985f7ae3ca2e1587e4469e2a695bfe5527047967d1184b513411930c48dbd3b183dbfe7eee873eff520957b049943bd7990c9027c77c010cf1c251f76064497d73aea9ab2a92c884d7e6a130b44100c9333493c6642eb39253827e8e7ee7be21ffa64373cba57238a83b953034350313408910b4f2679f2f08874a410bd240537e5df887e00d303bf15e0484321af3906101f651a5df62e1da0c56825bc53493bbacbdf596d137e27fd97b6c628bac1d18116316522c0f356832bdd769f420308aa8da425e501748296d0620ffcd2d204a6dc5558914c11fd7a1524e4a74f9b204bbd20c161cc1478f443c050f4ba0a2a920b98de1a54ffce1c44fc2f468058f0bb1e886e03126f45b33810e77bf6f346451c74bd304ed8bab57935484589bc2b1a746cb687de37762f1e3b10d6cfd7444ea4341b5bbaa363926e42f063f44b8f46d6605499ae1f341a8c790ae5bd18455a40510f81640659cedde4b9a1fc6db20b8923908bfcf4ae5c13fc518f33bc48541a2a7d3d6fa89d14d5b18660c04253e8df7a62ce6fc0f4ad77bacf3ed63e1debcc332519106136f1b2641e6b830db62a33b2814ade061b05c363610e54b4c33600d8f2a0b2cf0b5403307e91398cbbbb0ce1f3b35c40cf626f9a795e2c058a9888a016c8c300275a53050c70428dc6d716a592ca1dce1d3197c52f6b275d568a2743e0a76310126832d79fdcfc43732d3899a62320175ad5adfe51baf995eab391023ce63c80e7455f778279bae1b6cfa16a1f3fd6064e80b6edb960c9308f82803b28c9816effd3c9f18b7513a3462ff3283e482b374f639c4d371942db68469fbb882df4fba4cb46057f569b75b81dd528d80365daf13cf487e52bc0d872243dbcfa67e2662311be95169f4e3457537866e44a36183036a169aacb02f0364d0d8cd0e140707d5209b2a1af7333465fb987f7b541f65c6cc0fbd606bfe4f0c894625694563e1066468c3eb3621726bd64d23457ecfd39f2a80d573eaaf792330c5f431e88122d3cfa94437d24ab67b6275def89af510353f2a7489517b3c411db28635f7153403306aad70c5e9df7334a7fd589a6a3f75a51a7d6b6f787483545bfa8792edc7b2e4dcfc0fe43266617f408469c97bec089db0698d88bb025bfbd78f55264612f849e271cccf941010f831a58402c52173aa717e8b37950c2a3b460296672b585a2ae788b6f3b7c8090b5607688c4cafd8127c8e4ee6cd27a674759cae2d3491fa85850f8b7a2a6e4bcafe4b7130eb79a9520098f2fb0b47a58bc5befda2d0dff0985f0a5cc7b772d813bba5ef07576a87164e367fc73f2a0bf6835de598f88ecd078a36b94b34b8a357e603cded2557ec4f70929061db31af874a1464d0e0dd987fc578a673d0a337ae4e741be8864ab69bbc3bdebd6cc40f6ca541d2da832b73a9e0a784ec4a2a9881589cf5f1eca7ced187f2d61810e0605850bb28a2e0ddfd6d5fda5f6daf84446297a9ed808180db8985a74dc9bda783c8404a40816f5aa2e46472bfb0910fcbbf951ef6c00918ad218dd9ab2987f761d0925d0ef773c46fe4b7a161cedfc9b45c3ffdeb1de189b73be8fb6b988d56f7a0995999f0142f5cff66e3f48f8ff9aa4fa5d55cae1b3b28982f24b60eb6b2a013d1dbfe24a8ae7d060303846c826d30750266845c421f1cfb6284aaacfb809aa1f8cb2569943fa79b0a62156ce334515f7c49b2b3d7e15e7119bb61de88efddfcdddef82aa1c03a6a406a5558f5a19366ac18a0592f71ca072505313fb73a1170cdf6a366ab5af2c52234c20f20d5aa161384bc13a4181564db10d98fe6cd0df70f7d0b656d4cf22a4452ac33ed23ab0850e97ec391945ea2d35aa57102d3f7c9a52caa07c69252cc294b2917a61a22745bba81d0ab2cf3ab8fe96f5f8b88743444dea132dbb071087860a659b2f898c983e26249acf4e28b490b33a068809d43ee74895d7151833327cf9292c66c06fc66cc9e95586aba56fae820ff58101e2f3e7ccd5822b040cfc1c056b6ef68f8969d3c99f5a30d315b6a034bc88297af5601d1871e16caf265742b3c6a642b19e9f6f6794db94031bf90772091158922f53eec44078767c2b91d0a3209f32579c1a614ee5ecd41649d5e2914539a1b5099d13ea62045953d898e3c3299aa755f8a7d7f66d786f96a0678ba89744e1c1dd8eaed3853524794b50e94d5e42ec7d0c081151729648645308b00e9c95cc05ec5d649abf41b0a3ee729dc47aaffba089a3a7e228db9872879a8ce2750c66da4ab6c4e7062ab5ba7d323a2a07152a76f579c7cde3de94b9ac3a40049a6657917455fb6aeb02b75a7624e0f9bd302f852f98cc5949dbc91698a64c9cc57ad6a9c381ed372f0c3a390c9fe743e3855f7ee27289155bad0ef53c288fee088346517abc31e122e4897ff8fa5ce878ef35d93a1ba0e1a4ce39959c887525c1c1b8067f157686a8f7ac89d55078ec7230c4f62dfe01f6ae148cf3c62e428bc058a2121b8ea479aee258882493a4d5a91b633c6ec15f907ca53b06a3f0d0e05ec37e3a1db600461ce81b5b93ed5f894aa7f2feb1ed509912cdb3efd473444055d0fb07e0b456c6e1ad1bd4abd6ac38b2d01087f8baeffcb7594332834ea8295fa7d4668f0abb95f0242cfcd5953fd3b11b643a4e25b9c5ec13387e99faf24235dfdb215433217508d107c4393a84ca6bc4bd49bb562b77298220918e52e2d88f2a3c5177795aae347a4177f6d4937cacbd5e5c4ecbcc7081181b4bd65e862d818047d7e16712db3b8ec117d6230e832c8c9f590223188ca37d7f49620c3cf0fd771bb277bb4d1ccbbaa4c604248234fcbe3ed2a3cfb01c6ff72184ebaca088ccdb479e3bc41f475386277fbef50af51554d77d319aee4583a3a914df0fcf1461522c583cc55feac3e639133f196a8dc98a2c3d0fb746fe35ff6c87415712b49f144b33dc595c82daef511a693bf77f20537d7856befc651a7fb168cd3712c1bd8fe7018d8bdb296acfbdbac10427ab9b04b9aff10661fb759f66015099dab02de9ea25d9e6899a4ee5f2521f7e2093571ee1228005f4ca42af51d8cac3d507aecc9683a7105e89f467c7d451255b92fc2fe5822b3c3b31ec1d8caa8efdcd124545938a1751f30e3f7307f946ddf0d57c2cc8b4506663fd1f4b86beb3d82364c1ad1c63f22610b425d698806564308e162117445c0cf4f5fdc901ec86268162e776d60b7625189fdbdf9dc92e5655c8ccf2a7370d6bdbf69292964890d64be44c88f7b630e96bbfcd852eb083fd79ca55c7f12a4d378a54b9bfb074d3e916112d5a58cf8d749b5cd74d4007f1aaf349dfe63a400b06a507852c241b1aa296162365e0ad043a47209ae80845e6e4fced64b7f52dd8a9163d896f4bf443d5b199766366013d062a794181fde28ac9331795bc2cc77a5e0b52de3c3c00c099e9d3cb373ef771c69c20aed9255385280c3e42eec53920469ab690c8c6d49158146388b401b3186fd462ac2abd820b57e5e9325d859030d70616b14d2bb991ba7b20883a93425828fc70ae6f8171160be59150b2491816f49d6e832bb6c66f5f513ddbfb0d59f6a045dc88288ca21bba554a7a134fa3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;a3bc817c3908ae67f704dabface47ef124dac94f6605c34ea7c8fd49515ab6c8&quot;&gt;63a8672ddbb5b9158eb55097173249fad22b496a8876cf71b079381ad234cb95f094e21606daf1717aa32ac9bb46c3ec99a387f812d0a9e5a45bfd529c7b8ed5f86a0a6f45900b64a15b4130bd6ed52d8ef450f58e114d4fe18874ddcc125aa94adc7a4a8723b962b279a3d4fb7200835168fbe214ea68576e259f43343e2c7a777ab0f877cfb6fb4968bbe09478ebb4c8d82d533ea85f08a5195375f39c020dcf3cc513e539010453d4dc45f2948ba6de705108a00df9f7fc634cf34cf86bc985f7ae3ca2e1587e4469e2a695bfe5527047967d1184b513411930c48dbd3b183dbfe7eee873eff520957b049943bd7990c9027c77c010cf1c251f76064497d73aea9ab2a92c884d7e6a130b44100c9333493c6642eb39253827e8e7ee7be21ffa64373cba57238a83b953034350313408910b4f2679f2f08874a410bd240537e5df887e00d303bf15e0484321af3906101f651a5df62e1da0c56825bc53493bbacbdf596d137e27fd97b6c628bac1d18116316522c0f356832bdd769f420308aa8da425e501748296d0620ffcd2d204a6dc5558914c11fd7a1524e4a74f9b204bbd20c161cc1478f443c050f4ba0a2a920b98de1a54ffce1c44fc2f468058f0bb1e886e03126f45b33810e77bf6f346451c74bd304ed8bab57935484589bc2b1a746cb687de37762f1e3b10d6cfd7444ea4341b5bbaa363926e42f063f44b8f46d6605499ae1f341a8c790ae5bd18455a40510f81640659cedde4b9a1fc6db20b8923908bfcf4ae5c13fc518f33bc48541a2a7d3d6fa89d14d5b18660c04253e8df7a62ce6fc0f4ad77bacf3ed63e1debcc332519106136f1b2641e6b830db62a33b2814ade061b05c363610e54b4c33600d8f2a0b2cf0b5403307e91398cbbbb0ce1f3b35c40cf626f9a795e2c058a9888a016c8c300275a53050c70428dc6d716a592ca1dce1d3197c52f6b275d568a2743e0a76310126832d79fdcfc43732d3899a62320175ad5adfe51baf995eab391023ce63c80e7455f778279bae1b6cfa16a1f3fd6064e80b6edb960c9308f82803b28c9816effd3c9f18b7513a3462ff3283e482b374f639c4d371942db68469fbb882df4fba4cb46057f569b75b81dd528d80365daf13cf487e52bc0d872243dbcfa67e2662311be95169f4e3457537866e44a36183036a169aacb02f0364d0d8cd0e140707d5209b2a1af7333465fb987f7b541f65c6cc0fbd606bfe4f0c894625694563e1066468c3eb3621726bd64d23457ecfd39f2a80d573eaaf792330c5f431e88122d3cfa94437d24ab67b6275def89af510353f2a7489517b3c411db28635f7153403306aad70c5e9df7334a7fd589a6a3f75a51a7d6b6f787483545bfa8792edc7b2e4dcfc0fe43266617f408469c97bec089db0698d88bb025bfbd78f55264612f849e271cccf941010f831a58402c52173aa717e8b37950c2a3b460296672b585a2ae788b6f3b7c8090b5607688c4cafd8127c8e4ee6cd27a674759cae2d3491fa85850f8b7a2a6e4bcafe4b7130eb79a9520098f2fb0b47a58bc5befda2d0dff0985f0a5cc7b772d813bba5ef07576a87164e367fc73f2a0bf6835de598f88ecd078a36b94b34b8a357e603cded2557ec4f70929061db31af874a1464d0e0dd987fc578a673d0a337ae4e741be8864ab69bbc3bdebd6cc40f6ca541d2da832b73a9e0a784ec4a2a9881589cf5f1eca7ced187f2d61810e0605850bb28a2e0ddfd6d5fda5f6daf84446297a9ed808180db8985a74dc9bda783c8404a40816f5aa2e46472bfb0910fcbbf951ef6c00918ad218dd9ab2987f761d0925d0ef773c46fe4b7a161cedfc9b45c3ffdeb1de189b73be8fb6b988d56f7a0995999f0142f5cff66e3f48f8ff9aa4fa5d55cae1b3b28982f24b60eb6b2a013d1dbfe24a8ae7d060303846c826d30750266845c421f1cfb6284aaacfb809aa1f8cb2569943fa79b0a62156ce334515f7c49b2b3d7e15e7119bb61de88efddfcdddef82aa1c03a6a406a5558f5a19366ac18a0592f71ca072505313fb73a1170cdf6a366ab5af2c52234c20f20d5aa161384bc13a4181564db10d98fe6cd0df70f7d0b656d4cf22a4452ac33ed23ab0850e97ec391945ea2d35aa57102d3f7c9a52caa07c69252cc294b2917a61a22745bba81d0ab2cf3ab8fe96f5f8b88743444dea132dbb071087860a659b2f898c983e26249acf4e28b490b33a068809d43ee74895d7151833327cf9292c66c06fc66cc9e95586aba56fae820ff58101e2f3e7ccd5822b040cfc1c056b6ef68f8969d3c99f5a30d315b6a034bc88297af5601d1871e16caf265742b3c6a642b19e9f6f6794db94031bf90772091158922f53eec44078767c2b91d0a3209f32579c1a614ee5ecd41649d5e2914539a1b5099d13ea62045953d898e3c3299aa755f8a7d7f66d786f96a0678ba89744e1c1dd8eaed3853524794b50e94d5e42ec7d0c081151729648645308b00e9c95cc05ec5d649abf41b0a3ee729dc47aaffba089a3a7e228db9872879a8ce2750c66da4ab6c4e7062ab5ba7d323a2a07152a76f579c7cde3de94b9ac3a40049a6657917455fb6aeb02b75a7624e0f9bd302f852f98cc5949dbc91698a64c9cc57ad6a9c381ed372f0c3a390c9fe743e3855f7ee27289155bad0ef53c288fee088346517abc31e122e4897ff8fa5ce878ef35d93a1ba0e1a4ce39959c887525c1c1b8067f157686a8f7ac89d55078ec7230c4f62dfe01f6ae148cf3c62e428bc058a2121b8ea479aee258882493a4d5a91b633c6ec15f907ca53b06a3f0d0e05ec37e3a1db600461ce81b5b93ed5f894aa7f2feb1ed509912cdb3efd473444055d0fb07e0b456c6e1ad1bd4abd6ac38b2d01087f8baeffcb7594332834ea8295fa7d4668f0abb95f0242cfcd5953fd3b11b643a4e25b9c5ec13387e99faf24235dfdb215433217508d107c4393a84ca6bc4bd49bb562b77298220918e52e2d88f2a3c5177795aae347a4177f6d4937cacbd5e5c4ecbcc7081181b4bd65e862d818047d7e16712db3b8ec117d6230e832c8c9f590223188ca37d7f49620c3cf0fd771bb277bb4d1ccbbaa4c604248234fcbe3ed2a3cfb01c6ff72184ebaca088ccdb479e3bc41f475386277fbef50af51554d77d319aee4583a3a914df0fcf1461522c583cc55feac3e639133f196a8dc98a2c3d0fb746fe35ff6c87415712b49f144b33dc595c82daef511a693bf77f20537d7856befc651a7fb168cd3712c1bd8fe7018d8bdb296acfbdbac10427ab9b04b9aff10661fb759f66015099dab02de9ea25d9e6899a4ee5f2521f7e2093571ee1228005f4ca42af51d8cac3d507aecc9683a7105e89f467c7d451255b92fc2fe5822b3c3b31ec1d8caa8efdcd124545938a1751f30e3f7307f946ddf0d57c2cc8b4506663fd1f4b86beb3d82364c1ad1c63f22610b425d698806564308e162117445c0cf4f5fdc901ec86268162e776d60b7625189fdbdf9dc92e5655c8ccf2a7370d6bdbf69292964890d64be44c88f7b630e96bbfcd852eb083fd79ca55c7f12a4d378a54b9bfb074d3e916112d5a58cf8d749b5cd74d4007f1aaf349dfe63a400b06a507852c241b1aa296162365e0ad043a47209ae80845e6e4fced64b7f52dd8a9163d896f4bf443d5b199766366013d062a794181fde28ac9331795bc2cc77a5e0b52de3c3c00c099e9d3cb373ef771c69c20aed9255385280c3e42eec53920469ab690c8c6d49158146388b401b3186fd462ac2abd820b57e5e9325d859030d70616b14d2bb991ba7b20883a93425828fc70ae6f8171160be59150b2491816f49d6e832bb6c66f5f513ddbfb0d59f6a045dc88288ca21bba554a7a134fa3&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</summary>
    
    
    
    <category term="ÈöèÁ¨î" scheme="https://hejueyun.github.io/categories/essay/"/>
    
    
    <category term="essay" scheme="https://hejueyun.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-‰∏ÄÈò∂ÈÄªËæë-ÈÄªËæëÁºñÁ®ã</title>
    <link href="https://hejueyun.github.io/posts/faaea58c/"/>
    <id>https://hejueyun.github.io/posts/faaea58c/</id>
    <published>2022-02-25T22:58:44.000Z</published>
    <updated>2022-02-27T00:04:40.037Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Resolution was originally developed as a method for automatic theorem proving. Later, it was discovered that a restricted form of resolution can be used for programming a computation. This approach is called logic programming. </p><ul><li>A <strong>program</strong> is expressed as <strong>a set of clauses</strong> </li><li>A <strong>query</strong> is expressed as <strong>an additional clause</strong> that can <strong>clash</strong>ÂÜ≤Á™Å with one or more of the program clauses. <strong>The query is assumed to be the negation of result of the program</strong>. If a refutation succeeds, the <strong>query</strong> is not a <strong>logical consequence</strong> of the program, so its <strong>negation</strong> must be a <strong>logical consequence</strong>.</li></ul><p>Ëß£ÊûêÊúÄÂàùÊòØ‰Ωú‰∏∫‰∏ÄÁßçËá™Âä®ÂÆöÁêÜËØÅÊòéÁöÑÊñπÊ≥ïËÄåÂºÄÂèëÁöÑ„ÄÇÂêéÊù•Ôºå‰∫∫‰ª¨ÂèëÁé∞Ôºå‰∏ÄÁßçÂèóÈôêÂà∂ÁöÑÂÜ≥ËÆÆÂΩ¢ÂºèÂèØ‰ª•Áî®‰∫éËÆ°ÁÆóÁöÑÁºñÁ®ã„ÄÇËøôÁßçÊñπÊ≥ïË¢´Áß∞‰∏∫ÈÄªËæëÁºñÁ®ã„ÄÇ</p><ul><li>‰∏Ä‰∏™Á®ãÂ∫èË¢´Ë°®Ëææ‰∏∫‰∏ÄÁªÑÂ≠êÂè•</li><li>‰∏Ä‰∏™Êü•ËØ¢Ë¢´Ë°®Ëææ‰∏∫‰∏Ä‰∏™È¢ùÂ§ñÁöÑÂ≠êÂè•ÔºåÂèØ‰ª•‰∏é‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á®ãÂ∫èÂ≠êÂè•ÂèëÁîüÂÜ≤Á™Å„ÄÇÊü•ËØ¢Ë¢´ËÆ§‰∏∫ÊòØÂØπÁ®ãÂ∫èÁªìÊûúÁöÑÂê¶ÂÆö„ÄÇÂ¶ÇÊûúÂèçÈ©≥ÊàêÂäüÔºåÊü•ËØ¢‰∏çÊòØÁ®ãÂ∫èÁöÑÈÄªËæëÁªìÊûúÔºåÊâÄ‰ª•ÂÆÉÁöÑÂê¶ÂÆöÂøÖÈ°ªÊòØ‰∏Ä‰∏™ÈÄªËæëÁªìÊûú</li></ul></blockquote><h2 id="From-Formulas-in-Logic-to-Logic-Programming">1. From Formulas in Logic to Logic Programming</h2><p><strong>program clauses</strong></p><ul><li>ÊåâÊàëÁöÑÁêÜËß£Â∞±ÊòØÈúçÊÅ©Â≠êÂè•</li></ul><p><strong>goal clause</strong></p><ul><li>Suppose now that we have a set of program clauses and we want to prove that some formula:<ul><li>$G_1\land{}‚Ä¶\land{}G_n$</li></ul></li><li>is a <strong>logical consequence</strong> of the set. This can be done by taking the negation of the formula:<ul><li>$\lnot{}G_1\lor{}‚Ä¶\lor{}\lnot{}G_n$</li></ul></li><li>and refuting it by resolution with the program clauses<blockquote><p>The formula $¬¨‚ÄâG_1‚à®‚ãØ‚à®¬¨‚ÄâG_n$ , called a <strong>goal clause</strong>, consists entirely of negative literals, so it can only clash on the single positive literal of a program clause</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Resolution was originally developed as a method for automatic theorem proving. Later, it was discovered that a restricted form of resolution can be used for programming a computation. This approach is called logic programming. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;program&lt;/strong&gt; is expressed as &lt;strong&gt;a set of clauses&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;query&lt;/strong&gt; is expressed as &lt;strong&gt;an additional clause&lt;/strong&gt; that can &lt;strong&gt;clash&lt;/strong&gt;ÂÜ≤Á™Å with one or more of the program clauses. &lt;strong&gt;The query is assumed to be the negation of result of the program&lt;/strong&gt;. If a refutation succeeds, the &lt;strong&gt;query&lt;/strong&gt; is not a &lt;strong&gt;logical consequence&lt;/strong&gt; of the program, so its &lt;strong&gt;negation&lt;/strong&gt; must be a &lt;strong&gt;logical consequence&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ëß£ÊûêÊúÄÂàùÊòØ‰Ωú‰∏∫‰∏ÄÁßçËá™Âä®ÂÆöÁêÜËØÅÊòéÁöÑÊñπÊ≥ïËÄåÂºÄÂèëÁöÑ„ÄÇÂêéÊù•Ôºå‰∫∫‰ª¨ÂèëÁé∞Ôºå‰∏ÄÁßçÂèóÈôêÂà∂ÁöÑÂÜ≥ËÆÆÂΩ¢ÂºèÂèØ‰ª•Áî®‰∫éËÆ°ÁÆóÁöÑÁºñÁ®ã„ÄÇËøôÁßçÊñπÊ≥ïË¢´Áß∞‰∏∫ÈÄªËæëÁºñÁ®ã„ÄÇ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‰∏Ä‰∏™Á®ãÂ∫èË¢´Ë°®Ëææ‰∏∫‰∏ÄÁªÑÂ≠êÂè•&lt;/li&gt;
&lt;li&gt;‰∏Ä‰∏™Êü•ËØ¢Ë¢´Ë°®Ëææ‰∏∫‰∏Ä‰∏™È¢ùÂ§ñÁöÑÂ≠êÂè•ÔºåÂèØ‰ª•‰∏é‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á®ãÂ∫èÂ≠êÂè•ÂèëÁîüÂÜ≤Á™Å„ÄÇÊü•ËØ¢Ë¢´ËÆ§‰∏∫ÊòØÂØπÁ®ãÂ∫èÁªìÊûúÁöÑÂê¶ÂÆö„ÄÇÂ¶ÇÊûúÂèçÈ©≥ÊàêÂäüÔºåÊü•ËØ¢‰∏çÊòØÁ®ãÂ∫èÁöÑÈÄªËæëÁªìÊûúÔºåÊâÄ‰ª•ÂÆÉÁöÑÂê¶ÂÆöÂøÖÈ°ªÊòØ‰∏Ä‰∏™ÈÄªËæëÁªìÊûú&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;From-Formulas-in-Logic-to-Logic-Programming&quot;&gt;1. From Formulas in Logic to Logic Programming&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;program clauses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ÊåâÊàëÁöÑÁêÜËß£Â∞±ÊòØÈúçÊÅ©Â≠êÂè•&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;goal clause&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suppose now that we have a set of program clauses and we want to prove that some formula:&lt;ul&gt;
&lt;li&gt;$G_1\land{}‚Ä¶\land{}G_n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;is a &lt;strong&gt;logical consequence&lt;/strong&gt; of the set. This can be done by taking the negation of the formula:&lt;ul&gt;
&lt;li&gt;$\lnot{}G_1\lor{}‚Ä¶\lor{}\lnot{}G_n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;and refuting it by resolution with the program clauses&lt;blockquote&gt;
&lt;p&gt;The formula $¬¨‚ÄâG_1‚à®‚ãØ‚à®¬¨‚ÄâG_n$ , called a &lt;strong&gt;goal clause&lt;/strong&gt;, consists entirely of negative literals, so it can only clash on the single positive literal of a program clause&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-Êó∂Â∫èÈÄªËæë-ËØ≠Ê≥ï‰∏éËØ≠‰πâ</title>
    <link href="https://hejueyun.github.io/posts/150c47ae/"/>
    <id>https://hejueyun.github.io/posts/150c47ae/</id>
    <published>2022-02-24T13:30:06.000Z</published>
    <updated>2022-05-29T21:50:37.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction">1. Introduction</h2><blockquote><p>Temporal logic is a formal system for reasoning about time. Temporal logic has found extensive application in computer science, because the behavior of both hardware and software is a function of time.</p></blockquote><blockquote><p>Temporal logics are related to formal systems called modal logics. Modal logics express the distinction between what is necessarily true and what is possibly true. For example, the statement ‚Äò7 is a prime number‚Äô is necessarily true because‚Äîgiven the definitions of the concepts in the statement‚Äîthe statement is true always and everywhere. In contrast, the statement the head of state of this country is a king is possibly true, because its truth changes from place to place and from time to time. Temporal logic and modal logic are related because ‚Äòalways‚Äô is similar to ‚Äònecessarily‚Äô and ‚Äòeventually‚Äô to ‚Äòpossibly‚Äô.</p><p>Êó∂Èó¥ÈÄªËæë‰∏éÁß∞‰∏∫Ê®°ÊÄÅÈÄªËæëÁöÑÂΩ¢ÂºèÁ≥ªÁªüÊúâÂÖ≥„ÄÇÊ®°ÊÄÅÈÄªËæëË°®Ëææ‰∫Ü‰ªÄ‰πàÊòØÂøÖÁÑ∂ÁúüÂÆûÂíå‰ªÄ‰πàÊòØÂèØËÉΩÁúüÂÆû‰πãÈó¥ÁöÑÂå∫Âà´„ÄÇ‰æãÂ¶ÇÔºå‚Äù7ÊòØË¥®Êï∞ ‚ÄúËøô‰∏™ÈôàËø∞ÂøÖÁÑ∂ÊòØÁúüÂÆûÁöÑÔºåÂõ†‰∏∫‚ÄìËÄÉËôëÂà∞ÈôàËø∞‰∏≠Ê¶ÇÂøµÁöÑÂÆö‰πâ‚ÄìËøô‰∏™ÈôàËø∞ÊÄªÊòØÁúüÂÆûÁöÑÔºåËÄå‰∏îÊó†Â§Ñ‰∏çÂú®„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåËøô‰∏™ÂõΩÂÆ∂ÁöÑÂõΩÂÆ∂ÂÖÉÈ¶ñÊòØÂõΩÁéãÁöÑËØ¥Ê≥ïÂèØËÉΩÊòØÁúüÁöÑÔºåÂõ†‰∏∫ÂÆÉÁöÑÁúüÁêÜÂú®‰∏çÂêåÁöÑÂú∞ÊñπÂíå‰∏çÂêåÁöÑÊó∂Èó¥‰ºöÂèëÁîüÂèòÂåñ„ÄÇÊó∂Èó¥ÈÄªËæëÂíåÊ®°ÊÄÅÈÄªËæëÊòØÁõ∏ÂÖ≥ÁöÑÔºåÂõ†‰∏∫ ‚ÄúÊÄªÊòØ ‚ÄúÁ±ª‰ºº‰∫é ‚ÄúÂøÖÁÑ∂‚ÄùÔºå‚ÄùÊúÄÁªà ‚ÄúÁ±ª‰ºº‰∫é ‚ÄúÂèØËÉΩ‚Äù„ÄÇ</p></blockquote><ul><li>Êó∂Èó¥ÈÄªËæë‰∏éÊ®°ÊÄÅÈÄªËæëÁõ∏‰ººÔºåÂè™ÊòØ<strong>Áä∂ÊÄÅ</strong>Ë¢´ËÆ§‰∏∫ÊòØÊåáÂÆöÂú®Êüê‰∏ÄÁâπÂÆöÊó∂Èó¥ÁÇπ‰∏äÁöÑÁúüÂÆûÊÉÖÂÜµÔºåËÄå<strong>ËΩ¨Êç¢</strong>ÂàôÂÆö‰πâ‰∫ÜÊó∂Èó¥ÁöÑÊµÅÈÄù</li></ul><h2 id="PTL">2. PTL</h2><h3 id="Syntax">2.1. Syntax</h3><ul><li>The syntax of propositional temporal logic (PTL) is defined like the syntax of propositional logic, <strong>except for the addition of two additional unary operators</strong>:<ul><li><code>‚ñ°</code> , read always</li><li><code>‚óä</code> , read eventually</li></ul></li><li>$(¬¨‚Äâ‚óäp)‚àß(‚ñ°¬¨‚Äâq)$<ul><li>the temporal operators and negation have higher precedence‰ºòÂÖàÊùÉ than the conjunction operator</li></ul></li></ul><h3 id="semantic">2.2. semantic</h3><ul><li>Informally, ‚ñ° is a universal operator meaning ‚Äò<strong>for any time t in the future</strong>‚Äô, while ‚óä is an existential operator meaning ‚Äò<strong>for some time t in the future</strong>‚Äô</li></ul><h3 id="transition-diagram-Áä∂ÊÄÅËΩ¨Êç¢Âõæ">2.3. transition diagram Áä∂ÊÄÅËΩ¨Êç¢Âõæ</h3><ul><li><p><strong>Interpretations</strong> of PTL formulas are based upon state transition diagrams. </p><ul><li>The intuitiveÁõ¥ËßÇ meaning is that each state represents a world and <strong>a formula can have different truth values in different worlds</strong>. The transitions represent changes from one world to another.</li></ul></li><li><p>A state transition diagram is a <strong>directed graph</strong>ÊúâÂêëÂõæ.</p><ul><li>The nodes are states and the edges are transitions. ËäÇÁÇπÊòØÁä∂ÊÄÅÔºåËæπÊòØËΩ¨Êç¢</li><li>Each state is labeled with a set of propositional literals such that clashing literals do not appear in any state. ÊØè‰∏™Áä∂ÊÄÅÈÉΩÊ†áÊúâ‰∏Ä‰∏™ÂëΩÈ¢òÂ≠óÈù¢ÈáèÁöÑÈõÜÂêàÔºåËøôÊ†∑ÂÜ≤Á™ÅÁöÑÂ≠óÈù¢ÈáèÂ∞±‰∏ç‰ºöÂá∫Áé∞Âú®‰ªª‰ΩïÁä∂ÊÄÅ‰∏≠</li></ul></li><li><p>A formula that contains a <strong>temporal operator</strong> is interpreted using the transitions between the states</p><ul><li>‰∏Ä‰∏™ÂåÖÂê´Êó∂Èó¥ËøêÁÆóÁ¨¶ÁöÑÂÖ¨ÂºèË¢´Ëß£Èáä‰∏∫‰ΩøÁî®Áä∂ÊÄÅ‰πãÈó¥ÁöÑËΩ¨Êç¢</li></ul></li></ul><center><img loading="lazy" src="/posts/150c47ae/2.gif" width="550"></center><center><img loading="lazy" src="/posts/150c47ae/1.gif" width="550"></center><ul><li>If an atom is not shown in the label of a state, it is assumed to be assigned <strong>F</strong>.</li></ul><center><img loading="lazy" src="/posts/150c47ae/3.gif" width="550"></center><center><img loading="lazy" src="/posts/150c47ae/4.gif" width="550"></center><ul><li>$s:P \rightarrow { T,F }$</li><li>A <strong>binary relation</strong> can be considered to be <strong>a mapping from a state to a set of states</strong> $œÅ:S‚Üí2^{S}$ , so the relational notation $(s_1,s_2)‚ààœÅ$ will usually be written functionally as $s_2‚ààœÅ(s_1)$<ul><li>Ê≥®ÊÑè$s_1$Âíå$s_2$È°∫Â∫èÂÖ≥Á≥ª</li></ul></li></ul><h3 id="truth-value">2.4. truth value</h3><center><img loading="lazy" src="/posts/150c47ae/5.png" width="550"></center><ul><li><p>Ê≥®ÊÑèÊúÄÂêé‰∏ÄË°åÂæónotation</p></li><li><p>$œÅ(s_0)&#x3D;{s_1,s_2}$. Since $s_1‚ä®q$ and $s_2‚ä®q$, it follows that $s_0‚ä®‚ñ°q$. By the semantics of $‚à®$, $s _0‚ä®‚ñ°p‚à®‚ñ°q$.</p></li><li><p>$s_3‚ààœÅ(s_1)$, but $s_3 \not\models p$ and $s_3 \not\models q$ , so $s_1 \not\models ‚ñ°p$ and $s_1 \not\models ‚ñ°q$ . Therefore, $s_1 \not\models ‚ñ°p \lor ‚ñ°q$</p></li></ul><h3 id="Satisfiability-and-Validity">2.5. Satisfiability and Validity</h3><blockquote><p>The definition of semantic properties in PTL is more complex than it is in propositional or first-order logic, because an interpretation consists of <strong>both states and truth values</strong></p></blockquote><center><img loading="lazy" src="/posts/150c47ae/6.png" width="550"></center><blockquote><p>There are other formulas of PTL that are valid because of properties of temporal logic and not as instances of propositional validities. We will prove the validity of two formulas directly from the semantic definition. The first establishes a duality between ‚ñ° and ‚óä, and the second is the distribution of ‚ñ° over ‚Üí, similar to the distribution of ‚àÄ over ‚Üí.</p></blockquote><h4 id="Duality">2.5.1. Duality</h4><ul><li>$‚ä®‚ñ°p‚Üî¬¨‚Äâ‚óä¬¨‚Äâp$</li></ul><h2 id="Models-of-Time">3. Models of Time</h2><blockquote><p><strong>In modal and temporal logics, different logics can be obtained by placing restrictions on the transition relation</strong></p><ul><li>Âú®Ê®°ÊÄÅÂíåÊó∂Èó¥ÈÄªËæë‰∏≠ÔºåÈÄöËøáÂØπËΩ¨Êç¢ÂÖ≥Á≥ªÁöÑÈôêÂà∂ÂèØ‰ª•ÂæóÂà∞‰∏çÂêåÁöÑÈÄªËæë</li></ul></blockquote><ul><li>‰πüÂ∞±ÊòØËØ¥True valueÊó†ÂÖ≥ÔºåÈÄªËæëÊòØÈÄöËøátransition relationÂÆûÁé∞ÁöÑ</li></ul><h3 id="Reflexivity">3.1. Reflexivity</h3><ul><li>An interpretation $I&#x3D;(S,œÅ)$ is reflexive iff $œÅ$ is a reflexive <strong>relation</strong>: for all $s \in S$, $(s,s)‚ààœÅ$, or $s‚ààœÅ(s)$ in functional notation.<ul><li>ÊîæÂú®Áä∂ÊÄÅÂõæ‰∏äÂ∞±ÊòØ‰∏™Ëá™Â∑±ÊåáÂêëËá™Â∑±ÁöÑÂúà</li></ul></li></ul><h3 id="Transitivity">3.2. Transitivity</h3><ul><li>An interpretation with a transitive relation is characterized by the formula $‚ñ°A‚Üí‚ñ°‚ñ°A$ (or by the formula $‚óä‚óäA‚Üí‚óäA$)</li><li>In an interpretation that both is reflexive and transitive, $‚ä®‚ñ°A‚Üî‚ñ°‚ñ°A$ and $‚ä®‚óäA‚Üî‚óä‚óäA$.</li></ul><h3 id="Linearity-Á∫øÊÄßÂÖ≥Á≥ª">3.3. Linearity Á∫øÊÄßÂÖ≥Á≥ª</h3><ul><li>An interpretation $I&#x3D;(S,œÅ)$  is linear if $œÅ$ is a <strong>function</strong>, that is, for all $s \in S$, there is at most one $s^{‚Äò} \in S$ such that $s^{‚Äò} ‚ààœÅ(s)$<ul><li>‰πüÂ∞±ÊòØÊúÄÂ∞ëÊ≤°ÊúâÂêéÁª≠Áä∂ÊÄÅÔºåÊúÄÂ§ö‰∏Ä‰∏™ÂêéÁª≠Áä∂ÊÄÅ</li></ul></li></ul><blockquote><p>It might appear that a linear temporal logic would be limited to expressing properties of <strong>sequential programs</strong> and could not express properties of <strong>concurrent programs</strong>, where each state can have several possible successors depending on the interleaving of the statements of the processes. However, linear temporal logic is successful precisely in the context of concurrent programs because <strong>there is an implicit universal quantification in the definitions</strong></p><p>ÁúãËµ∑Êù•Á∫øÊÄßÊó∂ÊÄÅÈÄªËæë‰ªÖÈôê‰∫éË°®Ëææ<strong>È°∫Â∫èÁ®ãÂ∫è</strong>ÁöÑÂ±ûÊÄßÔºåËÄå‰∏çËÉΩË°®Ëææ<strong>Âπ∂ÂèëÁ®ãÂ∫è</strong>ÁöÑÂ±ûÊÄßÔºåÂõ†‰∏∫Âú®Âπ∂ÂèëÁ®ãÂ∫è‰∏≠ÔºåÊØè‰∏™Áä∂ÊÄÅÂèØ‰ª•ÊúâÂá†‰∏™ÂèØËÉΩÁöÑÂêéÁªßËÄÖÔºåËøôÂèñÂÜ≥‰∫éËøõÁ®ãËØ≠Âè•ÁöÑ‰∫§ÈîôÊÉÖÂÜµ„ÄÇÁÑ∂ËÄåÔºåÁ∫øÊÄßÊó∂Èó¥ÈÄªËæëÊÅ∞ÊÅ∞Âú®Âπ∂ÂèëÁ®ãÂ∫èÁöÑËÉåÊôØ‰∏ãÊòØÊàêÂäüÁöÑÔºåÂõ†‰∏∫Âú®ÂÆö‰πâ‰∏≠Êúâ‰∏Ä‰∏™ÈöêÂê´ÁöÑÊôÆÈÅçÈáèÂåñ</p></blockquote><p><strong>example</strong></p><ul><li>a temporal logic formula like $A&#x3D;‚ñ°‚óärunning$</li><li><strong>In any state, the execution will eventually reach a state in which the computation is running</strong></li><li>The program will be correct if this formula is <strong>true in every possible execution of the program obtained by interleaving the instructions of its processes</strong>. <ul><li>Each <code>interleaving</code>‰∫§Èîô can be considered as a single linear interpretation, so if we prove $\models{_I} A$ for an arbitrary linear interpretation $I$, then the correctness property holds for the program</li></ul></li></ul><h3 id="Discreteness-Á¶ªÊï£">3.4. Discreteness Á¶ªÊï£</h3><blockquote><p>Although the passage of time is often considered to be continuous and expressible by real numbers, the execution of a program is considered to be <strong>a sequence of discrete steps, where each step consists of the execution of a single instruction of the CPU</strong>. Thus it makes sense to express the concept of the next instant in time. To express discrete steps in temporal logic, an additional operator is added</p><ul><li>ËôΩÁÑ∂Êó∂Èó¥ÁöÑÊµÅÈÄùÈÄöÂ∏∏Ë¢´ËÆ§‰∏∫ÊòØËøûÁª≠ÁöÑÔºåÂèØ‰ª•Áî®ÂÆûÊï∞Êù•Ë°®ËææÔºå‰ΩÜÁ®ãÂ∫èÁöÑÊâßË°åË¢´ËÆ§‰∏∫ÊòØ‰∏ÄËøû‰∏≤Á¶ªÊï£ÁöÑÊ≠•È™§ÔºåÂÖ∂‰∏≠ÊØè‰∏ÄÊ≠•ÈÉΩÂåÖÊã¨ÊâßË°åCPUÁöÑ‰∏ÄÊù°Êåá‰ª§„ÄÇÂõ†Ê≠§Ôºå<strong>Áî®Êó∂Èó¥Êù•Ë°®Ëææ‰∏ã‰∏Ä‰∏™Áû¨Èó¥ÁöÑÊ¶ÇÂøµÊòØÊúâÊÑè‰πâÁöÑ</strong>„ÄÇ‰∏∫‰∫ÜÂú®Êó∂Èó¥ÈÄªËæë‰∏≠Ë°®ËææÁ¶ªÊï£ÁöÑÊ≠•È™§ÔºåÊàë‰ª¨Â¢ûÂä†‰∫Ü‰∏Ä‰∏™È¢ùÂ§ñÁöÑÊìç‰ΩúÁ¨¶</li></ul></blockquote><ul><li>The unary operator $\bigcirc$ is called <strong>next</strong></li><li>truth value<ul><li>f $A$ is $\bigcirc A^{‚Äò}$ then $v(A)&#x3D;T$ iff $v(A^{‚Äò})&#x3D;T$ for some $s^{‚Äò}‚ààœÅ(s)$</li><li><em>ÊòæÁÑ∂ÂêéÈù¢ÁöÑÁä∂ÊÄÅÊÉ≥Ë¶ÅÊòØTÈÇ£‰πàÂâçÈù¢ÁöÑÁä∂ÊÄÅËÇØÂÆöÂæóÊòØTÔºå‰ΩÜÂè™ÈúÄË¶Å<strong>some</strong>Â∞±Ë°å</em></li></ul></li><li>Ê≥®ÊÑèË¶Å$\bigcirc A$‰∏∫TÔºåÂè™ÈúÄAÊåáÂêëÁöÑstate‰∏∫TÔºåÂíå$A$Êú¨Ë∫´TÊàñFÊ≤°ÊúâÂÖ≥Á≥ª</li></ul><h4 id="self-dual">3.4.1. self-dual</h4><ul><li>$\bigcirc A \leftrightarrow \lnot \bigcirc \lnot A$</li></ul><blockquote><p>The operator $\bigcirc$ plays a crucial role in the theory of temporal logic and in algorithms for deciding properties like satisfiability, but it is rarely used to express properties of programs. In a concurrent program, not much can be said about what happens next since we don‚Äôt know which operation will be executed in the next step. Furthermore, we want a correctness statement to hold regardless of how the interleaving selects a next operation. Therefore, properties are almost invariably expressed in terms of always and eventually, not in terms of next.</p><ul><li>ËøêÁÆóÁ¨¶ $\bigcirc‚óØ$ Âú®Êó∂Èó¥ÈÄªËæëÁêÜËÆ∫ÂíåÂÜ≥ÂÆöÂèØÊª°Ë∂≥ÊÄßÁ≠âÂ±ûÊÄßÁöÑÁÆóÊ≥ï‰∏≠Ëµ∑ÁùÄÂÖ≥ÈîÆ‰ΩúÁî®Ôºå‰ΩÜÂÆÉÂæàÂ∞ëË¢´Áî®Êù•Ë°®Ëææ<strong>Á®ãÂ∫èÁöÑÂ±ûÊÄß</strong>„ÄÇÂú®‰∏Ä‰∏™<strong>Âπ∂ÂèëÁ®ãÂ∫è</strong>‰∏≠ÔºåÂØπ‰∫é‰∏ã‰∏ÄÊ≠•‰ºöÂèëÁîü‰ªÄ‰πàÂπ∂Ê≤°ÊúâÂ§™Â§öÂèØËØ¥ÁöÑÔºå<strong>Âõ†‰∏∫Êàë‰ª¨‰∏çÁü•ÈÅì‰∏ã‰∏ÄÊ≠•‰ºöÊâßË°åÂì™‰∏™Êìç‰Ωú„ÄÇÊ≠§Â§ñÔºåÊàë‰ª¨Â∏åÊúõÊ≠£Á°ÆÊÄßÂ£∞ÊòéÊÄªËÉΩÂ§üÊàêÁ´ã‚Äî‚Äî‰∏çÁÆ°‰∫§ÈîôÂ¶Ç‰ΩïÈÄâÊã©‰∏ã‰∏Ä‰∏™Êìç‰Ωú„ÄÇÂõ†Ê≠§Ôºå</strong>Â±ûÊÄßÂá†‰πéÈÉΩÊòØÁî®alwaysÂíåeventuallyÊù•Ë°®ËææÔºåËÄå‰∏çÊòØÁî®nextÊù•Ë°®Ëææ**„ÄÇ</li></ul></blockquote><h2 id="LTL">4. LTL</h2><ul><li>In the context of programs, the natural interpretations of temporal logic formulas are discrete, reflexive, transitive and linear. There is another restriction that simplifies the presentation: the transition function must be total so that each state has exactly one next state. An interpretation for a computation that terminates in state s is assumed to have a transition from s to s.<ul><li>Âú®Á®ãÂ∫èÁöÑËÉåÊôØ‰∏ãÔºåÊó∂Èó¥ÈÄªËæëÂÖ¨ÂºèÁöÑËá™ÁÑ∂Ëß£ÈáäÊòØ<strong>Á¶ªÊï£ÁöÑ„ÄÅÂèçÂ∞ÑÁöÑ„ÄÅ‰º†ÈÄíÁöÑÂíåÁ∫øÊÄßÁöÑ</strong>„ÄÇËøòÊúâ‰∏Ä‰∏™ÁÆÄÂåñË°®Ëø∞ÁöÑÈôêÂà∂ÔºöËΩ¨Êç¢ÂáΩÊï∞ÂøÖÈ°ªÊòØ<strong>ÂÆåÂÖ®ÁöÑ</strong>Ôºå‰ª•‰æøÊØè‰∏™Áä∂ÊÄÅÊ≠£Â•ΩÊúâ‰∏Ä‰∏™‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅ <em>ÔºàÂç≥<strong>‰∏Ä‰∏ÄÂØπÂ∫î</strong>Ôºâ</em> „ÄÇ‰∏Ä‰∏™ÁªàÊ≠¢‰∫éÁä∂ÊÄÅsÁöÑËÆ°ÁÆóÁöÑËß£ÈáäË¢´ÂÅáÂÆö‰∏∫Êúâ‰∏Ä‰∏™‰ªésÂà∞sÁöÑËøáÊ∏°</li></ul></li></ul><hr><ul><li><strong>Linear temporal logic (LTL)</strong> is propositional temporal logic whose interpretations are limited to transitions which are discrete, reflexive, transitive, linear and total.</li><li>Since there is only one transition out of each state, it need not be explicitly represented, so interpretations in LTL are defined to be paths of states<ul><li>‰πüÂ∞±ÊòØÂéüÊù•ÁöÑÁä∂ÊÄÅËΩ¨Êç¢$œÅ:S‚Üí2^{S}$Ë¢´ÁúÅÁï•‰∫Ü</li></ul></li></ul><center><img loading="lazy" src="/posts/150c47ae/7.png" width="550"></center><ul><li><p>Let A be a formula in LTL. A is satisfiable iff there is an interpretation œÉ for A such that œÉ‚ä®A. A is valid iff for all interpretations œÉ for A, œÉ‚ä®A. Notation: ‚ä®A</p></li><li><p>A formula of the form $\bigcirc A$ or $\lnot \bigcirc A$ is a <strong>next formula</strong>. </p></li><li><p>A formula of the form $‚óäA$ or $¬¨‚Äâ‚ñ°A$ (‚Äòeventually‚Äô and ‚Äònot always‚Äô) is a <strong>future formula</strong>.</p></li><li><p>any substitution instance of a formula in propositional logic is also an LTL formula</p></li><li><p>The method of semantic tableaux is a decision procedure for satisfiability in LTL</p></li></ul><h2 id="Binary-Temporal-Operators">5. Binary Temporal Operators</h2><ul><li>binary operator $\cap$ (read until)<ul><li>The output lines maintain their values until the set-line is asserted</li><li>If A is $A_1 \cap A_2$ then $v_œÉ(A)&#x3D;T$ iff $v_{œÉ_{i}}(A_2)&#x3D;T$ for some $i‚â•0$ and for all $0‚â§k&lt;i$,  $v_{œÉ_k}(A_1)&#x3D;T$</li></ul></li></ul><p><strong>example</strong></p><ul><li>$p \cap q$ is not true in the following interpretation assuming that state $s$ is repeated indefinitely:</li></ul><center><img loading="lazy" src="/posts/150c47ae/8.gif" width="550"></center><ul><li>The Weak Until Operator<ul><li>Sometimes it is convenient to express precedence properties without actually requiring that something eventually occur. $W$ (read weak until) is the same as the operator except that <strong>it is not required that the second formula ever become true</strong></li></ul></li></ul><center><img loading="lazy" src="/posts/150c47ae/9.png" width="550"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Temporal logic is a formal system for reasoning about time. Temporal logic has found extensive application in computer science, because the behavior of both hardware and software is a function of time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Temporal logics are related to formal systems called modal logics. Modal logics express the distinction between what is necessarily true and what is possibly true. For example, the statement ‚Äò7 is a prime number‚Äô is necessarily true because‚Äîgiven the definitions of the concepts in the statement‚Äîthe statement is true always and everywhere. In contrast, the statement the head of state of this country is a king is possibly true, because its truth changes from place to place and from time to time. Temporal logic and modal logic are related because ‚Äòalways‚Äô is similar to ‚Äònecessarily‚Äô and ‚Äòeventually‚Äô to ‚Äòpossibly‚Äô.&lt;/p&gt;
&lt;p&gt;Êó∂Èó¥ÈÄªËæë‰∏éÁß∞‰∏∫Ê®°ÊÄÅÈÄªËæëÁöÑÂΩ¢ÂºèÁ≥ªÁªüÊúâÂÖ≥„ÄÇÊ®°ÊÄÅÈÄªËæëË°®Ëææ‰∫Ü‰ªÄ‰πàÊòØÂøÖÁÑ∂ÁúüÂÆûÂíå‰ªÄ‰πàÊòØÂèØËÉΩÁúüÂÆû‰πãÈó¥ÁöÑÂå∫Âà´„ÄÇ‰æãÂ¶ÇÔºå‚Äù7ÊòØË¥®Êï∞ ‚ÄúËøô‰∏™ÈôàËø∞ÂøÖÁÑ∂ÊòØÁúüÂÆûÁöÑÔºåÂõ†‰∏∫‚ÄìËÄÉËôëÂà∞ÈôàËø∞‰∏≠Ê¶ÇÂøµÁöÑÂÆö‰πâ‚ÄìËøô‰∏™ÈôàËø∞ÊÄªÊòØÁúüÂÆûÁöÑÔºåËÄå‰∏îÊó†Â§Ñ‰∏çÂú®„ÄÇÁõ∏ÊØî‰πã‰∏ãÔºåËøô‰∏™ÂõΩÂÆ∂ÁöÑÂõΩÂÆ∂ÂÖÉÈ¶ñÊòØÂõΩÁéãÁöÑËØ¥Ê≥ïÂèØËÉΩÊòØÁúüÁöÑÔºåÂõ†‰∏∫ÂÆÉÁöÑÁúüÁêÜÂú®‰∏çÂêåÁöÑÂú∞ÊñπÂíå‰∏çÂêåÁöÑÊó∂Èó¥‰ºöÂèëÁîüÂèòÂåñ„ÄÇÊó∂Èó¥ÈÄªËæëÂíåÊ®°ÊÄÅÈÄªËæëÊòØÁõ∏ÂÖ≥ÁöÑÔºåÂõ†‰∏∫ ‚ÄúÊÄªÊòØ ‚ÄúÁ±ª‰ºº‰∫é ‚ÄúÂøÖÁÑ∂‚ÄùÔºå‚ÄùÊúÄÁªà ‚ÄúÁ±ª‰ºº‰∫é ‚ÄúÂèØËÉΩ‚Äù„ÄÇ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Êó∂Èó¥ÈÄªËæë‰∏éÊ®°ÊÄÅÈÄªËæëÁõ∏‰ººÔºåÂè™ÊòØ&lt;strong&gt;Áä∂ÊÄÅ&lt;/strong&gt;Ë¢´ËÆ§‰∏∫ÊòØÊåáÂÆöÂú®Êüê‰∏ÄÁâπÂÆöÊó∂Èó¥ÁÇπ‰∏äÁöÑÁúüÂÆûÊÉÖÂÜµÔºåËÄå&lt;strong&gt;ËΩ¨Êç¢&lt;/strong&gt;ÂàôÂÆö‰πâ‰∫ÜÊó∂Èó¥ÁöÑÊµÅÈÄù&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;PTL&quot;&gt;2. PTL&lt;/h2&gt;&lt;h3 id=&quot;Syntax&quot;&gt;2.1. Syntax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The syntax of propositional temporal logic (PTL) is defined like the syntax of propositional logic, &lt;strong&gt;except for the addition of two additional unary operators&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;‚ñ°&lt;/code&gt; , read always&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‚óä&lt;/code&gt; , read eventually&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$(¬¨‚Äâ‚óäp)‚àß(‚ñ°¬¨‚Äâq)$&lt;ul&gt;
&lt;li&gt;the temporal operators and negation have higher precedence‰ºòÂÖàÊùÉ than the conjunction operator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;semantic&quot;&gt;2.2. semantic&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Informally, ‚ñ° is a universal operator meaning ‚Äò&lt;strong&gt;for any time t in the future&lt;/strong&gt;‚Äô, while ‚óä is an existential operator meaning ‚Äò&lt;strong&gt;for some time t in the future&lt;/strong&gt;‚Äô&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;transition-diagram-Áä∂ÊÄÅËΩ¨Êç¢Âõæ&quot;&gt;2.3. transition diagram Áä∂ÊÄÅËΩ¨Êç¢Âõæ&lt;/h3&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-Á®ãÂ∫èÈ™åËØÅ-Âπ∂ÂèëÁ®ãÂ∫è</title>
    <link href="https://hejueyun.github.io/posts/cf619a86/"/>
    <id>https://hejueyun.github.io/posts/cf619a86/</id>
    <published>2022-02-23T01:15:37.000Z</published>
    <updated>2022-04-22T21:12:06.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Verification is routinely used when developing computer hardware and concurrent programs. A sequential program can always be tested and retested, but the nondeterministic nature of hardware and concurrent programs limits the effectiveness of testing as a method to demonstrate that the system is correct. Slight variations in timing, perhaps caused by congestion on a network, mean that two executions of the same program might give different results. Even if a bug is found by testing and then fixed, we have no way of knowing if the next test runs correctly because we fixed the bug or because the execution followed a different scenario, one in which the bug cannot occur.</p><p>Âú®ÂºÄÂèëËÆ°ÁÆóÊú∫Á°¨‰ª∂ÂíåÂπ∂ÂèëÁ®ãÂ∫èÊó∂ÔºåÁªèÂ∏∏‰ºöÁî®Âà∞È™åËØÅ„ÄÇ‰∏Ä‰∏™È°∫Â∫èÁ®ãÂ∫èÊÄªÊòØÂèØ‰ª•Ë¢´ÊµãËØïÂíåÈáçÊñ∞ÊµãËØïÔºå‰ΩÜÁ°¨‰ª∂ÂíåÂπ∂ÂèëÁ®ãÂ∫èÁöÑÈùûÁ°ÆÂÆöÊÄßÈôêÂà∂‰∫ÜÊµãËØï‰Ωú‰∏∫ËØÅÊòéÁ≥ªÁªüÊ≠£Á°ÆÁöÑÊñπÊ≥ïÁöÑÊúâÊïàÊÄß„ÄÇ<strong>Êó∂Èó¥‰∏äÁöÑÂæÆÂ∞èÂèòÂåñÔºå‰πüËÆ∏ÊòØÁî±ÁΩëÁªú‰∏äÁöÑÊã•Â†µÈÄ†ÊàêÁöÑÔºåÊÑèÂë≥ÁùÄÂêå‰∏Ä‰∏™Á®ãÂ∫èÁöÑ‰∏§Ê¨°ÊâßË°åÂèØËÉΩ‰ºöÂæóÂà∞‰∏çÂêåÁöÑÁªìÊûú„ÄÇÂç≥‰ΩøÈÄöËøáÊµãËØïÂèëÁé∞‰∫Ü‰∏Ä‰∏™ÈîôËØØÔºåÁÑ∂ÂêéËøõË°å‰∫Ü‰øÆÂ§çÔºåÊàë‰ª¨‰πüÊ≤°ÊúâÂäûÊ≥ïÁü•ÈÅì‰∏ã‰∏ÄÊ¨°ÊµãËØïÁöÑÊ≠£Á°ÆËøêË°åÊòØÂõ†‰∏∫Êàë‰ª¨‰øÆÂ§ç‰∫ÜËøô‰∏™ÈîôËØØÔºåËøòÊòØÂõ†‰∏∫ÊâßË°å‰∫Ü‰∏Ä‰∏™‰∏çÂêåÁöÑÂú∫ÊôØÔºåÂú®Ëøô‰∏™Âú∫ÊôØ‰∏≠ÔºåËøô‰∏™ÈîôËØØ‰∏ç‰ºöÂèëÁîü</strong></p></blockquote><ul><li>È°∫Â∫èÁ®ãÂ∫èÁöÑÈ™åËØÅË≤å‰ººÊ≤°ÊúâÁî®Âà∞Êó∂ÊÄÅÈÄªËæë</li></ul><h2 id="Concurrent-Program-Âπ∂ÂèëÁ®ãÂ∫è">1. Concurrent Program Âπ∂ÂèëÁ®ãÂ∫è</h2><ul><li>A <strong>concurrent program</strong> is a set of <strong>sequential programs</strong> together with a set of <strong>global variables</strong></li><li>A concurrent program is a set of <code>processes</code> ${ p_1,p_2,‚Ä¶,p_n }$, where each <strong>process</strong> is a <strong>sequential program</strong><ul><li><strong>Processes</strong> are also known as <strong>threads</strong>; in some contexts, the two terms have different meanings but the difference is not relevant here<ul><li>ËøõÁ®ã‰∏éÁ∫øÁ®ãÂú®Ê≠§Â§ÑÊó†ÈúÄÂå∫Âà´</li></ul></li></ul></li><li>The variables declared in each process are its <code>local variables</code>; a local variable can be read and written only by the process where it is declared.</li><li>There may be <code>global variables</code> that can be read and written by all of the processes.</li></ul><h3 id="state-Áä∂ÊÄÅ">1.1. state Áä∂ÊÄÅ</h3><ul><li>The state of a concurrent programs consists of <ul><li><strong>the values of its variables</strong> (both local and global),</li><li>together with the <strong>location counters</strong> of its processes.</li></ul></li></ul><center><img loading="lazy" src="/posts/cf619a86/2.png" width="550"></center><p><strong>Example</strong></p><center><img loading="lazy" src="/posts/cf619a86/3.gif" width="350"></center><blockquote><p>There are $5√ó3√ó3&#x3D;45$ different states, because the variable n can have the values $0, 1, 2, 3, 4$ and there are <strong>three</strong> labels for <strong>each</strong> process. </p><ul><li>These seems like quite a large number of states for such a simple program, but many of the states (for example, (0,end,end)) will never occur in any computation.</li></ul></blockquote><ul><li>possible computations:</li></ul><center><img loading="lazy" src="/posts/cf619a86/4.gif" width="350"></center><h3 id="Interleaving-‰∫§Èîô">1.2. Interleaving ‰∫§Èîô</h3><ul><li>A computation of a concurrent program is obtained by asynchronous interleaving of atomic instructions<ul><li>Âπ∂ÂèëÁ®ãÂ∫èÁöÑËÆ°ÁÆóÊòØÈÄöËøáÂéüÂ≠êÊåá‰ª§ÁöÑÂºÇÊ≠•‰∫§ÈîôÂæóÂà∞ÁöÑ</li></ul></li><li>Each statement is executed to completion before the execution of another statement (from the same process or another process) is started<ul><li>these statements are <strong>atomic operations</strong></li></ul></li></ul><center><img loading="lazy" src="/posts/cf619a86/5.png" width="550"></center><center><img loading="lazy" src="/posts/cf619a86/6.png" width="550"></center><h2 id="Formalization-of-Correctness">2. Formalization of Correctness</h2><ul><li><strong>Correctness properties</strong> of concurrent programs can be expressed in <strong>linear temporal logic</strong>. </li><li>There are two types of properties: <ul><li>safety properties that require that <strong>something bad never happens</strong> </li><li>livenessÊ¥ªÊ≥º properties that require that <strong>something good eventually happen</strong>.</li></ul></li></ul><hr><ul><li>Each process consists of a <code>critical section</code> and a <code>non-critical section</code>. <ul><li>A process may stay indefinitely in its non-critical section, or‚Äîat any time‚Äîit may request to enter its critical section. </li><li>A process that has entered its critical section will eventually leave it</li><li><strong>Mutual exclusion</strong>: It is forbidden for the two processes to be in their critical sections simultaneously.</li><li><strong>Liveness</strong>: If a process attempts to enter its critical section, it will eventually succeed</li></ul></li></ul><h3 id="Peterson‚Äôs-algorithm-ÂΩºÂæóÊ£ÆÁÆóÊ≥ï">2.1. Peterson‚Äôs algorithm ÂΩºÂæóÊ£ÆÁÆóÊ≥ï</h3><center><img loading="lazy" src="/posts/cf619a86/8.png" width="500"></center><center><img loading="lazy" src="/posts/cf619a86/13.gif" width="500"></center><ul><li>The statement: <code>wait until (!wantq or turn == 2)</code> is a more intuitive way of writing:<ul><li><code>while (!(!wantq or turn == 2)) /* do nothing */</code></li></ul></li><li>The variables <code>wantp</code> and <code>wantq</code> are set to <strong>true</strong> by the processes to indicate that they are trying to enter their critical sections and reset to <strong>false</strong> when they leave their critical sections. </li><li>A trying-process <strong>waits</strong> until the other process is neither trying to enter its critical section nor is it in its critical section (<code>!wantq</code> or <code>!wantp</code>). Since the algorithm is <strong>symmetric</strong>, the variable turn is used to break ties when both processes are trying to enter their critical sections. </li><li>A tie is broken in favor of the first process which set turn. Suppose that process p set turn to 1 and then process q set turn to 2. The expression <code>turn==2</code> will be true and allow process p to enter its critical section.</li></ul><hr><center><img loading="lazy" src="/posts/cf619a86/24.gif" width="450"></center><ul><li>The following two LTL formulas express the correctness of Peterson‚Äôs algorithm for the critical section problem:</li></ul><center><img loading="lazy" src="/posts/cf619a86/7.gif" width="350"></center><ul><li>cs &#x3D; critical section</li></ul><blockquote><ul><li>Mutual exclusion forbids (always false) a computation from including a state where both processes are in their critical section, </li><li>while liveness requires that (always) if a computation includes a state where a process is trying to enter its critical section then (eventually) the computation will include a state where the process is in its critical section.</li></ul></blockquote><h3 id="progress-axioms">2.2. progress axioms</h3><center><img loading="lazy" src="/posts/cf619a86/9.gif" width="350"></center><center><img loading="lazy" src="/posts/cf619a86/23.png" width="550"></center><h3 id="Invariants-‰∏çÂèòÈáè">2.3. Invariants ‰∏çÂèòÈáè</h3><ul><li>$r$ is invariant, meaning that $r$ is true initially and remains true in any interpretation</li><li>deduction rule:</li></ul><center><img loading="lazy" src="/posts/cf619a86/14.png" width="350"></center><h2 id="Programs-as-Automata-‚Äì-model-checking">3. Programs as Automata ‚Äì model checking</h2><ul><li>There is a different approach to the verification of the correctness of a program: <strong>generate all possible computations</strong>ÁîüÊàêÊâÄÊúâÂèØËÉΩÁöÑËÆ°ÁÆó and check that the correctness property holds for each of them. Of course, <strong>this is possible only if there are a finite number of states so that each computation is finite or finitely presented</strong>. ÊâÄÂü∫‰∫éÁöÑÂÅáËÆæ<ul><li>For the program for integer square rootÊï¥Êï∞Âπ≥ÊñπÊ†πÁöÑÁ®ãÂ∫è, we could prove its correctness this way for any <strong>specific</strong> value of a, but we could not prove it in <strong>general</strong> for all values of a. </li><li>However, many concurrent algorithms have a finite number of states</li></ul></li><li>This approach to verification is called <code>model checking</code>. <ul><li>A concurrent system is represented by an abstract finite model that ignores details of the computation</li><li>a <strong>correctness property</strong> is expressed as a <strong>formula</strong> (usually in temporal logic) and we wish to show that the <strong>program</strong> is a <strong>modelËß£</strong> of the <strong>formula</strong>, that is, an interpretation in which the formula is true</li></ul></li></ul><h3 id="Modeling-Concurrent-Programs-as-Automata">3.1. Modeling Concurrent Programs as Automata</h3><ul><li><p>Concurrent programs can be modeled as <strong>finite automata</strong>ÊúâÈôêËá™Âä®Êú∫</p><ul><li>Each <strong>value of the location counter</strong> is a <strong>state</strong> of one of the automata</li><li>while each <strong>transition</strong> is labeled with the <strong>Boolean condition</strong> that enables it to be taken or with the <strong>assignment statements</strong> that change the values of the variables.</li></ul></li><li><p>Áõ∏ÊØî‰πã‰∏ãÔºåÈ°∫Â∫èÁ®ãÂ∫èÁöÑcorrectnessÊòØÈÄöËøá <strong>inductive expressions</strong> ${ p }S{ q }$Êù•Ë°®Á§∫ÁöÑ</p></li><li><p>The abbreviatedÁÆÄÁï•ÁöÑ version of Peterson‚Äôs algorithm</p></li></ul><center><img loading="lazy" src="/posts/cf619a86/10.gif" width="350"></center><ul><li>The <strong>automata</strong> for the individual processes do not define the entire concurrent program. We must combine these automata into one <strong>automaton</strong>(automataÁöÑÂ§çÊï∞ÂΩ¢Âºè)</li><li>The states are defined as the Cartesian product of the states of the automata for the individual processes.</li></ul><center><img loading="lazy" src="/posts/cf619a86/11.png" width="550"></center><h3 id="The-State-Space-Áä∂ÊÄÅÁ©∫Èó¥">3.2. The State Space Áä∂ÊÄÅÁ©∫Èó¥</h3><blockquote><p>The <strong>reachable states</strong> of a concurrent program are the states that can actually occur in a computation. The state space of the program is a directed graph: </p><ul><li>each reachable state is a <strong>node</strong> </li><li>and there is an <strong>edge</strong> from state $s_1$ to state $s_2$ if some transition of the program which is enabled in $s_1$ moves the state of the computation to $s_2$.</li></ul><p>‚ÄÉ</p></blockquote><ul><li>State space for Peterson‚Äôs algorithm</li></ul><center><img loading="lazy" src="/posts/cf619a86/12.gif" width="450"></center><h2 id="Model-Checking-of-Invariance-Properties">4. Model Checking of Invariance Properties</h2><blockquote><p>We now consider the second meaning of the term model: Is the state space a <strong>model</strong> of a correctness property? Consider the <strong>correctness property</strong> for mutual exclusion in Peterson‚Äôs algorithm $A&#x3D;‚ñ°¬¨‚Äâ(csp‚àßcsq)$ . Since the state spacerepresents all the reachable states and all the transitions between them, any interpretation for $A$ must be an infinite path in this directed graph. A quick inspection of the graph shows that all of the ten reachable states satisfy the formula $¬¨‚Äâ(csp‚àßcsq)$; therefore, for any interpretation (that is, for any path constructed from these states), $‚ñ°¬¨‚Äâ(csp‚àßcsq)$ is true.</p><hr><p>Once we have written the program and the correctness property, there are <strong>algorithms</strong> to perform the rest of the proof: </p><ul><li>compile the program to a set of automata</li><li>construct the product automaton</li><li>generate the state space </li><li>check the truth of the formula expressing the correctness property at each state.</li></ul></blockquote><h3 id="Algorithms-for-Searching-the-State-Space">4.1. Algorithms for Searching the State Space</h3><ul><li>breadth-first search (BFS)</li><li>depth-first search (DFS)</li></ul><h2 id="Model-Checking-of-Liveness-Properties">5. Model Checking of Liveness Properties</h2><ul><li>Using negation, we have: the correctness property does not hold iff there exists a computation is which ¬¨‚ÄâA is true, where: <ul><li>$\lnot A \equiv \lnot ‚ñ° \lnot (csp \land csq) \equiv ‚óä (csp \land csq)$</li></ul></li><li>The model checking algorithm ‚Äòsucceeds‚Äô if it finds a computation where ¬¨‚ÄâA is true; it succeeds by finding a <code>counterexample</code> proving that the program is incorrect.</li></ul><center><img loading="lazy" src="/posts/cf619a86/15.gif" width="450"></center><ul><li>The states on the stack of a depth first search form a <code>path</code>. If the construction ever tries to generate a state that already exists higher up on the stack, the transition to this node defines a finitely-presented infinite computation like the ones shown above.</li><li>we could generate the entire state space and then check each distinct path to see if it model, but it is more efficient if the checking can be done on-the-flyÂç≥Êó∂ÂÆåÊàê as we did for safety properties. <strong>The key is to transform an LTL formula into an automaton whose computations can be generated at the same time as those of the program.</strong></li></ul><h2 id="Expressing-an-LTL-Formula-as-an-Automaton">6. Expressing an LTL Formula as an Automaton</h2><ul><li>An LTL formula can be algorithmically transformed into an automaton that accepts an input if and only if <strong>the input represents a computation that satisfies the LTL formula</strong>.</li><li>The automaton is a non-deterministic B√ºchi automaton (NBA), which is the same as a non-deterministic finite automaton (NFA) <strong>except that it reads an infinite string</strong> as its input and its definition of acceptance is changed accordingly</li><li>Âú®ËÆ°ÁÆóÁêÜËÆ∫‰∏≠Ôºå<strong>ÈùûÁ°ÆÂÆöÊúâÈôêÁä∂ÊÄÅËá™Âä®Êú∫</strong>Êàñ<strong>ÈùûÁ°ÆÂÆöÊúâÈôêËá™Âä®Êú∫</strong>ÊòØÂØπÊØè‰∏™Áä∂ÊÄÅÂíåËæìÂÖ•Á¨¶Âè∑ÂØπÂèØ‰ª•ÊúâÂ§ö‰∏™ÂèØËÉΩÁöÑ‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅÁöÑÊúâÈôêÁä∂ÊÄÅËá™Âä®Êú∫„ÄÇËøôÂå∫Âà´‰∫éÁ°ÆÂÆöÊúâÈôêÁä∂ÊÄÅËá™Âä®Êú∫ÔºåÂÆÉÁöÑ‰∏ã‰∏Ä‰∏™ÂèØËÉΩÁä∂ÊÄÅÊòØÂîØ‰∏ÄÁ°ÆÂÆöÁöÑ</li></ul><center><img loading="lazy" src="/posts/cf619a86/16.gif" width="450"></center><ul><li>the negation of the liveness formula <ul><li>$\lnot ‚ñ°A ‚â° \not ‚ñ°(waitp‚Üí‚óäcsp) ‚â° ‚óä(waitp \land ‚ñ° \not csp)$</li></ul></li><li>The intuitive meaning of the formula is that the computation can do anything (expressed as true), but it may nondeterministically decide to enter a state where waitp is true and csp is and remains false from then on. Such a computation falsifies the liveness property.</li><li>In state $s_1$, if csp ever becomes true, there is no transition from the state; as with NFA, <strong>an automaton that cannot continue with its computation is considered to have rejected its input</strong></li></ul><h2 id="Model-Checking-Using-the-Synchronous-Automaton">7. Model Checking Using the Synchronous Automaton</h2><blockquote><p>On-the-fly model checking for an invariance property simply evaluates the correctness property as each new state is generated</p></blockquote><center><img loading="lazy" src="/posts/cf619a86/17.gif" width="450"></center><blockquote><p>When checking a <strong>liveness property</strong> (or a <strong>safety property</strong> expressed in LTL as $‚ñ°A$), every step of the program automaton‚Äîthe asynchronous product automaton of the processes‚Äîis immediately followed by a step of the NBA corresponding to the LTL formula expressing the negation of the correctness property. The product of the asynchronous automaton and the NBA is called a <strong>synchronous automaton</strong> since the steps of the two automata are synchronized. </p></blockquote><center><img loading="lazy" src="/posts/cf619a86/18.gif" width="450"></center><h3 id="Model-checking-the-liveness-of-Peterson‚Äôs-algorithm">7.1. Model checking the liveness of Peterson‚Äôs algorithm</h3><center><img loading="lazy" src="/posts/cf619a86/19.gif" width="450"></center><ul><li>Starting from the initial state 1, state 2 is reached and $‚óä(waitp‚àß‚ñ°¬¨‚Äâcsp)$ will be true, provided that we can find a reachable MSCCÔºàÂº∫ËøûÈÄöÂàÜÈáèÔºåStrongly connected componentÔºâwhere $¬¨‚Äâcsp$ holds in all its states.</li><li>A nested DFS is initiated. Clearly, states 4 and 8 cannot be part of the MSCC since ¬¨‚Äâcsp is false in those states</li><li>the computation can continue: $1,2,5,5,‚Ä¶$ and the state 5 with its self-loop forms an MSCC such that $¬¨‚Äâcsp$ is false in all its states<ul><li><strong>rejected</strong></li></ul></li><li>Continuing the DFS, we encounter two more states 6 and 9 where waitp is true. We leave it as an exercise to show that the nested DFS will find computations in which ¬¨‚Äâcsp holds in all states, but that these computations are also unfair. Therefore, the liveness holds for Peterson‚Äôs algorithm</li></ul><h3 id="Fair">7.2. Fair</h3><ul><li>A computation is (weakly) fair if a transition that is always <strong>enabled</strong> is eventually executed in the computation.</li><li>The statement wait <code>until (!wantq or turn == 2)</code> is always <strong>enabled</strong> because <code>turn=2</code>, but it is never taken. Therefore, we reject this counterexample</li></ul><h2 id="Branching-Time-Temporal-Logic">8. Branching-Time Temporal Logic</h2><p>. </p><h2 id="Symbolic-Model-Checking-Á¨¶Âè∑Ê®°ÂûãÊ£ÄÈ™å">9. Symbolic Model Checking Á¨¶Âè∑Ê®°ÂûãÊ£ÄÈ™å</h2><ul><li>In symbolic model checking, the <strong>states</strong> and <strong>transitions</strong> are not represented explicitly; instead, they are encoded as formulas in <strong>propositional logic</strong><ul><li>Âú®Á¨¶Âè∑Ê®°ÂûãÊ£ÄÊü•‰∏≠ÔºåÁä∂ÊÄÅÂíåËΩ¨Êç¢Ê≤°ÊúâÊòéÁ°ÆË°®Á§∫ÔºõÁõ∏ÂèçÔºåÂÆÉ‰ª¨Ë¢´ÁºñÁ†Å‰∏∫ÂëΩÈ¢òÈÄªËæëÁöÑÂÖ¨Âºè</li></ul></li></ul><p><strong>exampl</strong></p><ul><li><p>A state in the state space of Peterson‚Äôs algorithm can be represented as a propositional formula using five atomic propositions. </p><ul><li>There are <strong>three</strong> locations in each process, so <strong>two</strong> bits for each process can represent these values ${p_0,p_1,q_0,q_1}$</li></ul><center><img loading="lazy" src="/posts/cf619a86/20.png" width="450"></center><ul><li>The variable turn can take <strong>two</strong> values so <strong>one</strong> bit is sufficient. The atomic proposition t will encode turn: <strong>true</strong> for turn&#x3D;1 and <strong>false</strong> for turn&#x3D;2</li></ul></li><li><p>The initial state of the state space is encoded by the formula:</p><ul><li>$p_0 \land p_1 \land q_0 \land q_1 \land t$</li></ul></li><li><p>To encode the transitions, we need another set of atomic propositions: </p><ul><li>the original set will encode the state <strong>before</strong> the transition </li><li>and the new set (denoted by primes) will encode the <strong>state</strong> after the transition</li></ul></li><li><p>The encoding of the transition from $s_5&#x3D;(waitp,waitq,2)$ to $s_8$ is given by the formula:</p><center><img loading="lazy" src="/posts/cf619a86/21.gif" width="350"></center></li><li><p>There are two ways of proceeding from here</p><ul><li>One is to encode the formulas using <strong>BDDs</strong><ul><li>The algorithms on BDDs can be used to compute the formulas corresponding to new sets of states: union, predecessor, and so on</li></ul></li><li>The other approach to <strong>symbolic model checking</strong> is called <strong>bounded model checking</strong>. <ul><li>Recall that a formula in temporal logic has the finite model property: if a formula is satisfiable then it is satisfied in a finitely-presented model. For an LTL formula, we showed that a model consists of MSCCs that are reachable from the initial state. In fact, by unwindingËß£ÂºÄ the MSCCs, we can always find a model that consists of a single cycle reachable from the initial state </li><li>In bounded model checking, a maximum size $k$ for the model is guessed. The <strong>behavior of the program</strong> and the <strong>negation of a correctness property</strong> are expressed as a <strong>propositional formula</strong> obtained by encoding each state that can appear at distance $i$ from the initial state $0‚â§i‚â§k$. This formula is the input to a <strong>SAT solver</strong>; if a satisfying interpretation is found, then there is a computation that satisfies the negation of the correctness property is true and the program is not correct.</li></ul></li></ul></li></ul><h3 id="BDD-‰∫åÂÖÉÂÜ≥Á≠ñÂõæ">9.1. BDD ‰∫åÂÖÉÂÜ≥Á≠ñÂõæ</h3><p>( ‰∫åÂÖÉÂÜ≥Á≠ñÂõæ Binary decision diagram)</p><blockquote><p>A binary decision diagram (BDD) is a data structure for representing the semantics of a formula in propositional logic. A formula is represented by a directed graph and an algorithm is used to reduce the graph.</p><ul><li>‰∫åÂÖÉÂÜ≥Á≠ñÂõæÔºàBDDÔºâÊòØ‰∏ÄÁßçÊï∞ÊçÆÁªìÊûÑÔºåÁî®‰∫éË°®Á§∫ÂëΩÈ¢òÈÄªËæë‰∏≠‰∏Ä‰∏™ÂÖ¨ÂºèÁöÑËØ≠‰πâ„ÄÇ‰∏Ä‰∏™ÂÖ¨ÂºèÁî±‰∏Ä‰∏™ÊúâÂêëÂõæË°®Á§∫ÔºåÂπ∂‰ΩøÁî®‰∏ÄÁßçÁÆóÊ≥ïÊù•ÂáèÂ∞ëËØ•Âõæ„ÄÇ</li></ul></blockquote><ul><li><p>ÂΩíÁ∫¶ÊúâÂ∫èÁöÑ‰∫åÂÖÉÂÜ≥Á≠ñÂõæÊòØ<strong>Â∏ÉÂ∞îÂáΩÊï∞</strong>ÁöÑËßÑËåÉË°®Á§∫</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/397164596">‰∫åÂÖÉÂÜ≥Á≠ñÂõæ(Binary Decision Diagrams - BDD) Ôºà‰∏ÄÔºâ - Áü•‰πé</a></p></li></ul><hr><blockquote><p>A Boolean function can be represented as a rooted, directed, acyclic graph, which consists of several (<strong>decision</strong>) nodes and two <strong>terminal</strong> nodes. The two terminal nodes are labeled 0 (FALSE) and 1 (TRUE). Each (decision) node ${\displaystyle u}$ is labeled by a Boolean variable ${\displaystyle x_{i}}$ and has two child nodes called <strong>low child</strong> and <strong>high child</strong>. The edge from node ${\displaystyle u}$ to a low (or high) child represents an assignment of the value FALSE (or TRUE, respectively) to variable ${\displaystyle x_{i}}$. Such a BDD is called ‚Äòordered‚Äô if different variables appear in the same order on all paths from the root. A BDD is said to be ‚Äò<strong>reduced</strong>‚Äò if the following two rules have been applied to its graph:</p><ul><li>Merge any isomorphic subgraphs.</li><li>Eliminate any node whose two children are isomorphic.</li></ul></blockquote><ul><li>In the figures below, <strong>dotted</strong> lines represent edges to a <strong>low</strong> child, while <strong>solid</strong> lines represent edges to a <strong>high</strong> child.<ul><li>For function ${\displaystyle f(x1,x2,x3)}$, to find ${\displaystyle f(0,1,1)}$, begin at x1, traverse down the dotted line to x2 (since x1 has an assignment to 0), then down two solid lines (since x2 and x3 each have an assignment to one). This leads to the terminal 1, which is the value of ${\displaystyle f(0,1,1)}$</li></ul></li><li>The <strong>binary decision tree</strong> of the left figure can be transformed into a <strong>binary decision diagram</strong> by maximally reducing it according to the two reduction rules. The resulting BDD is shown in the right figure.</li></ul><center><img loading="lazy" src="/posts/cf619a86/22.png" width="550"></center>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Verification is routinely used when developing computer hardware and concurrent programs. A sequential program can always be tested and retested, but the nondeterministic nature of hardware and concurrent programs limits the effectiveness of testing as a method to demonstrate that the system is correct. Slight variations in timing, perhaps caused by congestion on a network, mean that two executions of the same program might give different results. Even if a bug is found by testing and then fixed, we have no way of knowing if the next test runs correctly because we fixed the bug or because the execution followed a different scenario, one in which the bug cannot occur.&lt;/p&gt;
&lt;p&gt;Âú®ÂºÄÂèëËÆ°ÁÆóÊú∫Á°¨‰ª∂ÂíåÂπ∂ÂèëÁ®ãÂ∫èÊó∂ÔºåÁªèÂ∏∏‰ºöÁî®Âà∞È™åËØÅ„ÄÇ‰∏Ä‰∏™È°∫Â∫èÁ®ãÂ∫èÊÄªÊòØÂèØ‰ª•Ë¢´ÊµãËØïÂíåÈáçÊñ∞ÊµãËØïÔºå‰ΩÜÁ°¨‰ª∂ÂíåÂπ∂ÂèëÁ®ãÂ∫èÁöÑÈùûÁ°ÆÂÆöÊÄßÈôêÂà∂‰∫ÜÊµãËØï‰Ωú‰∏∫ËØÅÊòéÁ≥ªÁªüÊ≠£Á°ÆÁöÑÊñπÊ≥ïÁöÑÊúâÊïàÊÄß„ÄÇ&lt;strong&gt;Êó∂Èó¥‰∏äÁöÑÂæÆÂ∞èÂèòÂåñÔºå‰πüËÆ∏ÊòØÁî±ÁΩëÁªú‰∏äÁöÑÊã•Â†µÈÄ†ÊàêÁöÑÔºåÊÑèÂë≥ÁùÄÂêå‰∏Ä‰∏™Á®ãÂ∫èÁöÑ‰∏§Ê¨°ÊâßË°åÂèØËÉΩ‰ºöÂæóÂà∞‰∏çÂêåÁöÑÁªìÊûú„ÄÇÂç≥‰ΩøÈÄöËøáÊµãËØïÂèëÁé∞‰∫Ü‰∏Ä‰∏™ÈîôËØØÔºåÁÑ∂ÂêéËøõË°å‰∫Ü‰øÆÂ§çÔºåÊàë‰ª¨‰πüÊ≤°ÊúâÂäûÊ≥ïÁü•ÈÅì‰∏ã‰∏ÄÊ¨°ÊµãËØïÁöÑÊ≠£Á°ÆËøêË°åÊòØÂõ†‰∏∫Êàë‰ª¨‰øÆÂ§ç‰∫ÜËøô‰∏™ÈîôËØØÔºåËøòÊòØÂõ†‰∏∫ÊâßË°å‰∫Ü‰∏Ä‰∏™‰∏çÂêåÁöÑÂú∫ÊôØÔºåÂú®Ëøô‰∏™Âú∫ÊôØ‰∏≠ÔºåËøô‰∏™ÈîôËØØ‰∏ç‰ºöÂèëÁîü&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;È°∫Â∫èÁ®ãÂ∫èÁöÑÈ™åËØÅË≤å‰ººÊ≤°ÊúâÁî®Âà∞Êó∂ÊÄÅÈÄªËæë&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Concurrent-Program-Âπ∂ÂèëÁ®ãÂ∫è&quot;&gt;1. Concurrent Program Âπ∂ÂèëÁ®ãÂ∫è&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;concurrent program&lt;/strong&gt; is a set of &lt;strong&gt;sequential programs&lt;/strong&gt; together with a set of &lt;strong&gt;global variables&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A concurrent program is a set of &lt;code&gt;processes&lt;/code&gt; ${ p_1,p_2,‚Ä¶,p_n }$, where each &lt;strong&gt;process&lt;/strong&gt; is a &lt;strong&gt;sequential program&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Processes&lt;/strong&gt; are also known as &lt;strong&gt;threads&lt;/strong&gt;; in some contexts, the two terms have different meanings but the difference is not relevant here&lt;ul&gt;
&lt;li&gt;ËøõÁ®ã‰∏éÁ∫øÁ®ãÂú®Ê≠§Â§ÑÊó†ÈúÄÂå∫Âà´&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The variables declared in each process are its &lt;code&gt;local variables&lt;/code&gt;; a local variable can be read and written only by the process where it is declared.&lt;/li&gt;
&lt;li&gt;There may be &lt;code&gt;global variables&lt;/code&gt; that can be read and written by all of the processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;state-Áä∂ÊÄÅ&quot;&gt;1.1. state Áä∂ÊÄÅ&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The state of a concurrent programs consists of &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;the values of its variables&lt;/strong&gt; (both local and global),&lt;/li&gt;
&lt;li&gt;together with the &lt;strong&gt;location counters&lt;/strong&gt; of its processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/cf619a86/2.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/cf619a86/3.gif&quot; width=&quot;350&quot;&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;There are $5√ó3√ó3&amp;#x3D;45$ different states, because the variable n can have the values $0, 1, 2, 3, 4$ and there are &lt;strong&gt;three&lt;/strong&gt; labels for &lt;strong&gt;each&lt;/strong&gt; process. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These seems like quite a large number of states for such a simple program, but many of the states (for example, (0,end,end)) will never occur in any computation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>ËÆ°ÁÆóÊú∫Êï∞ÁêÜÈÄªËæë-Á®ãÂ∫èÈ™åËØÅ-È°∫Â∫èÁ®ãÂ∫è</title>
    <link href="https://hejueyun.github.io/posts/ab706956/"/>
    <id>https://hejueyun.github.io/posts/ab706956/</id>
    <published>2022-02-23T01:15:14.000Z</published>
    <updated>2022-03-28T19:38:48.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Program">1. Program</h2><blockquote><p>A <strong>computer program</strong> is not very different from a logical formula. It consists of a sequence of <strong>symbols</strong> constructed according to <strong>formal syntactical rules</strong> and it has a meaning which is assigned by an <strong>interpretation</strong> of the elements of the language. In programming, the symbols are called <strong>statements or commands</strong> and the intended interpretation is the <strong>execution</strong> of the program on a computer. The syntax of programming languages is specified using formal systems such as BNF, but the semantics is usually informally specified.</p><p>‰∏Ä‰∏™ËÆ°ÁÆóÊú∫Á®ãÂ∫è‰∏é‰∏Ä‰∏™ÈÄªËæëÂÖ¨ÂºèÊ≤°Êúâ‰ªÄ‰πà‰∏çÂêå„ÄÇÂÆÉÁî±‰∏ÄËøû‰∏≤ÁöÑÁ¨¶Âè∑ÁªÑÊàêÔºåËøô‰∫õÁ¨¶Âè∑ÊòØÊ†πÊçÆÊ≠£ÂºèÁöÑÂè•Ê≥ïËßÑÂàôÊûÑÂª∫ÁöÑÔºåÂÆÉÊúâ‰∏Ä‰∏™ÊÑè‰πâÔºåËøô‰∏™ÊÑè‰πâÊòØÈÄöËøáÂØπËØ≠Ë®ÄÂÖÉÁ¥†ÁöÑËß£ÈáäËÄåËµã‰∫àÁöÑ„ÄÇÂú®ÁºñÁ®ã‰∏≠ÔºåËøô‰∫õÁ¨¶Âè∑Ë¢´Áß∞‰∏∫ËØ≠Âè•ÊàñÂëΩ‰ª§ÔºåÈ¢ÑÊúüÁöÑËß£ÈáäÊòØÁ®ãÂ∫èÂú®ËÆ°ÁÆóÊú∫‰∏äÁöÑÊâßË°å„ÄÇ<strong>ÁºñÁ®ãËØ≠Ë®ÄÁöÑËØ≠Ê≥ïÊòØÁî®BNFËøôÊ†∑ÁöÑÂΩ¢ÂºèÂåñÁ≥ªÁªüÊåáÂÆöÁöÑÔºå‰ΩÜËØ≠‰πâÈÄöÂ∏∏ÊòØÈùûÊ≠£ÂºèÂú∞ÊåáÂÆöÁöÑ</strong></p></blockquote><h3 id="ËÄÉËôë‰∏ÄÈó®ËØ≠Ë®ÄÁöÑËÆæËÆ°">1.1. ËÄÉËôë‰∏ÄÈó®ËØ≠Ë®ÄÁöÑËÆæËÆ°</h3><ul><li>A program is a <strong>statement</strong> S, where statements are defined recursively using the concepts of variables and expressions<ul><li>Á®ãÂ∫èÊú¨Ë∫´Â∞±ÊòØ‰∏Ä‰∏™ÊäΩË±°ÁöÑÂ§ßstatement</li></ul></li></ul><center><img loading="lazy" src="/posts/ab706956/6.gif" width="550"></center><ul><li>A <strong>statement</strong> in a programming language can be considered to be a function that transforms the state of a computation<ul><li>ÁºñÁ®ãËØ≠Ë®ÄÂèØ‰ª•Ë¢´ËßÜ‰ΩúÁä∂ÊÄÅËΩ¨Êç¢ÂáΩÊï∞</li></ul></li></ul><blockquote><p>Let $S$ be a <strong>program</strong> with $n$ <strong>variables</strong> $(x1,‚Ä¶,xn)$. A <strong>state</strong> $s$ of $S$ consists of an $n+1$-tuple of values $(lc,x_1,‚Ä¶,x_n )$, where $lc$ is the value of the <strong>location counter</strong>(sometimes called the <strong>instruction pointer</strong>ÔºåÂ≠òÂÇ®‰∏ã‰∏Ä‰∏™Êåá‰ª§ÁöÑÂú∞ÂùÄ)  and $x_i$ is the value of the variable $xi$.</p></blockquote><ul><li><strong>we aim to verify the program by proving: if the input to the program satisfies the precondition, then the output of the program will satisfy the postcondition</strong></li></ul><p><strong>example</strong></p><ul><li>If the variables (x,y) have the values (8,7) in a state, then the result of executing the statement x &#x3D; 2*y+1 is the state in which (x,y)&#x3D;(15,7) and the location counter is incremented</li></ul><h2 id="Correctness-Formulas">2. Correctness Formulas</h2><ul><li><p>A <strong>correctness formula</strong> is a triple ${ p } S { q }$ , where $S$ is a program, and $p$ and $q$ are formulas called the precondition and postcondition, respectively. S is <strong>partially correct</strong> with respect to p and qÔºå$‚äß { p } S { q }$,iff</p><ul><li>If $S$ is started in a state where $p$ is true and if the computation of $S$ terminates, then it terminates in a state where $q$ is true</li></ul></li><li><p>correctness formulas also call <strong>inductive expressions</strong></p></li></ul><center><img loading="lazy" src="/posts/ab706956/1.gif" width="550"></center><blockquote><p>Âè™Ë¶Å P Âú® C ÊâßË°åÂâçÁöÑÁä∂ÊÄÅ‰∏ãÊàêÁ´ãÔºåÂàôÂú®ÊâßË°å‰πãÂêé Q ‰πüÊàêÁ´ã„ÄÇÊ≥®ÊÑèÂ¶ÇÊûú C ‰∏çÁªàÊ≠¢Ôºå‰πüÂ∞±Ê≤°Êúâ‚Äù‰πãÂêé‚Äù‰∫ÜÔºåÊâÄ‰ª• Q Âú®Ê†πÊú¨‰∏äÂèØ‰ª•ÊòØ‰ªª‰ΩïËØ≠Âè•„ÄÇÂÆûÈôÖ‰∏äÔºå‰Ω†ÂèØ‰ª•ÈÄâÊã© Q ‰∏∫ÂÅáÊù•Ë°®Ëææ C ‰∏çÁªàÊ≠¢„ÄÇ‰∫ãÂÆû‰∏äÔºåËøôÁßçÊÉÖÂΩ¢Âè´ÂÅö ‚ÄúÈÉ®ÂàÜÊ≠£Á°ÆÔºàpartial correctnessÔºâ‚Äù„ÄÇÂ¶ÇÊûú C ÁªàÊ≠¢Âπ∂‰∏îÂú®ÁªàÊ≠¢Êó∂ Q ÊòØÁúüÔºåÂàôË°®ËææÂºèË¢´Áß∞‰Ωú ‚ÄúÂÖ®ÈÉ®Ê≠£Á°ÆÊÄßÔºàtotal correctnessÔºâ‚Äù„ÄÇÁªàÊ≠¢ÂøÖÈ°ªË¢´ÂçïÁã¨ËØÅÊòé„ÄÇ</p></blockquote><p><strong>example</strong></p><center><img loading="lazy" src="/posts/ab706956/7.png" width="550"></center><h3 id="characteristic-predicate">2.1. characteristic predicate</h3><blockquote><p>Let U be the set of all n-tuples of values over some domain(s), and let U‚Ä≤‚äÜU be a <strong>relation</strong> over U. The n-ary predicat $P_{U‚Ä≤}$ is the <strong>characteristic predicate</strong>ÁâπÂæÅË∞ìËØç of U‚Ä≤ if it is interpreted over the domain U by the relation U‚Ä≤. That is, $v(P_{U‚Ä≤}($x_1$,‚Ä¶,$x_n$))&#x3D;T iff ($x_1$,‚Ä¶,$x_n$)‚ààU‚Ä≤$.</p></blockquote><ul><li>We can write {(x 1,‚Ä¶,x n )‚à£(x 1,‚Ä¶,x n )‚ààU‚Ä≤} as {(x 1,‚Ä¶,x n )‚à£ $P_{U‚Ä≤}$ }</li><li>Âç≥ÔºöÂ¶ÇÊûúÂèòÈáèÈÉΩÂú®domain‰∏äÔºåÂàô‰∏∫T</li></ul><h3 id="semantics-of-programming-language">2.2. semantics of programming language</h3><ul><li>ÁºñÁ®ãËØ≠Ë®ÄÁöÑ<strong>ËØ≠‰πâ</strong>ÊòØÈÄöËøáÊåáÂÆöËØ≠Ë®Ä‰∏≠ÁöÑÊØè‰∏™ËØ≠Âè•Â¶Ç‰ΩïÂ∞Ü‰∏ÄÁßçÁä∂ÊÄÅËΩ¨Âåñ‰∏∫Âè¶‰∏ÄÁßçÁä∂ÊÄÅËÄåÁªôÂá∫ÁöÑ</li></ul><p><strong>example</strong></p><ul><li>Let S be the statement x &#x3D; 2*y+1. <ul><li>If started in an arbitrary state (x,y), the statement terminates in the state (x‚Ä≤,y‚Ä≤) where x‚Ä≤&#x3D;2y‚Ä≤+1. </li><li>Another way of expressing this is to say that S transforms the set of states {(x,y)‚à£true} into the set {(x,y)‚à£x&#x3D;2y+1}.</li><li>The statement S also transforms the set of states {(x,y)‚à£y‚â§3} into the set {(x,y)‚à£(x‚â§7)‚àß(y‚â§3)}, because if y‚â§3 then 2y+1‚â§7</li></ul></li></ul><h2 id="Deductive-System-HL-ÈúçÂ∞îÈÄªËæë">3. Deductive System HL ÈúçÂ∞îÈÄªËæë</h2><ul><li>Instead, we will simply take all true formulas in the domain as axioms. For example, (x‚â•y)‚Üí(x+1‚â•y+1) is true in arithmetic and will be used as an axiom. This is reasonable since we wish to concentrate on the verification that a program S is correct without the complication of verifying arithmetic formulas that are well known.</li></ul><center><img loading="lazy" src="/posts/ab706956/2.png" width="550"></center><p>example</p><center><img loading="lazy" src="/posts/ab706956/3.png" width="550"></center><ul><li>The formula p in the loop rule is called an <strong>invariant</strong>‰∏çÂèòÈáè: it describes the behavior of a single execution of the statement S in the body of the while-statement.</li><li>ÊÑüËßâÊúâÁÇπÁ±ª‰ººsed</li></ul><h2 id="Program-Verification">4. Program Verification</h2><center><img loading="lazy" src="/posts/ab706956/8.png" width="650"></center>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Program&quot;&gt;1. Program&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;computer program&lt;/strong&gt; is not very different from a logical formula. It consists of a sequence of &lt;strong&gt;symbols&lt;/strong&gt; constructed according to &lt;strong&gt;formal syntactical rules&lt;/strong&gt; and it has a meaning which is assigned by an &lt;strong&gt;interpretation&lt;/strong&gt; of the elements of the language. In programming, the symbols are called &lt;strong&gt;statements or commands&lt;/strong&gt; and the intended interpretation is the &lt;strong&gt;execution&lt;/strong&gt; of the program on a computer. The syntax of programming languages is specified using formal systems such as BNF, but the semantics is usually informally specified.&lt;/p&gt;
&lt;p&gt;‰∏Ä‰∏™ËÆ°ÁÆóÊú∫Á®ãÂ∫è‰∏é‰∏Ä‰∏™ÈÄªËæëÂÖ¨ÂºèÊ≤°Êúâ‰ªÄ‰πà‰∏çÂêå„ÄÇÂÆÉÁî±‰∏ÄËøû‰∏≤ÁöÑÁ¨¶Âè∑ÁªÑÊàêÔºåËøô‰∫õÁ¨¶Âè∑ÊòØÊ†πÊçÆÊ≠£ÂºèÁöÑÂè•Ê≥ïËßÑÂàôÊûÑÂª∫ÁöÑÔºåÂÆÉÊúâ‰∏Ä‰∏™ÊÑè‰πâÔºåËøô‰∏™ÊÑè‰πâÊòØÈÄöËøáÂØπËØ≠Ë®ÄÂÖÉÁ¥†ÁöÑËß£ÈáäËÄåËµã‰∫àÁöÑ„ÄÇÂú®ÁºñÁ®ã‰∏≠ÔºåËøô‰∫õÁ¨¶Âè∑Ë¢´Áß∞‰∏∫ËØ≠Âè•ÊàñÂëΩ‰ª§ÔºåÈ¢ÑÊúüÁöÑËß£ÈáäÊòØÁ®ãÂ∫èÂú®ËÆ°ÁÆóÊú∫‰∏äÁöÑÊâßË°å„ÄÇ&lt;strong&gt;ÁºñÁ®ãËØ≠Ë®ÄÁöÑËØ≠Ê≥ïÊòØÁî®BNFËøôÊ†∑ÁöÑÂΩ¢ÂºèÂåñÁ≥ªÁªüÊåáÂÆöÁöÑÔºå‰ΩÜËØ≠‰πâÈÄöÂ∏∏ÊòØÈùûÊ≠£ÂºèÂú∞ÊåáÂÆöÁöÑ&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ËÄÉËôë‰∏ÄÈó®ËØ≠Ë®ÄÁöÑËÆæËÆ°&quot;&gt;1.1. ËÄÉËôë‰∏ÄÈó®ËØ≠Ë®ÄÁöÑËÆæËÆ°&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A program is a &lt;strong&gt;statement&lt;/strong&gt; S, where statements are defined recursively using the concepts of variables and expressions&lt;ul&gt;
&lt;li&gt;Á®ãÂ∫èÊú¨Ë∫´Â∞±ÊòØ‰∏Ä‰∏™ÊäΩË±°ÁöÑÂ§ßstatement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ab706956/6.gif&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;statement&lt;/strong&gt; in a programming language can be considered to be a function that transforms the state of a computation&lt;ul&gt;
&lt;li&gt;ÁºñÁ®ãËØ≠Ë®ÄÂèØ‰ª•Ë¢´ËßÜ‰ΩúÁä∂ÊÄÅËΩ¨Êç¢ÂáΩÊï∞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Let $S$ be a &lt;strong&gt;program&lt;/strong&gt; with $n$ &lt;strong&gt;variables&lt;/strong&gt; $(x1,‚Ä¶,xn)$. A &lt;strong&gt;state&lt;/strong&gt; $s$ of $S$ consists of an $n+1$-tuple of values $(lc,x_1,‚Ä¶,x_n )$, where $lc$ is the value of the &lt;strong&gt;location counter&lt;/strong&gt;(sometimes called the &lt;strong&gt;instruction pointer&lt;/strong&gt;ÔºåÂ≠òÂÇ®‰∏ã‰∏Ä‰∏™Êåá‰ª§ÁöÑÂú∞ÂùÄ)  and $x_i$ is the value of the variable $xi$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;we aim to verify the program by proving: if the input to the program satisfies the precondition, then the output of the program will satisfy the postcondition&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;example&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the variables (x,y) have the values (8,7) in a state, then the result of executing the statement x &amp;#x3D; 2*y+1 is the state in which (x,y)&amp;#x3D;(15,7) and the location counter is incremented&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Security" scheme="https://hejueyun.github.io/categories/Security/"/>
    
    <category term="Automated Reasoning" scheme="https://hejueyun.github.io/categories/Security/Automated-Reasoning/"/>
    
    
    <category term="sec" scheme="https://hejueyun.github.io/tags/sec/"/>
    
  </entry>
  
  <entry>
    <title>academic writing-Literature Review</title>
    <link href="https://hejueyun.github.io/posts/dd5e4fc6/"/>
    <id>https://hejueyun.github.io/posts/dd5e4fc6/</id>
    <published>2022-02-22T22:23:20.000Z</published>
    <updated>2022-02-22T23:51:14.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-literature">1. What is literature</h2><ul><li>Published written works (publications)</li><li>Unpublished written works</li></ul><h2 id="Why-literature-review">2. Why literature review</h2><ul><li>First step of research</li><li>Help you obtain background knowledge</li><li>Identify related work to yours</li><li>Understand <strong>the state of the art</strong>Â∞ñÁ´ØÊäÄÊúØ in your project area</li><li>To frame your arguments and research questions based on the state-of-the-art</li><li>Identify knowledge gaps or limitations in your project area</li></ul><h2 id="Where-to-find-publications">3. Where to find publications</h2><ol><li>ACM Digital Library (<a href="https://dl.acm.org/">https://dl.acm.org/</a>) hosts ACM Journals and ACM Conference Proceedings</li><li>IEEE Xplore (<a href="https://ieeexplore.ieee.org/">https://ieeexplore.ieee.org/</a>) hosts IEEE Journals and IEEE Conference Proceedings</li><li>SpringerLink (<a href="https://link.springer.com/">https://link.springer.com/</a>) hosts Springer Journals (including Nature) and Springer Conference Proceedings</li><li>ScienceDirect (<a href="https://www.sciencedirect.com/">https://www.sciencedirect.com/</a>) hosts Elsevier Journals and e-books</li><li>Wiley Online Library (<a href="https://onlinelibrary.wiley.com/">https://onlinelibrary.wiley.com/</a>) hosts Wiley Journals and e-books</li><li>Google Scholar (<a href="https://scholar.google.com/">https://scholar.google.com/</a>) ‚Äì Web search engine for scholarly literature</li></ol><h2 id="How-to-do-literature-review">4. How to do literature review</h2><ul><li>Systematic literature review (SLR) methods<ul><li>Traditional SLR</li><li>Snowballing</li></ul></li></ul><h3 id="Traditional-SLR">4.1. Traditional SLR</h3><ul><li>‰ΩøÁî®Áî±‰∏ÄÁªÑÂÖ≥ÈîÆËØçÁªÑÊàêÁöÑÊêúÁ¥¢Â≠óÁ¨¶‰∏≤</li><li>ÂØπÊØè‰∏Ä‰∏™Â∑≤Áü•ÁöÑÊï∞Â≠óÂõæ‰π¶È¶ÜËøõË°åËØ¶Â∞ΩÁöÑÊêúÁ¥¢</li><li>Êó®Âú®ÈÄâÊã©ÊâÄÊúâÁõ∏ÂÖ≥ÁöÑËÆ∫Êñá</li><li>ËÄóË¥πÊó∂Èó¥ÔºåËÄå‰∏î‰Ωú‰∏∫‰∏™‰∫∫ÂæàÈöæÂÅöÂà∞Ëøô‰∏ÄÁÇπ</li></ul><h3 id="Snowballing">4.2. Snowballing</h3><center><img loading="lazy" src="/posts/dd5e4fc6/1.png" width="550"></center><ol><li>Identify the start set<ol><li>Ask your supervisor to suggest 3-5 good quality, relevant papers</li><li>Add 3-5 top cited and relevant papers from Google Scholar search</li></ol></li><li>Perform backward snowballing<ol><li>Go through the <strong>reference list</strong> of each paper in the start set to identify new papers to include</li><li>Exclude papers that do not fulfil the basic criteria such as, for example, language, publication year and type of publication</li><li>Remove papers from the list that have already been examined in the earlier iteration</li><li>Add the remaining papers to the start set</li><li>Repeat from step1 Â∞ÜÂâ©‰ΩôÁöÑËÆ∫ÊñáÊ∑ªÂä†Âà∞Ëµ∑ÂßãÈõÜ</li><li>End if you have gone through the reference list of all the papers in the start set</li></ol></li><li>Perform <strong>forward</strong> snowballing<ol><li>For each paper in the start set, identify the papers that cite this paper using Google Scholar ‰ΩøÁî®Ë∞∑Ê≠åÂ≠¶ÊúØÊâæÂá∫<strong>ÂºïÁî®ËØ•ËÆ∫Êñá</strong>ÁöÑËÆ∫Êñá</li><li>For each citing paper that is not in the start set, download it from its DL, read, in the order of: 1) abstract, 2) introduction, 3) conclusion or 4) full text to see if it‚Äôs relevant to your project</li><li>Repeat from step 1 until you have gone through all the papers in the start set</li></ol></li><li>Iterations<ol><li>Repeat backward snowballing at least once</li><li>Repeat forward snowballing at least once</li><li>Iterate from forward snowballing to backward, to ensure a comprehensive inclusion of good quality, relevant papers</li><li>The results of iterations are the set of the papers for detailed review and <strong>to be included in your dissertation report</strong>.</li></ol></li><li>Manage your references<ol><li>EndNote - for Word</li><li>BibTex - for Overleaf</li><li><strong>Citation and reference styles</strong><ol><li>Numbering system (IEEE style)</li><li>Author and Date system (Harvard style)</li></ol></li></ol></li></ol><h2 id="Critical-tasks-in-literature-review">5. Critical tasks in literature review</h2><p>When reading each reference, you need to systematically perform the following tasks:</p><ul><li>Data extraction Êï∞ÊçÆÊèêÂèñ: Extract useful information (data) from each reference</li><li>Data synthesis Êï∞ÊçÆÁªºÂêà: Organize the extracted data into categories and subcategories</li><li>Data analysis Êï∞ÊçÆÂàÜÊûê: Interpret the data to make sense of them through:<ul><li>Quantitative analysis ÂÆöÈáèÂàÜÊûê: use statistics and frequency counts to analyse the data</li><li>Qualitative analysis ÂÆöÊÄßÂàÜÊûê: use descriptions to interpret the data</li><li>Visualisation ÂèØËßÜÂåñ: use tables, charts, graphs to represent the data</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;What-is-literature&quot;&gt;1. What is literature&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Published written works (publications)&lt;/li&gt;
&lt;li&gt;Unpublished written works&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-literature-review&quot;&gt;2. Why literature review&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;First step of research&lt;/li&gt;
&lt;li&gt;Help you obtain background knowledge&lt;/li&gt;
&lt;li&gt;Identify related work to yours&lt;/li&gt;
&lt;li&gt;Understand &lt;strong&gt;the state of the art&lt;/strong&gt;Â∞ñÁ´ØÊäÄÊúØ in your project area&lt;/li&gt;
&lt;li&gt;To frame your arguments and research questions based on the state-of-the-art&lt;/li&gt;
&lt;li&gt;Identify knowledge gaps or limitations in your project area&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Where-to-find-publications&quot;&gt;3. Where to find publications&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ACM Digital Library (&lt;a href=&quot;https://dl.acm.org/&quot;&gt;https://dl.acm.org/&lt;/a&gt;) hosts ACM Journals and ACM Conference Proceedings&lt;/li&gt;
&lt;li&gt;IEEE Xplore (&lt;a href=&quot;https://ieeexplore.ieee.org/&quot;&gt;https://ieeexplore.ieee.org/&lt;/a&gt;) hosts IEEE Journals and IEEE Conference Proceedings&lt;/li&gt;
&lt;li&gt;SpringerLink (&lt;a href=&quot;https://link.springer.com/&quot;&gt;https://link.springer.com/&lt;/a&gt;) hosts Springer Journals (including Nature) and Springer Conference Proceedings&lt;/li&gt;
&lt;li&gt;ScienceDirect (&lt;a href=&quot;https://www.sciencedirect.com/&quot;&gt;https://www.sciencedirect.com/&lt;/a&gt;) hosts Elsevier Journals and e-books&lt;/li&gt;
&lt;li&gt;Wiley Online Library (&lt;a href=&quot;https://onlinelibrary.wiley.com/&quot;&gt;https://onlinelibrary.wiley.com/&lt;/a&gt;) hosts Wiley Journals and e-books&lt;/li&gt;
&lt;li&gt;Google Scholar (&lt;a href=&quot;https://scholar.google.com/&quot;&gt;https://scholar.google.com/&lt;/a&gt;) ‚Äì Web search engine for scholarly literature&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;How-to-do-literature-review&quot;&gt;4. How to do literature review&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Systematic literature review (SLR) methods&lt;ul&gt;
&lt;li&gt;Traditional SLR&lt;/li&gt;
&lt;li&gt;Snowballing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Traditional-SLR&quot;&gt;4.1. Traditional SLR&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;‰ΩøÁî®Áî±‰∏ÄÁªÑÂÖ≥ÈîÆËØçÁªÑÊàêÁöÑÊêúÁ¥¢Â≠óÁ¨¶‰∏≤&lt;/li&gt;
&lt;li&gt;ÂØπÊØè‰∏Ä‰∏™Â∑≤Áü•ÁöÑÊï∞Â≠óÂõæ‰π¶È¶ÜËøõË°åËØ¶Â∞ΩÁöÑÊêúÁ¥¢&lt;/li&gt;
&lt;li&gt;Êó®Âú®ÈÄâÊã©ÊâÄÊúâÁõ∏ÂÖ≥ÁöÑËÆ∫Êñá&lt;/li&gt;
&lt;li&gt;ËÄóË¥πÊó∂Èó¥ÔºåËÄå‰∏î‰Ωú‰∏∫‰∏™‰∫∫ÂæàÈöæÂÅöÂà∞Ëøô‰∏ÄÁÇπ&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Note" scheme="https://hejueyun.github.io/tags/Note/"/>
    
  </entry>
  
</feed>
