<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>烏巢</title>
    <link>https://hejueyun.github.io/</link>
    
    <image>
      <url>https://hejueyun.github.io/icon.png</url>
      <title>烏巢</title>
      <link>https://hejueyun.github.io/</link>
    </image>
    
    <atom:link href="https://hejueyun.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 17 May 2022 21:30:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Detection of Software Vulnerabilities: Static Analysis</title>
      <link>https://hejueyun.github.io/posts/536aff33/</link>
      <guid>https://hejueyun.github.io/posts/536aff33/</guid>
      <pubDate>Thu, 05 May 2022 12:30:25 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Verification-vs-Validation&quot;&gt;1. Verification vs Validation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Verification: “Are we building the product right?” </description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Verification-vs-Validation">1. Verification vs Validation</h2><ul><li>Verification: “Are we building the product right?”  <ul><li>The software should conform to its specification</li></ul></li><li>Validation: “Are we building the right product?” <ul><li>The software should do what the user requires</li></ul></li><li>Verification and validation must be applied at each stage in the software process</li></ul><h2 id="Static-and-Dynamic-Verification">2. Static and Dynamic Verification</h2><p>static verification</p><ul><li>aka Software inspections</li><li>Code analysis can prove the absence of errors but might subject to incorrect results</li></ul><p>dynamic verification</p><ul><li>aka Software testing</li><li>The system is executed with test data</li><li>Operational behaviour is observed</li></ul><center><img loading="lazy" src="/posts/536aff33/1.png" width="600"></center><h3 id="The-V-model-of-development">2.1. The V-model of development</h3><center><img loading="lazy" src="/posts/536aff33/2.png" width="600"></center><h2 id="Detection-of-Vulnerabilities">3. Detection of Vulnerabilities</h2><ul><li><p>Detect the presence of vulnerabilities in the code during the development, testing, and maintenance</p></li><li><p>Trade-off between <strong>soundness</strong> and <strong>completeness</strong></p><ul><li>Achieving <strong>soundness</strong> requires reasoning about all executions of a program<ul><li>This can be done by static checking of the program code while making suitable abstractions of the executions</li></ul></li><li>Achieving <strong>completeness</strong> can be done by performing actual, concrete executions of a program that are witnesses to any vulnerability reported<ul><li>The analysis technique has to come up with concrete inputs for the program that triggers a vulnerability</li><li>A typical dynamic approach is software testing: the tester writes test cases with concrete inputs and specific checks for the outputs</li></ul></li></ul></li><li><p>Detection tools can use a <strong>hybrid混合 combination of static and dynamic analysis techniques</strong> to achieve a good trade-off between soundness and completeness</p></li><li><p><strong>Dynamic verification</strong> should be used in conjunction with <strong>static verification</strong> to provide <strong>full code coverage</strong></p></li></ul><h2 id="difference-among-static-analysis-testing-x2F-simulation-and-debugging">4. difference among static analysis, testing &#x2F; simulation, and debugging</h2><center><img loading="lazy" src="/posts/536aff33/3.jpg" width="600"></center><ul><li>Simulation<ul><li>Checks only <strong>some</strong> of the system executions, thus may miss errors</li></ul></li><li>Static analysis (BMC) <ul><li>Exhaustively explores <strong>all</strong> executions</li><li>Report errors as <strong>traces</strong></li><li>May produce <strong>incorrect results</strong></li></ul></li></ul><h3 id="Avoiding-state-space-explosion">4.1. Avoiding state space explosion</h3><ul><li>Bounded Model Checking (BMC)<ul><li>Breadth-first search (BFS) approach 广度优先</li></ul></li><li>Symbolic Execution<ul><li>Depth-first search (DFS) approach 深度优先</li></ul></li></ul><h3 id="V-amp-V-vs-debugging">4.2. V&amp;V vs debugging</h3><ul><li>V &amp; V is concerned with establishing the absence or existence of defects in a program, resp.</li><li>Debugging is concerned with two main tasks <ul><li>Locating</li><li>Repairing these errors</li></ul></li><li>Debugging involves <ul><li>Formulating a hypothesis about program behaviour </li><li>Test these hypotheses to find the system error</li></ul></li></ul><center><img loading="lazy" src="/posts/536aff33/4.png" width="600"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Software-Security/">Software Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/536aff33/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Fuzzing A Software Verifier - POP</title>
      <link>https://hejueyun.github.io/posts/a0a87206/</link>
      <guid>https://hejueyun.github.io/posts/a0a87206/</guid>
      <pubDate>Mon, 02 May 2022 15:11:23 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;p&gt;The complexity of manually and dynamic testing increases with the growth of the project. This</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Introduction">1. Introduction</h2><p>The complexity of manually and dynamic testing increases with the growth of the project. This results in the increasing usage of static analysis tools, such as bounded model checker, which do not require compilation and act automatically [1]. As an SMT-based model checker for program static analysis and verification, ESBMC has been successfully used in a variety of environments due to its adaptability to multi-language, multi-platform and high efficiency[2]. However, these features have led to the difficulty of fuzzing this software verifier. Firstly, the construction of a generation-based fuzzer for ESBMC is a challenge. The adaptability for multiple source programming languages means that the fuzzer needs to consider certain source language’s grammar, in the worst case, constructing different inputs for corresponding front-ends. Secondly, the construction of a coverage-guided mutation-based fuzzer is a challenge, as directly generated random input cannot be “understood” by ESBMC and will be excluded beyond validating. These deficiencies will result in fuzzy tests that do not detect errors hidden in the deep execution path of the program and insufficient code coverage. Hence, we propose a fuzzer construction on intermediate representation, which refers to Goto programs. Instead of converting from the source file, this generic fuzzer would generate syntactically correct Goto programs directly. The introduction of mutation will further dynamically modify the properties in the Goto programs by tracking and updating the corpus. These Goto programs will finally be used as input to fuzz test the ESBMC.</p><p>The achievement of this goal can be divided into the following steps: (1) Summarise the syntax grammar for constructing Goto intermediate representation, including the symbol table and Goto instructions, i.e. each statement in the Goto program, as well as the Goto programs itself. (2) Investigate a mutation approach for the generated Goto programs, which will be achieved by introducing libFuzzer[3]. (3) Design and implement the program architecture of the Goto-fuzzer. (4) Debugging and testing, including error detection and performance testing. (5) Fuzz the ESBMC by Goto-fuzzer. Collect the error logs and coverage information.(6) Analyse the data and draw conclusions.</p><h2 id="Background">2. Background</h2><h3 id="ESBMC">2.1. ESBMC</h3><p>ESBMC is a licensed open-source SMT-based contextual boundary model checker that has been widely used to verify multi-language programs, including C&#x2F;C++, Java and Solidity. ESBMC can automatically find memory safety and assertion violations[4]. The basic workflow of this bounded model checker begins with a transition system $M$, a property $φ$, and a bound $k$. ESBMC unwinds the system $k$ times and converts it into a verification condition (VC) $ψ$. ESBMC checks the negation of this VC so that $ψ$ is satisfiable if and only if $φ$ has a counterexample of depth $k$ or less. To cope with increasing software complexity, sorts of SMT (Satisfiability Modulo Theories) solvers have been used as the back-end of ESBMC for solving the generated VCs[5].</p><p>From an architectural point of view, ESBMC can be divided into three components: front-end, middleware and back-end. A C++ Oriented ESBMC structure can been shown by Figure 1.</p><center><img loading="lazy" src="/posts/a0a87206/3.svg"></center><center><b>FIGURE 1</b> C++ oriented ESBMC's architecture overview. White rectangles represent input and output; grey rectangles represent the steps of the verification</center><h4 id="Front-end">2.1.1. Front-end</h4><p>Front-end is an important piece of technology that should facilitate the transition between the program under verification and a format the tool can work upon. Despite that several front-ends have been constructed corresponding to different programming languages in ESBMC，the final output will always be a symbol table, an auxiliary data structure storing the meaning and range of variable names. A general front-end framework includes a pre-processor, scanner, parser and type checker. <strong>Pre-processor</strong> handles special operations that will be performed according to the preprocessor instructions, such as replacement or expansion macros [6]. A lexical analysis of the <strong>scanner</strong> and a syntax score of the <strong>parser</strong> resulted in the Abstract Syntax Tree (AST) [7]. To simplify the analysis, ASTs have been converted into a simpler form, called an intermediate representation (IR), by <strong>type checker</strong> in which a symbol table is generated simultaneously. At this point, the source code as input is converted into symbol tables [8].  </p><h4 id="Middleware">2.1.2. Middleware</h4><p>In ESBMC, the generated symbol table enables the middleware to perform further actions, including the conversion from the original program into the equivalent Goto program, an intermediate representation generated from the symbol table, the generation of the single static assignment (SSA) form and the symbolical execution of the program.</p><p><strong>Goto Converter</strong> firstly AST into its Control flow chart form, which refers to Goto programs. These programs are language independent and similar to the intermediate languages of many compilers. Each program is a list of instructions, each of which has the type of instruction (one of 19 instructions), a code expression, a protection expression and possibly some target for the next instruction. An <strong>Instructions Type</strong> is an enum value describing the action performed by this instruction. <strong>Guard</strong> is an (arbitrarily complex) expression (usually an expert) of Boolean type. And <strong>Code</strong> represents a code statement, which can be seen as a unit in the symbol table. The type field determines the meaning of an instruction node, while the guard and code fields are used for a variety of purposes by different types of instructions [9].</p><p><strong>Symbolic Engine</strong> will firstly convert the variables from program text to a single static assignment (SSA) form. New variables are created to identify branch and loop entry conditions. These variables will guard the assignments based on the branch taken [4]. Symbolic execution will be performed after the conversion to perform semantic analysis, including dynamic memory checks (bounds, memory alignment, offset pointer-free, and double-free) and unwinding assertions. The point of this step is to make sure each assignment is independent.[8] </p><h4 id="Back-end">2.1.3. Back-end</h4><p>During this workflow, two sets of SMT formulae are created based on the SSA expressions. We denote $C$ for the constraints and $P$ for the properties. These quantifier-free formulae will be used as input for the SMT solver, a counterexample will be created if there exists a violation of a given property, or an unsatisfiable answer if the property holds [4]. </p><h3 id="Fuzzing">2.2. Fuzzing</h3><p>Fuzz testing (fuzzing) is a software testing technique. The core idea is to feed random data generated automatically into a program by a fuzzer. Traditionally, fuzzers can be classified into two categories based on how they are input, including generation-based fuzzers and coverage-guided mutation-based fuzzers.</p><h4 id="Generation-Based-Fuzzer">2.2.1. Generation-Based Fuzzer</h4><p>A <strong>generation-based</strong> fuzzer construct inputs according to some provided format specification, especially the grammar of a language[11]. One of the good examples of such fuzzers is <strong>Csmith</strong> [10] which is already applied in ESBMC. Csmith works as a generator for C programs. These programs will be fed to the target software, in most cases compilers, run the executables and compare the outputs. In practice, it is used as a stress testing tool to check the stability of ESBMC.</p><h4 id="Mutation-Based-Fuzzer">2.2.2. Mutation-Based Fuzzer</h4><p>A <strong>mutation-based</strong> fuzzer generates inputs by randomly altering analyst-supplied or created seeds.<br>These programmes do not require syntactic definitions and are not limited to a single input type [11]. These coverage-guided fuzzers use coverage information as feedback to alter existing inputs into new ones, attempting to maximise the amount of code covered by the overall input corpus. </p><p><strong>LibFuzzer</strong> is a powerful mutation-based Fuzzer chosen as our research object. LibFuzzer is linked to the library under test and feeds fuzzed inputs to it through a defined fuzzing target function. The fuzzer records which branches of the code were accessed and creates mutations on the corpus of input data to optimise code coverage. LLVM’s SanitizerCoverage instrumentation provides code coverage information for libFuzzer. [3]</p><h4 id="Structure-Aware-Fuzzer">2.2.3. Structure-Aware Fuzzer</h4><p>Both fuzzer types mentioned above are inherently flawed. On one hand, A generation-based fuzzer lacks a coverage-guided trace-feedback mechanism, which leads to possible duplication of the generated test cases. Another common flaw in generation-based testing occurs when the input is required to fulfil sophisticated semantic validity criteria that are not explicitly evaluated by the generator [13]. On the other hand, the presence of checksums in the input format or the complexity of the input format itself can easily trip up a mutation-based fuzzer, as virtually all generated inputs can be invalid for the target data structure.</p><p>We, therefore, consider a <strong>structure-aware</strong> fuzzer proposed by Google [12]. This fuzzer is a combination of the two fuzzing approaches described above: as a generation-based fuzzer in essence, the generator will now accept random value generated by the mutation-based fuzzer as seed. This mutator, in this case, libFuzzer, will mutate and optimise the random bytes by tracking and feedback.</p><h2 id="Research-Methodology">3. Research Methodology</h2><p>This section is originally divided into three subsections, with Section 3.1 discussing the introduction and application of structure-aware fuzzer to ESBMC, after which two approaches are proposed. We will first introduce the first approach in Section 3.2, which uses Csmith as a generator, and then mutates the original program via libFuzzer. We will discuss this method and explain why the second approach was chosen. In Section 3.2, we will t describe the second approach that will be used in development.</p><h3 id="Introduce-Structure-Aware-fuzzer-to-ESBMC">3.1. Introduce Structure-Aware fuzzer to ESBMC</h3><p>First, we need to decide the output form of the fuzzer, in this case, the generator. In theory, the potential object can be any temporary variable passed in the ESBMC workflow. We have chosen the Goto program as the output for several reasons: (1) the Goto program is language-independent, reflected in no dependency on the front-end (2) Goto program is a demarcation between syntax and semantics. As described in Section 2.1.2, symbolic execution represents the input to a program symbolically, based on constraints obtained by analysing the semantics of the program, whilst the semantics in the program will be translated and executed. The correctness of both syntax and semantics is required in and beyond this component, yet previously only the syntax was required. The main goal, therefore, is to create semantically arbitrary, in most cases incorrect, but syntactically correct goto programs.</p><p>Next, we explore how to achieve randomness via mutation. We use structure-aware mutations to look for interesting input structures in the space of valid inputs, which is mirrored in the Goto program’s randomization of the structure between instructions. We also use structure-preserving mutations to create distinct mutations of the same input structure to investigate alternative execution trails. This is accomplished by making the values of context-sensitive variables unequal [13].</p><p>As shown in Figure 2, we take a simple goto program as an example, where we can make the assignment to x precede its definition by changing the order between instructions; in addition, we can break the contextual relationship between the target of the GOTO instruction and the LABEL instruction by making their values no longer equal, thus changing the semantics without violating the syntax grammar rules.  that the changes of names or values of variables would predictably be unhelpful.</p><center><img loading="lazy" src="/posts/a0a87206/4.svg"></center><center><b>FIGURE 2</b> A simple Goto program</center><h3 id="First-Approach-Csmith-Mutation-Fuzzer">3.2. First Approach: Csmith-Mutation Fuzzer</h3><center><img loading="lazy" src="/posts/a0a87206/2.svg"></center><center><b>FIGURE 3</b> Csmith-mutation fuzzer architecture. White rectangles represent components reused from ESBMC; grey rectangles represent new created components</center><p>We propose the first implementation approach, whose architecture is shown in Figure 2. First, Csmith will create random C files, which will be passed through a front-end and a converter to form Goto programs. Here we introduce a mutator which semantically randomizing Goto programs by libFuzzer. Randonmized goto programs will finally be deliverred to the subsequent process. A simplified version of the programming logic is shown in Figure 4.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size, string filepath)</span> </span>&#123;</span><br><span class="line">    Goto_program=<span class="built_in">c2goto</span>(filepath);  <span class="comment">// Convert C codes to Goto programs</span></span><br><span class="line">    Goto_program=<span class="built_in">mutateor</span>(Goto_program, Data,size)  <span class="comment">// randomise Goto programs by libFuzzer</span></span><br><span class="line">    <span class="built_in">do_bmc</span>(Goto_program);   <span class="comment">// Apply the Goto program to the subsequent process</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><b>FIGURE 4</b> Programming Logic of Csmith-Mutation Fuzzer</center><p>The advantage of the Csmith-Mutation Fuzzer is that it can reuse the existing generator Csmith and only need to consider constructing a mutator; however, it also has several drawbacks: (1) We cannot guarantee that all language features supported within ESBMC are covered, as Csmith’s C standard support is c99 while that of ESBMC is c11. This will result in some of the statements not being covered during fuzz testing; (2) The fuzzer cannot be refined to test for specific statements (3) The approach of Csmith fuzzing is still front-end related as C file can only be read in via C-based front-end (in this case clang). We would like to have a more generic, front-end-independent fuzzer.</p><h3 id="Second-Approach-Goto-Fuzzer">3.3. Second Approach: Goto-Fuzzer</h3><center><img loading="lazy" src="/posts/a0a87206/1.svg"></center><center><b>FIGURE 5</b> Goto-fuzzer architecture. White rectangles represent components reused from ESBMC; grey rectangles represent new created components</center><p>Here we propose a second approaches, the architecture of which is shown in Figure 5. The core difference between two methods is that the construction output of the generator has changed from a source file to an intermediate file, which refers to the symbol. The choice of the symbol table over the goto program as the output of the generator is more a matter of development convenience, as no direct functions to construct a Goto program are provided in ESBMC. In contrast, the construction of a code statement is considerably simpler. In addition, contextual properties are initialised automatically during the conversion from symbol table to goto program, which will be a tough task if building Goto program directly. To ensure that the symbol table based generator works indentically as the direct goto program generator，We will prove that the types of generated statement will cover that of goto program instruction during the Goto converson. A simplified version of the programming implementation is shown in Figure 6.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size)</span> </span>&#123;</span><br><span class="line">    Goto_program = <span class="built_in">generator</span>(Data, Size);    <span class="comment">// use libFuzzer as seed generator </span></span><br><span class="line">    <span class="built_in">do_bmc</span>(Goto_program);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><b>FIGURE 6</b> Programming Logic of Goto-Fuzzer</center><h2 id="Ethics-and-professional-considerations">4. Ethics and professional considerations</h2><p>This project does not require the participation of any volunteers, nor will user data be collected in any form， the involvement of humans and data can therefore be excluded. Considering that ESBMC is under the Apache License 2.0, our modifications and development should follow the same open-source rules. In addition, given that ESBMC will be used in commercial and other production environments, the fuzzer needs to be tested before it is released, and the project documentation needs to be supplemented with relevant notes.</p><h2 id="Risk-consideration">5. Risk consideration</h2><h3 id="Design-Stage">5.1. Design Stage</h3><p>To design an efficient structure-awared fuzzer, which is the combination of generation and mutation fuzzer, will be the first challenge. This will have a direct impact on the final outcome. For example, test cases generated from a mutation algorithm that lacks logic may have the following problems: (1) the test cases are not useful, which is often reflected in the simplicity of the test cases (2) the test cases are virtually identical to others from the aspect of code coverage, which will result in test objects being limited to only some branches. </p><h3 id="Implement-Stage">5.2. Implement Stage</h3><p>The difficulty of the implement of Goto-fuzzer can be reflected in several aspects. Coupling and component independence needed to be firstly considered at the top-level design stage in order to avoid fuzzer having side effects on other functions in ESBMC. In addition, although the data structures and libraries for the intermediate representation were already provided, there was still a lot of coding to be done. Furthermore, the complex internal cross-referencing within ESBMC and the use of “magic” functions put the developer’s C++ reading skills to the test.</p><h3 id="Debug-and-Test-Stage">5.3. Debug and Test Stage</h3><p>The debuging and testing of Goto-fuzzer will be challenge, as the interdependencies of the libraries make debugging Goto-fuzzer as time consuming as debugging the entire ESBMC, requiring recompilation and relinking of the entire ESBMC project.</p><h2 id="Project-evaluation">6. Project evaluation</h2><p>The project can be evaluated from the following aspects: First, the primary purpose of a fuzzer is to use it to find hidden bugs in the program, thus the ability of error detection will be tested. One possible approach is to quantify the statistics of distinct crash errors found, rates of the crash and wrong-code errors from different versions of ESBMC, as well as the statistics of Bug-Finding Performance as a function of test-case size [14]. What’s more, the improvement of code coverage will be measured. Tools for statistical code coverage are provided in ESBMC and can be output visually. In the worst-case scenario, where our Goto fuzzer fails to find any bug, then the code coverage will be the key evaluation of the effectiveness. Besides, despite the libFuzzer as the mutator being a pre-requisite for the project, we could also propose other mutation-based fuzzer to compare and evaluate their relative performance. This optional task will be done if possible.</p><h2 id="Planning">7. Planning</h2><p>As the stage division in the section above, the general arrangement of this project will be divided into four parts, as shown in the Gantt Chart in Figure 5. First, the design stage will take 2 weeks and will be devoted mainly to summarizing the syntax grammar for the generator and to working out how to apply mutation to this fuzzer. Second, the implementation stage will last a month, and this stage will complete all. As an optional arrangement, we consider building an additional interface to output the goto program for debugging purposes. This task will be cancelled due to insufficient time. Third, the debug and testing stage will take three weeks, during which we focus on collecting data to verify the effectiveness of our Goto fuzzer. Finally, the writing stage will begin with the design stage simultaneously and will continue until August 8th .</p><center><img loading="lazy" src="/posts/a0a87206/5.png"></center><center><b>FIGURE 7</b> Gantt Chart</center><h2 id="Reference">8. Reference:</h2><ul><li>[1]: Seacord, Robert C. The CERT C Secure Coding Standard, 2008, 1st. edition.</li><li>[2]: ESBMC. <a href="http://www.esbmc.org/">http://www.ESBMC.org/</a>.</li><li>[3]: Kostya Serebryany. libFuzzer - a Library for Coverage-Guided Fuzz Testing. <a href="https://llvm.org/docs/LibFuzzer.htm">https://llvm.org/docs/LibFuzzer.htm</a>.</li><li>[4]: ESBMC Book. <a href="http://www.esbmc.org/">http://www.ESBMC.org/</a></li><li>[5]: L. Cordeiro, B. Fischer and J. Marques-Silva, “SMT-Based Bounded Model Checking for Embedded ANSI-C Software,” 2009 IEEE&#x2F;ACM International Conference on Automated Software Engineering, 2009, pp. 137-148, doi: 10.1109&#x2F;ASE.2009.63.</li><li>[6]: Deitel, Paul J., and Harvey M. Deitel. C: How to Program; with an Introduction to C++. 8., ed.Global ed, Pearson, 2016.</li><li>[7]: Aho, Alfred V., and Alfred V. Aho, editors. Compilers: Principles, Techniques, &amp; Tools. 2nd ed, Pearson&#x2F;Addison Wesley, 200.</li><li>[8]: cprover - Background Concepts. <a href="http://cprover.diffblue.com/background-concepts.html">http://cprover.diffblue.com/background-concepts.html</a>.</li><li>[9]: cprover - goto programt. <a href="http://cprover.diffblue.com/group__goto-programs.html">http://cprover.diffblue.com/group__goto-programs.html</a>.</li><li>[10]: Csmith. <a href="https://embed.cs.utah.edu/csmith/">https://embed.cs.utah.edu/csmith/</a>.</li><li>[11]: Hui Peng, Yan Shoshitaishvili and Mathias Payer, T-Fuzz: Fuzzing by Program Transformation,<br>2018-05. </li><li>[12]: Google. Structure-Aware Fuzzing with libFuzzer. <a href="https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md">https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md</a>.</li><li>[13]: Nguyen, Hoang Lam and Grunske, Lars, BeDivFuzz: Integrating Behavioral Diversity into Generator-based Fuzzing, 2022. </li><li>[14]: Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and understanding bugs in C compilers. SIGPLAN Not. 46, 6 (June 2011), 283–294.</li></ul><div class="row">    <embed src="./report.pdf" width="100%" height="550" type="application/pdf"></div>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/ESBMC/">ESBMC</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/a0a87206/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ESBMC Symbol Table</title>
      <link>https://hejueyun.github.io/posts/1ad13e77/</link>
      <guid>https://hejueyun.github.io/posts/1ad13e77/</guid>
      <pubDate>Fri, 22 Apr 2022 20:06:36 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Namespacet&quot;&gt;1. Namespacet&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A namespacet is essentially one or two symbol tables bound together, to allow for</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Namespacet">1. Namespacet</h2><blockquote><p>A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in them.</p><p>The basic idea is that you might want to combine a value table and a type table, so that for a variable you can lookup both of these essential properties, in one structure. </p></blockquote><h2 id="contextt">2. contextt</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">symbol_base_mapt symbol_base_map;</span><br><span class="line">symbolst symbols;</span><br><span class="line">ordered_symbolst ordered_symbols;</span><br></pre></td></tr></table></figure><h2 id="symbolt-x2F-symbolst">3. symbolt&#x2F;symbolst</h2><ul><li>GOTO conversion component constructs a goto-program from a symbol table. Each symbol in the symbol table with function type (that is, the symbol’s type field contains a <code>code_typet</code>) will be converted to a corresponding GOTO program. Function <code>goto_convertt::convert</code> turns each <code>codet</code> in the symbol table into corresponding GOTO instructions.</li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/ESBMC/">ESBMC</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/1ad13e77/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GOTO Language Syntax Grammar</title>
      <link>https://hejueyun.github.io/posts/d48bdd8/</link>
      <guid>https://hejueyun.github.io/posts/d48bdd8/</guid>
      <pubDate>Fri, 22 Apr 2022 20:05:04 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Expression&quot;&gt;1. Expression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;From the aspect of goto program, an expression (&lt;code&gt;expr2t&lt;/code&gt;) is formed by</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Expression">1. Expression</h2><ul><li>From the aspect of goto program, an expression (<code>expr2t</code>) is formed by <strong>two</strong> properties:<ul><li>expr_type (<code>type2t</code>): represents the type of an expression.</li><li>expr_ids (<code>expr_ids</code>): used for distinguishing different classes of expression</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr  ::=   expr_type + expr_ids  </span><br><span class="line">      |     expr     </span><br></pre></td></tr></table></figure><ul><li><p><strong>expr_type</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expr_type   ::=</span><br><span class="line">            | bool_id</span><br><span class="line">            | empty_id</span><br><span class="line">            | symbol_id</span><br><span class="line">            | struct_id</span><br><span class="line">            | union_id</span><br><span class="line">            | code_id</span><br><span class="line">            | array_id</span><br><span class="line">            | pointer_id</span><br><span class="line">            | unsignedbv_id</span><br><span class="line">            | signedbv_id</span><br><span class="line">            | fixedbv_id</span><br><span class="line">            | floatbv_id</span><br><span class="line">            | string_id</span><br><span class="line">            | cpp_name_id</span><br><span class="line">            | end_type_id</span><br></pre></td></tr></table></figure></li><li><p><strong>expr_ids</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expr_ids     ::=</span><br><span class="line">            |   constant_int_id</span><br><span class="line">            |   constant_fixedbv_id</span><br><span class="line">            |   constant_floatbv_id</span><br><span class="line">            |   constant_bool_id</span><br><span class="line">            |   constant_string_id</span><br><span class="line">            |   constant_struct_id</span><br><span class="line">            |   constant_union_id</span><br><span class="line">            |   constant_array_id</span><br><span class="line">            |   constant_array_of_id</span><br><span class="line">            ...</span><br><span class="line">            |   code_block_id</span><br><span class="line">            |   code_assign_id</span><br><span class="line">            |   code_init_id</span><br><span class="line">            ...</span><br><span class="line">            |   end_expr_id</span><br></pre></td></tr></table></figure></li></ul><h2 id="Goto-Instruction">2. Goto Instruction</h2><p>In ESBMC, a goto instruction (<code>goto_programt::instructiont</code>) is defined by <strong>three</strong> properties– The meaning of an instruction depends on the <strong>instruction_type</strong> (<code>goto_program_instruction_typet</code>) field, while different kinds of instructions make use of the fields <strong>guard</strong> (<code>expr2tc</code>) and <strong>code</strong> (<code>expr2tc</code>) for different purposes. </p><ul><li>In other words, these are the properties that need to be considered when initialising a goto-instruction data structure, any other property could be set default or generated afterwards. </li><li><code>expr2tc</code> is basically a reference pointer container for <code>expr2t</code>. In this situation, there is no need to distinguish these two.</li></ul><p>The syntax grammar can be roughly listed as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Instruction ::= </span><br><span class="line">            |   (instruction_type)</span><br><span class="line">            |   (instruction_type, guard)</span><br><span class="line">            |   (instruction_type, code)</span><br></pre></td></tr></table></figure><ul><li><p><strong>instruction_type</strong>: an enum value describing the action performed by this instruction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">instruction_type    ::=</span><br><span class="line">                    |   NO_INSTRUCTION_TYPE </span><br><span class="line">                    |   GOTO            </span><br><span class="line">                    |   ASSUME          </span><br><span class="line">                    |   ASSERT          </span><br><span class="line">                    |   OTHER           </span><br><span class="line">                    |   SKIP            </span><br><span class="line">                    |   LOCATION        </span><br><span class="line">                    |   END_FUNCTION   </span><br><span class="line">                    |   ATOMIC_BEGIN    </span><br><span class="line">                    |   ATOMIC_END      </span><br><span class="line">                    |   RETURN         </span><br><span class="line">                    |   ASSIGN         </span><br><span class="line">                    |   DECL           </span><br><span class="line">                    |   DEAD           </span><br><span class="line">                    |   FUNCTION_CALL   </span><br><span class="line">                    |   THROW          </span><br><span class="line">                    |   CATCH          </span><br><span class="line">                    |   THROW_DECL      </span><br><span class="line">                    |   THROW_DECL_END</span><br></pre></td></tr></table></figure></li><li><p><strong>code</strong>: represents the code expression whose <code>id</code> is a subset of <code>expr_ids</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">code.ids     ::=</span><br><span class="line">            |   code_block_id</span><br><span class="line">            |   code_assign_id</span><br><span class="line">            |   code_init_id</span><br><span class="line">            |   code_decl_id</span><br><span class="line">            |   code_dead_id</span><br><span class="line">            |   code_printf_id</span><br><span class="line">            |   code_expression_id</span><br><span class="line">            |   code_return_id</span><br><span class="line">            |   code_skip_id</span><br><span class="line">            |   code_free_id</span><br><span class="line">            |   code_goto_id</span><br><span class="line">            |   code_asm_id</span><br><span class="line">            |   code_function_call_id</span><br><span class="line">            |   code_comma_id</span><br><span class="line">            |   code_cpp_del_array_id</span><br><span class="line">            |   code_cpp_delete_id</span><br><span class="line">            |   code_cpp_catch_id</span><br><span class="line">            |   code_cpp_throw_id</span><br><span class="line">            |   code_cpp_throw_decl_id</span><br><span class="line">            |   code_cpp_throw_decl_end_id</span><br></pre></td></tr></table></figure></li><li><p><strong>guard</strong>: an (arbitrarily complex) expression (usually an exprt) of Boolean type, whose <code>id</code> is a subset of <code>expr_ids</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guard.id  ::=  </span><br><span class="line">          |     constant_bool_id</span><br><span class="line">          |     constant_int_id</span><br><span class="line">          |     constant_floatbv_id</span><br><span class="line">          |     constant_fixedbv_id</span><br></pre></td></tr></table></figure></li></ul><p>The detailed syntax grammar can be listed as follows. For simplification, we use the <strong>id</strong> of a expression directly to represent that expression, and <code>*</code> is denoted to represent a list of expressions&#x2F; instrucitons.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Instruction ::=</span><br><span class="line">            |   NO_INSTRUCTION_TYPE</span><br><span class="line">            |   GOTO   </span><br><span class="line">            |   GOTO + guard         </span><br><span class="line">            |   ASSUME + guard    </span><br><span class="line">            |   ASSERT + guard  </span><br><span class="line">            |   OTHER + code_expression_id</span><br><span class="line">            |   OTHER + code_free_id</span><br><span class="line">            |   OTHER + code_printf_id</span><br><span class="line">            |   OTHER + code_asm_id</span><br><span class="line">            |   OTHER + code_cpp_del_array_id</span><br><span class="line">            |   OTHER + code_cpp_delete_id</span><br><span class="line">            |   SKIP            </span><br><span class="line">            |   LOCATION        </span><br><span class="line">            |   ATOMIC_BEGIN + Instruction* + ATOMIC_END</span><br><span class="line">            |   RETURN </span><br><span class="line">            |   RETURN + code_return_id </span><br><span class="line">            |   ASSIGN + code_assign_id     </span><br><span class="line">            |   DECL + code_decl_id          </span><br><span class="line">            |   DEAD + code_dead_id         </span><br><span class="line">            |   FUNCTION_CALL + code_function_call_id</span><br><span class="line">            |   THROW  + code_cpp_throw_id*</span><br><span class="line">            |   CATCH  + code_cpp_catch_id*</span><br><span class="line">            |   THROW_DECL + code_cpp_throw_decl_id* </span><br><span class="line">            |   THROW_DECL_END + code_cpp_throw_decl_end_id*</span><br></pre></td></tr></table></figure><ul><li><code>NO_INSTRUCTION_TYPE</code>: Instruction will be set to <code>NO_INSTRUCTION_TYPE</code> if it is not explicitly defined.</li><li><code>GOTO</code>: <code>GOTO</code> targets if and only if <code>guard</code> is true. The <code>guard</code> will be set to <strong>TRUE</strong> if it is not explicitly given.</li><li><code>ASSUME</code>: This thread of execution waits for <code>guard</code> to evaluate to <strong>TRUE</strong>, which performs a non-failing guarded self loop.</li><li><code>ASSERT</code>: An assertion is <strong>TRUE</strong> &#x2F; safe if <code>guard</code> is <strong>TRUE</strong>  in all possible executions, otherwise it is <strong>FALSE</strong> &#x2F; unsafe. This instructions is used to express properties to be verified</li><li><code>OTHER</code>: Represents an expression that gets evaluated, but does not have any other effect on execution, i.e. doesn’t contain a <strong>call</strong> or <strong>assignment</strong>.         </li><li><code>SKIP</code>: Just advance the PC.            </li><li><code>LOCATION</code>: Semantically like <code>SKIP</code>.        </li><li><code>ATOMIC_BEGIN</code>, <code>ATOMIC_END</code>: Marks&#x2F; Ends a block without interleavings. When a thread executes <code>ATOMIC_BEGIN</code>, no thread other will be able to execute any Instruction until the same thread executes <code>ATOMIC_END</code>.</li><li><code>RETURN</code>: Set the value returned by <code>code</code> (which shall be either <strong>nil</strong> or an instance of <code>code_return_id</code>) and then jump to the end of the function.          </li><li><code>ASSIGN</code>: Update the left-hand side of <code>code</code> (an instance of <code>code_assign_id</code>) to the value of the right-hand side.          </li><li><code>DECL</code>: Introduces a symbol denoted by the field <code>code</code> (an instance of <code>code_decl_id</code>). Semantically, the life-time of which is bounded by a corresponding <code>DEAD</code> instruction.         </li><li><code>DEAD</code>: Ends the life of the symbol denoted by the field <code>code</code>.           </li><li><code>FUNCTION_CALL</code>: Invoke the function denoted by field <code>code</code> (an instance of <code>code_function_call_id</code>).   </li><li><code>THROW</code>: Throw an exception. Throw $exception_1, …, exception_N$ where the list of exceptions is extracted from the <code>code</code> field      </li><li><code>CATCH</code>: Catch an exception.</li><li><code>THROW_DECL</code>: List of throws that a function can throw.    </li><li><code>THROW_DECL_END</code>: End of throw declaration.</li></ul><h2 id="Goto-Program">3. Goto Program</h2><p>An instance of goto program (<code>goto_programt</code>) is effectively a list of instructions, and must end with  <code>END_FUNCTION</code>. </p><ul><li><code>END_FUNCTION</code>: Must occur as the last instruction of the list and nowhere else.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Program ::= Instruction* + END_FUNCTION</span><br></pre></td></tr></table></figure><h2 id="GOTO-Conversion">4. GOTO Conversion</h2><center><img loading="lazy" src="/posts/d48bdd8/1.svg" width="700"></center><center>Fig 1. GOTO Conversion</center><p>Each symbol in the symbol table with function type (that is, the symbol’s type field contains a <code>code_typet</code>) will be converted to a corresponding <code>GOTO</code> program. The conversion happens in <strong>two</strong> phases:</p><ol><li><code>goto_convertt::convert</code> turns each <code>codet</code> in the symbol table into corresponding GOTO instructions</li><li><code>goto_convertt::finish_gotos</code> and others (i.e. <code>goto_convertt::optimize_guarded_gotos</code>) populate the <code>GOTO</code> and <code>CATCH</code> instructions’ targets members, pointing to their possible successors. <code>DEAD</code> instructions are also added when GOTO instructions branch out of one or more lexical blocks</li></ol><p><code>codet</code> represents statements, which is a subset of expression( inherit from <code>exprt</code>). </p><ul><li><code>exprt</code>&#x2F; <code>typet</code>: </li><li><code>Statement</code>: </li><li><code>Operands</code>:</li></ul><p>The grammar of a (By default.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">            statment        operand(s) </span><br><span class="line">------------------------------------------------</span><br><span class="line">codet ::=</span><br><span class="line">      |     block</span><br><span class="line">      |     decl            op0</span><br><span class="line">      |     decl            op0, op1</span><br><span class="line">      |     decl-block</span><br><span class="line">      |     expression      op0</span><br><span class="line">      |     assign          op0, op1</span><br><span class="line">      |     init            op0, op1</span><br><span class="line">      |     assert          op0</span><br><span class="line">      |     assume</span><br><span class="line">      |     function_call</span><br><span class="line">      |     label           op0</span><br><span class="line">      |     switch_case     op0, op1</span><br><span class="line">      |     for             op0, op1, op2, op3</span><br><span class="line">      |     while           op0, op1</span><br><span class="line">      |     dowhile         op0, op1</span><br><span class="line">      |     switch</span><br><span class="line">      |     break</span><br><span class="line">      |     return</span><br><span class="line">      |     continue</span><br><span class="line">      |     goto</span><br><span class="line">      |     skip</span><br><span class="line">      |     non-deterministic-goto</span><br><span class="line">      |     ifthenelse</span><br><span class="line">      |     atomic_begin</span><br><span class="line">      |     atomic_end</span><br><span class="line">      |     cpp_delete</span><br><span class="line">      |     cpp_delete[]</span><br><span class="line">      |     cpp-catch</span><br><span class="line">      |     throw_decl</span><br><span class="line">      |     throw_decl_end</span><br><span class="line">      |     dead</span><br></pre></td></tr></table></figure><h3 id="Stage-1-Conversion-from-statement-to-goto-instruction">4.1. Stage 1: Conversion from statement to goto-instruction</h3><ul><li>Note that did not cover the case that <code>atomicity-check</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Function                  Input (codet)                 Output (codet/instructiont)</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">cconvert_block            (block)                       (codet*)</span><br><span class="line">cconvert_decl             (decl, op0)                   DECL</span><br><span class="line">                          (decl, op0, op1)              DECL ASSIGN</span><br><span class="line">cconvert_decl_block       (decl-block)                  (codet*)</span><br><span class="line">cconvert_expression       (expression, op0)             (ifthenelse)</span><br><span class="line">                          (expression, op0)             OTHER</span><br><span class="line">convert_assign            (assign, op0, op1)            ASSIGN</span><br><span class="line">convert_init              (init, op0, op1)              (assign)</span><br><span class="line">convert_assert            (assert, op0)                 ASSERT</span><br><span class="line">convert_assume            (assume, op0)                 ASSUME</span><br><span class="line">convert_function_call     (function_call)               (codet)</span><br><span class="line">convert_label             (label, op0)                  (codet)</span><br><span class="line">convert_switch_case       (switch_case, op0, op1)       (codet)</span><br><span class="line">convert_for               (for, op0, op1, op2, op3)     NO_INSTRUCTION_TYPE SKIP GOTO</span><br><span class="line">                          (for, op0, op1, op2, op3)     NO_INSTRUCTION_TYPE SKIP SKIP GOTO</span><br><span class="line">convert_while             (while, op0, op1)             SKIP GOTO</span><br><span class="line">convert_dowhile           (dowhile, op0, op1)           NO_INSTRUCTION_TYPE SKIP GOTO</span><br><span class="line">convert_switch            (switch)                      NO_INSTRUCTION_TYPE SKIP GOTO*</span><br><span class="line">convert_break             (break)                       GOTO</span><br><span class="line">convert_return</span><br></pre></td></tr></table></figure><ul><li><p><code>block</code>: By <code>goto_convertt::convert_block</code>Convert each expression (<code>exprt</code>) , which is stored as operand (<code>op</code>), to <code>codet</code>.  Each new <code>codet</code> then converts to goto-instruction later.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;        <span class="comment">// block begin</span></span><br><span class="line">  <span class="type">int</span> x; <span class="comment">// op[0]  =&gt;  codet(decl)   </span></span><br><span class="line">  x=<span class="number">1</span>;   <span class="comment">// op[1]  =&gt;  codet(assign)</span></span><br><span class="line">  ...   </span><br><span class="line">&#125;       <span class="comment">// block end</span></span><br></pre></td></tr></table></figure></li><li><p><code>decl</code>: takes <strong>one</strong> or <strong>two</strong> operands and always expects symbol as first operand (<code>op0</code>).</p><ul><li>if <strong>one</strong>, then generates a <code>DECL</code> instruction only.</li><li>if <strong>two</strong>, first the statement breaks up into decl and assignment, then generates a <code>DECL</code> instruction and a <code>ASSIGN</code> instruction.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x; <span class="comment">// one operand, will be converted to DECL</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>; <span class="comment">// two operand, will be spilted to two sub statement and converted to DECL and ASSIGN</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>decl-block</code>: Semantically like <code>block</code>.</p></li><li><p><code>expression</code>: takes <strong>one</strong> operand</p><ul><li>if  </li><li>else</li></ul></li><li><p><code>assign</code>:  takes <strong>two</strong> operands, denoted as <code>lhs</code>(<code>op0</code>) and <code>rhs</code>(<code>op1</code>)</p><ul><li>d</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">func</span>()      <span class="comment">// function_call </span></span><br><span class="line">x = <span class="keyword">new</span> <span class="built_in">class</span>() <span class="comment">// cpp_new</span></span><br><span class="line">x = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>] <span class="comment">// cpp_new[]</span></span><br><span class="line">x = y           <span class="comment">// other cases</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="block-code-statment-to-code-blockt">4.1.1. block code statment to code_blockt</h4><p>  - </p><h3 id="Stage-2-target-generation-and-optimisation">4.2. Stage 2: target generation and optimisation</h3><h3 id="Example">4.3. Example</h3><center><img loading="lazy" src="/posts/d48bdd8/2.svg" width="700"></center><center>Fig 2. C Program Being Converted Into GOTO Code </center><center>source: <a href="http://cprover.diffblue.com/group__goto-programs.html">cprover: goto-conversion</a></center><h2 id="Referrence">5. Referrence</h2><p>The syntax grammar are referred to:</p><ul><li><code>goto_*.h</code>&#x2F; <code>goto_*.cpp</code></li><li><code>symex_*.h</code>&#x2F; <code>symex_*.cpp</code></li><li><code>irep2_*.h</code>&#x2F;<code>irep2_*.cpp</code></li><li><a href="http://cprover.diffblue.com/group__goto-programs.html">cprover: goto-programs</a></li><li><a href="http://cprover.diffblue.com/group__util.html">cprover: util</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/ESBMC/">ESBMC</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/d48bdd8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ESBMC-An Efficient SMT-based Software Model Checker</title>
      <link>https://hejueyun.github.io/posts/2f42f06c/</link>
      <guid>https://hejueyun.github.io/posts/2f42f06c/</guid>
      <pubDate>Wed, 20 Apr 2022 20:02:42 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;It(ESBMC) does not require any special annotations in the source code to find</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Introduction">1. Introduction</h2><blockquote><p>It(ESBMC) does not require any special annotations in the source code to find such bugs, but it allows users to add their assertions and checks if they hold. In addition, ESBMC implements a k-induction proof rule and can be used to prove the absence of property violations (resp. the validity of user-defined assertions)</p><ul><li>它（ESBMC）不需要在源代码中进行任何特殊的注释来发现这种错误，但它允许用户添加他们的断言并检查它们是否成立。此外，ESBMC实现了一个k-归纳证明规则，可以用来证明没有违反属性（即用户定义的断言的有效性）</li></ul></blockquote><h2 id="ESBMC-Architecture">2. ESBMC Architecture</h2><center><img loading="lazy" src="/posts/2f42f06c/1.png" width="600"></center><ul><li>One of the significant challenges in software verification is the development and maintenance of an infrastructure that can reliably and efficiently handle real-world programs; it is an issue that only intensifies given the ever-evolving programming language standards.<ul><li>新标准发布需要新的支持</li></ul></li></ul><h3 id="Front-end">2.1. Front-end</h3><ul><li>an important piece of technology that should facilitate the transition between the <strong>program</strong> under verification and a <strong>format</strong> the tool can work upon</li></ul><h4 id="Clang">2.1.1. Clang</h4><p>Clang是LLVM编译器的c-family前端，Clang可能意指三种不同的实体：</p><ul><li>前端（在Clang库中实现）</li><li>编译器驱动程序（在clang命令和Clang驱动程序库中实现）</li><li>实际的编译器（在clang -cc1命令中实现）。clang -cc1中的编译器不仅是由Clang库实现，还广泛地使用其他LLVM库来实现编译器的中端、后端以及集成的汇编器。</li><li><code>clang -emit-llvm -c size.c -o size.bc</code></li></ul><blockquote><p>Using the LLVM bitcode in the verification process <strong>brings some advantages</strong>; the bitcode is highly optimized by LLVM and will simplify the verification, thus reducing costs. <strong>However</strong>, <strong>there are disadvantages to this process</strong>, including <strong>losing context information</strong> (e.g., variable, class and function names are mangled in C++ ), source location information; <strong>in rare cases, optimizations can generate wrong results</strong> . While the latter can be avoided by disabling optimizations (and thus losing one of <strong>this approach’s</strong> advantages), the other two are not easily avoided by software verifiers.</p></blockquote><ul><li>其他前端的不足还是在于会丢失source location information<ul><li>丢失了会怎么样呢？</li></ul></li></ul><h4 id="ESBMC-Front-end">2.1.2. ESBMC Front-end</h4><ul><li>Instead of working on the LLVM bitcode, <strong>ESBMC accesses the AST that generates the bitcode</strong><ul><li>We developed a new front-end <strong>based on clang</strong>. </li><li>We use <strong>clang</strong> to parse the C program, which generates the clang AST, and we <strong>convert it to the ESBMC AST</strong></li></ul></li></ul><h4 id="versus">2.1.3. versus</h4><ul><li>The clang front-end brings several <strong>advantages</strong> to the verification process. <ul><li>First, clang has a powerful static analyzer. It can provide state-of-the-art compiler diagnostics of the program, thus <strong>issuing the same warnings and errors</strong> that one would expect from a conventional compilation. </li><li>Second, <strong>the support for new language features is simplified</strong>. A newAST node converter needs only to be added to the converter class in ESBMC, rather than layering in the feature from flex lexer to type-checker. </li><li>Finally, by choosing the AST instead of the bitcode, <strong>a complete representation of the original program is available, including the original names of every class, function, and variable</strong>.</li></ul></li><li>The <strong>disadvantage</strong> is that ESBMC is <strong>unable to access the optimizations</strong> that LLVM performs on the bitcode</li></ul><h3 id="GOTO-Converter">2.2. GOTO Converter</h3><ul><li><p>This representation is similar to the control flow graph (CFG) representation used by conventional compilers, but we associate program statements with edges. </p><ul><li>In this process, the GOTOprogram is also simplified, and <strong>new property checks and instructions can be added</strong>.</li></ul></li><li><p>The GOTOprogram is a simplified version ofthe program: a branch and a backward GOTO replace for and while loops. It is very similar to a C program, containing assignments, function calls and returns, and location information.</p></li><li><p>Once the GOTO program is generated, the following transformations can be applied, depending on the set of options given to ESBMC:</p><ul><li><strong>Function inlining</strong><ul><li>replaces function calls with the instructions of the called function.</li></ul></li><li><strong>Interval analysis</strong><ul><li>performs an <strong>interval analysis</strong>区间分析 for integer variables</li><li>The intervals are added back into the GOTO program as assumptions</li></ul></li><li><strong>Code transformations</strong><ul><li>introduce new instructions depending on several factors. </li><li>In particular, concurrency instructions can be inserted if the program is multi-threaded, and k-induction specific instructions are introduced if kinduction verification is enabled</li></ul></li><li><strong>Property checks</strong><ul><li>can insert several property checks into the GOTO program, including division by zero checks, integer, and float overflow checks, NaN checks (i.e., whether the result of an operation can be NaN), data race checks, deadlock checks, and atomicity checks. All these properties are encoded as <strong>assertions</strong> in the GOTO program.</li></ul></li></ul></li></ul><h3 id="Symbolic-Engine-Generating-SSA">2.3. Symbolic Engine: Generating SSA</h3><p>static single assignment (SSA)</p><ul><li>unwinds解开 the GOTO program from the previous step</li><li>add further property checks, including <strong>dynamic memory checks</strong> (bounds, memory alignment, offset pointer-free, and double-free) and unwinding assertions</li></ul><p>…</p><h3 id="SMT-Solver-SMT-Encoding-of-C-Programs">2.4. SMT Solver: SMT Encoding of C Programs</h3><p>After the SSA set is created, the next step is to encode every (not sliced) assignment in SMT and check for satisfiability. </p><ul><li>We use a notation of constraints C and properties P when encoding the set of SSA. <ul><li>A <strong>constraint</strong> is an <strong>assignment</strong> or an <strong>assumption</strong> in the program. It constrains the value of a variable</li><li>while a <strong>property</strong> is an <strong>assertion</strong> in the program. <strong>This property needs to hold given the set of constraints</strong>.</li></ul></li><li>The constraints and properties are encoded in the form $C∧¬P$: given the set of constraints, <strong>the SMT solver will try to find an assignment to variables</strong> that satisfies the constraints and violates at least one property. <ul><li>SMT求解器将试图找到一个满足约束条件并至少违反一个属性的变量赋值</li></ul></li><li>Finally, if the SMT solver finds a model, ESBMC will generate a program <strong>counterexample</strong>: a set of assignments and the program’s violated property.</li></ul><p>…</p><h2 id="ESBMC’s-Verification-Modes">3. ESBMC’s Verification Modes</h2><h3 id="Bounded-Model-Checking">3.1. Bounded Model Checking</h3><ul><li><p><a href="https://hejueyun.github.io/posts/ade5e95e/">Bounded Model Checking | 烏巢</a></p></li><li><p>A <strong>node</strong> in the <strong>CFG</strong> represents either a (non-) deterministic assignment or a conditional statement, while an edge in the CFG represents a possible change in the program’s control location.</p><ul><li>CFG中的一个节点代表一个（非）确定性的赋值或一个条件语句，而CFG中的一条边代表程序控制位置的可能变化。</li></ul></li><li><p>This graph is built as part of a translation process <strong>from program text to SSA</strong>.</p></li><li><p>A <strong>state transition system</strong>, denoted by M, is defined by a triple $(S, R, s_1)$ where S represents the set of states, $R ⊆ S × S$ represents the set of transitions and $s_1 ⊆ S$ represents the set of initial states.</p></li></ul><hr><blockquote><p>事实证明，程序的模型检查通常是一个难题。 造成这种情况的部分原因是，许多模型检查算法都在努力寻求一种“完整性”形式，<strong>它们要么找到踪迹(trace)，要么返回证明这种踪迹不可能存在的证据。</strong></p><ul><li>trace: shows what statements are executed and in which order.</li></ul><p>由于我们对<strong>生成测试用例</strong>感兴趣，因此我们更喜欢一种不同的方法：可能只有在很长时间执行后才能到达某个目标状态，或者根本无法到达，但是这些信息对我们构建测试用例没有帮助。 出于这个原因，我们引入了一个<strong>执行边界(execution bound)</strong> ，它描述了我们在分析程序时的<strong>深度</strong>。</p><p>使用这种执行边界的模型检查技术称为 <strong>有界模型检查(bounded model checking)</strong> ； 对于给定的边界 n，它们将返回一条跟踪信息或一条说明“无法在 n 步内达到目标状态”的语句。 因此，对于给定的边界，我们总是得到所有可以达到的状态的 <strong>近欠值(underapproximation， 即接近但没达到)</strong> ：我们当然可以在给定的范围内找到那些可以达到的状态，但是我们<strong>可以（may）</strong>(<em>故意地？</em>)错过只有通过更多步骤才能达到的状态。 相反，如果事实上有一种到达该状态的方法，我们将永远<br>不会声称某个状态在某个范围内是不可到达的</p></blockquote><h4 id="symbolic-model-checking-符号模型检测">3.1.1. symbolic model checking 符号模型检测</h4><ul><li>The bounded model checking techniques used by the CPROVER framework are based on <strong>symbolic model checking</strong>, a <strong>family</strong> of model checking techniques that work on <strong>sets of program states</strong> and use advanced tools such as SAT solvers (more on that below) <strong>to calculate the set of reachable states</strong>.</li></ul><center><img loading="lazy" src="/posts/2f42f06c/2.png" width="600"></center><h4 id="How-bounded-model-checking-works">3.1.2. How bounded model checking works</h4><ol><li>Use <strong>bit vector</strong> representation to describe <strong>variables</strong> and <strong>operations on binary number</strong></li><li>transform to <strong>SSA</strong><ol><li>we <strong>might</strong> modify the SSA form (i.e. introducing <code>guard</code>)</li><li>thus finish encoding the behavior of programs as propositional formulas</li></ol></li><li>add <code>ASSERT</code>:  describe the property we want to prove.<ol><li>To do this, we introduce a primitive <code>ASSERT</code>. Let <code>e</code> be some expression; then <code>ASSERT(e)</code> is supposed to do nothing if <code>e</code> evaluates to true, and to abort the program if <code>e</code> evaluates to false.</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Origin</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = a;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bringing this into SSA form</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result<span class="number">.1</span> = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// As a first step, we modify the SSA form slightly by introducing an additional propositional variable C that tracks which branch of the if was taken. We call this variable the code guard variable, or guard for short</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  bit C; <span class="comment">/* Track which branch was taken */</span></span><br><span class="line">  C = a &lt; b;</span><br><span class="line">  <span class="comment">/* if (C) - not needed anymore thanks to SSA */</span></span><br><span class="line">    result<span class="number">.1</span> = b;</span><br><span class="line">  <span class="comment">/* else */</span></span><br><span class="line">    result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The resulting formula would be <blockquote><p>C &#x3D; a&lt;b and R1 &#x3D; B and R2 &#x3D; A and (C ⇒ return &#x3D; R1) and ((not C) ⇒ return &#x3D; R2).</p></blockquote></li></ul><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Origin</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    result = b;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = a;</span><br><span class="line">  <span class="built_in">ASSERT</span>(result &lt;= a); <span class="comment">// Added</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The corresponding SSA would be </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  bit C; <span class="comment">/* Track which branch was taken */</span></span><br><span class="line">  C = a &lt; b;</span><br><span class="line">  result<span class="number">.1</span> = b;</span><br><span class="line">  result<span class="number">.2</span> = a;</span><br><span class="line">  <span class="built_in">ASSERT</span>(<span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>) &lt;= a);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Phi</span>(C,result<span class="number">.1</span>,result<span class="number">.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We translate <code>ASSERT(Phi(C,result.1,result.2) &lt;= a)</code> into <blockquote><p>Φ(C,result.1,result.2) &lt;&#x3D; a </p></blockquote></li><li>The resulting formula would be <blockquote><p>C &#x3D; a&lt;b and R1 &#x3D; B and R2 &#x3D; A and (C ⇒ R1 &lt;&#x3D; A) and ((not C) ⇒ R2 &lt;&#x3D; A). (C ⇒ return &#x3D; R1) and ((not C) ⇒ return &#x3D; R2)</p></blockquote></li></ul><h3 id="Incremental-Bounded-Model-Checking">3.2. Incremental Bounded Model Checking</h3><ol><li>BMC tools drop completeness (i.e., the ability to prove that a program does not contain a bug) in favor of falsification. They are used mainly to find bugs, as they can only prove the absence of bugs if the whole state space is explored (e.g., all loops have been fully unwound). </li><li>In order to prove a program’s correctness, we need to compute the completeness threshold (CT), which can be smaller than or equal to the maximum number of loop iterations occurring in the program. However, computing CT to stop the BMC procedure and to conclude that no counterexample can be found is as hard as model checking the program </li><li>When running a BMC tool, one usually has to specify a bound k explicitly; this will be used to limit the visited regions of data structures (e.g., arrays) or the number of loop iterations. This limits the state space to be explored during verification, but leaves enough for real errors in applications to be found. </li><li>Since the best value for k is usually not known a priori先验, one must repeatedly run the BMC tool with increasing values of k; every increase of k will increase the number of loop iterations, the recursion depth, and the time and memory requirements. To check whether the value of k is big enough, BMC tools <strong>insert unwinding assertions after each loop</strong>. <strong>Failing these assertions does not mean that the program has a bug, but the verification is incomplete.</strong></li></ol><p><strong>In ESBMC, there are two versions of incremental BMC</strong></p><ol><li>CFG is unwound before the SSA generation by creating copies of the loop body and removing the backward GOTO instruction.<ol><li>The main <strong>difference</strong> between the static incremental BMC algorithm in <strong>ESBMC</strong> and the one described by <strong>Donaldson</strong> is the handling of nested loops.</li><li>In both algorithms, the number of loop unwindings is set globally. However, nested inner loops are unwound first in ESBMC, while in Donaldson’s work outermost loops are unwound first.</li></ol></li><li>algorithm that incrementally unwinds the state transition system by running the symbolic engine with incremental numbers of unwinds.<ol><li>which allows incremental verification in many different configurations.</li><li>Falsification&#x2F; Termination&#x2F; Incremental Verification&#x2F; k-Induction</li></ol></li></ol><h4 id="Loop-unrolling-循环展开">3.2.1. Loop unrolling 循环展开</h4><ul><li>循环展开（Loop unwinding或loop unrolling），是一种牺牲程序的大小来加快程序执行速度的优化方法。可以由程序员完成，也可由编译器自动优化完成。</li><li>循环展开最常用来降低循环开销，为具有多个功能单元的处理器提供指令级并行。也有利于指令流水线的调度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) </span><br><span class="line">   a[i] = a[i] * b + c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环展开2次</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">58</span>; i+=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">  a[i] = a[i] * b + c;</span><br><span class="line">  a[i+<span class="number">1</span>] = a[i+<span class="number">1</span>] * b + c;</span><br><span class="line">  a[i+<span class="number">2</span>] = a[i+<span class="number">2</span>] * b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-k-induction-Algorithm">3.3. The k-induction Algorithm</h3><p>…</p><h2 id="参考">4. 参考</h2><ul><li><a href="https://blog.csdn.net/qq_36287943/article/details/109626082">LLVM - 学习笔记一 - zhugl0</a></li><li><a href="http://cprover.diffblue.com/background-concepts.html#BMC_section">cprover: Background Concepts - Bounded model checking</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/ESBMC/">ESBMC</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/2f42f06c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>软件安全备忘录：CERT C Coding Standard笔记</title>
      <link>https://hejueyun.github.io/posts/e8d0ec3/</link>
      <guid>https://hejueyun.github.io/posts/e8d0ec3/</guid>
      <pubDate>Fri, 08 Apr 2022 20:29:29 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Expressions-EXP&quot;&gt;1. Expressions (EXP)&lt;/h2&gt;&lt;h3 id=&quot;EXP30-C-Do-not-depend-on-the-order-of-evaluation-for-side-effects&quot;&gt;1.1. EXP30-C.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Expressions-EXP">1. Expressions (EXP)</h2><h3 id="EXP30-C-Do-not-depend-on-the-order-of-evaluation-for-side-effects">1.1. EXP30-C. Do not depend on the order of evaluation for side effects</h3><blockquote><p>At specific points during execution, known as <strong>sequence points</strong>, all side effects of previous evaluations are complete, and no side effects of subsequent evaluations have yet taken place. Do not depend on the order of evaluation for side effects unless there is an intervening sequence point</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* i is modified twice between sequence points */</span> </span><br><span class="line">i = ++i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* i is read other than to determine the value to be stored */</span> </span><br><span class="line">a[i++] = i;</span><br></pre></td></tr></table></figure><ul><li>Attempting to modify an object multiple times between sequence points may cause that object to take on an unexpected value, which can lead to unexpected program behavior</li></ul><h4 id="副作用">1.1.1. 副作用</h4><blockquote><p>在产生一个值的过程中，表达式可能会对环境做出其他改变，这样的改变被称为副作用(side effect)，诸如变量的值被修改，或者输入输出流的数据有所变化</p></blockquote><ul><li>表达式<code>x + 1;</code>就产生了一个值，但是它没有产生一个副作用</li><li>表达式<code>x = x+ 3;</code>产生了一个值，同时也会产生一个副作用</li></ul><center><img loading="lazy" src="/posts/e8d0ec3/1.png" width="600"></center><h3 id="EXP32-C-Do-not-access-a-volatile-object-through-a-nonvolatile-reference">1.2. EXP32-C. Do not access a volatile object through a nonvolatile reference</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> **ipp; </span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> *ip;</span><br><span class="line">  <span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;i = %d.\n&quot;</span>, i);</span><br><span class="line">  ipp = &amp;ip; <span class="comment">/* May produce a warning diagnostic */</span> </span><br><span class="line">  ipp = (<span class="type">int</span>**) &amp;ip; <span class="comment">/* Constraint violation; may produce a warning diagnostic */</span></span><br><span class="line">  *ipp = &amp;i; <span class="comment">/* Valid */</span> </span><br><span class="line">  <span class="keyword">if</span> (*ip != <span class="number">0</span>) &#123; <span class="comment">/* Valid */</span> </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The assignment <code>ipp = &amp;ip</code> is not safe because it allows the valid code that follows to reference the value of the volatile object <code>i</code> through the non-volatile-qualified reference <code>ip</code></p></blockquote><ul><li>Accessing an object with a volatile-qualified type through a reference with a non-volatile-qualified type is undefined behavior</li></ul><h3 id="EXP33-C-Do-not-read-uninitialized-memory">1.3. EXP33-C. Do not read uninitialized memory</h3><blockquote><p>Although compilers and static analysis tools often detect uses of uninitialized variables when they have access to the source code, diagnosing the problem is difficult or impossible when either the initialization or the use takes place in object code for which the source code is inaccessible. </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_negative</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sign;</span><br><span class="line">  <span class="built_in">set_flag</span>(number, &amp;sign); </span><br><span class="line">  <span class="keyword">return</span> sign &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *array = (<span class="type">int</span> *)<span class="built_in">malloc</span>(OLD_SIZE * <span class="built_in">sizeof</span>(<span class="type">int</span>)); </span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == array) &#123; </span><br><span class="line">  <span class="comment">/* Handle error */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; OLD_SIZE; ++i) &#123; </span><br><span class="line">  array[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The programmer neglected to account for the case where <code>number</code> is equal to 0. Because the local variable <code>sign</code> is uninitialized when calling <code>set_flag()</code> and is never written to by <code>set_flag()</code>, the comparison operation exhibits undefined behavior when reading sign.</li><li>Reading uninitialized variables is undefined behavior and can result in <strong>unexpected program behavior</strong>. In some cases, these security flaws may allow the <strong>execution of arbitrary code</strong>.</li></ul><h3 id="EXP34-C-Do-not-dereference-null-pointers">1.4. EXP34-C. Do not dereference null pointers</h3><blockquote><p>Dereferencing a null pointer is undefined behavior</p></blockquote><ul><li>Dereferencing a null pointer is undefined behavior, typically <strong>abnormal program termination</strong>. In some situations, however, dereferencing a null pointer can lead to the execution of arbitrary code</li></ul><h3 id="EXP35-C-Do-not-modify-objects-with-temporary-lifetime">1.5. EXP35-C. Do not modify objects with temporary lifetime</h3><blockquote><p>The C11 Standard introduced a new term: <strong>temporary lifetime</strong>. Modifying an object with temporary lifetime is undefined behavior</p><ul><li>the <strong>structure</strong> or <strong>union</strong> contains a member with <strong>array</strong> type (including, recursively, members of all contained structures and unions) refers to an object with automatic storage duration and temporary lifetime.</li></ul></blockquote><hr><blockquote><p>This noncompliant code example conforms to the C11 Standard; however, it fails to conform to C99. If compiled with a C99-conforming implementation, this code has undefined behavior <strong>because the sequence point preceding the call to <code>printf()</code> comes between the call and the access by <code>printf()</code> of the string in the returned object</strong></p></blockquote><ul><li>也就是说C99下先后顺序不确定</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123; <span class="type">char</span> a[<span class="number">8</span>]; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> <span class="built_in">salutation</span>(<span class="type">void</span>) &#123; <span class="keyword">struct</span> <span class="title class_">X</span> result = &#123; <span class="string">&quot;Hello&quot;</span> &#125;; <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> <span class="built_in">addressee</span>(<span class="type">void</span>) &#123; <span class="keyword">struct</span> <span class="title class_">X</span> result = &#123; <span class="string">&quot;world&quot;</span> &#125;; <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Noncompliant*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, %s!\n&quot;</span>, <span class="built_in">salutation</span>().a, <span class="built_in">addressee</span>().a); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Compliant*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">X</span> my_salutation = <span class="built_in">salutation</span>(); </span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">X</span> my_addressee = <span class="built_in">addressee</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, %s!\n&quot;</span>, my_salutation.a, my_addressee.a); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Attempting to modify an array or access it after its lifetime expires may result in erroneous program behavior</li></ul><h3 id="EXP36-C-Do-not-cast-pointers-into-more-strictly-aligned-pointer-types">1.6. EXP36-C. Do not cast pointers into more strictly aligned pointer types</h3><blockquote><p>Do not convert a pointer value to a pointer type that is more strictly aligned than the referenced type. Different alignments are possible for different types of objects. If the type-checking system is overridden by an explicit cast or the pointer is converted to a void pointer (void *) and then to a different type, the alignment of an object may be changed.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; </span><br><span class="line">  <span class="type">char</span> c = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="type">int</span> *ip = (<span class="type">int</span> *)&amp;c; <span class="comment">/* This can lose information */</span> </span><br><span class="line">  <span class="type">char</span> *cp = (<span class="type">char</span> *)ip;</span><br><span class="line">  <span class="comment">/* Will fail on some conforming implementations */</span> </span><br><span class="line">  <span class="built_in">assert</span>(cp == &amp;c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i = c; </span><br><span class="line">  <span class="type">int</span> *ip = &amp;i;</span><br><span class="line">  <span class="built_in">assert</span>(ip == &amp;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>the char pointer <code>&amp;c</code> is converted to the more strictly aligned int pointer <code>ip</code>. On some implementations, <code>cp</code> will not match <code>&amp;c</code>.</li><li>Accessing a pointer or an object that is not properly aligned can cause a program to <strong>crash</strong> or give erroneous information, or it can cause <strong>slow pointer accesses</strong> (if the architecture allows misaligned accesses).</li></ul><h4 id="EXP36-C-EX2">1.6.1. EXP36-C-EX2</h4><blockquote><p>If a pointer is known to be correctly aligned to the target type, then a cast to that type is permitted. There are several cases where a pointer is known to be correctly aligned to the target type. The pointer could point to an object declared with a suitable alignment specifier. It could point to an object returned by aligned_alloc(), calloc(), malloc(), or realloc()</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdalign.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Align c to the alignment of an int */</span> </span><br><span class="line">  <span class="built_in">alignas</span>(<span class="type">int</span>) <span class="type">char</span> c = <span class="string">&#x27;x&#x27;</span>; </span><br><span class="line">  <span class="type">int</span> *ip = (<span class="type">int</span> *)&amp;c; </span><br><span class="line">  <span class="type">char</span> *cp = (<span class="type">char</span> *)ip;</span><br><span class="line">  <span class="comment">/* Both cp and &amp;c point to equally aligned objects */</span> </span><br><span class="line">  <span class="built_in">assert</span>(cp == &amp;c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXP37-C-Call-functions-with-the-correct-number-and-type-of-arguments">1.7. EXP37-C. Call functions with the correct number and type of arguments</h3><ul><li>Do not call a function with the wrong number or type of arguments.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* In another source file */</span> </span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">long</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* In this source file, no f prototype in scope */</span> </span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">g</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">f</span>(x); <span class="comment">// wrong</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">f</span>((<span class="type">long</span>)x); <span class="comment">//correct</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Calling a function with incorrect arguments can result in unexpected or unintended program behavior</li></ul><h3 id="EXP39-C-Do-not-access-a-variable-through-a-pointer-of-an-incompatible-type">1.8. EXP39-C. Do not access a variable through a pointer of an incompatible type</h3><ul><li>Modifying a variable through a pointer of an incompatible type (other than unsigned char) can lead to unpredictable results</li><li>Accessing an object by means of any other lvalue expression (other than unsigned char) is undefined behavior</li><li>Optimizing for performance can lead to aliasing errors that can be quite difficult to detect. Furthermore, as in the preceding example, unexpected results can lead to <strong>buffer overflow attacks</strong>, <strong>bypassing security checks</strong>, or unexpected execution.</li></ul><h3 id="EXP40-C-Do-not-modify-constant-objects">1.9. EXP40-C. Do not modify constant objects</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> **ipp; </span><br><span class="line"><span class="type">int</span> *ip;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">42</span>; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">  ipp = &amp;ip; <span class="comment">/* Constraint violation */</span> </span><br><span class="line">  *ipp = &amp;i; <span class="comment">/* Valid */</span> </span><br><span class="line">  *ip = <span class="number">0</span>; <span class="comment">/* Modifies constant i (was 42) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EXP42-C-Do-not-compare-padding-data">1.10. EXP42-C. Do not compare padding data</h3><ul><li>There may be unnamed padding within a structure object, but not at its beginning. . . . </li><li>There may be unnamed padding at the end of a structure or union.</li><li>unnamed members of objects of structure and union type do not participate in initialization. Unnamed members of structure objects have indeterminate value even after initialization<ul><li>结构和联合类型的对象的未命名成员不参与初始化。结构体对象的未命名成员在初始化后也有不确定的值</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">s</span> &#123; </span><br><span class="line">  <span class="type">char</span> c; </span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">13</span>]; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wrong</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> s *left, <span class="type">const</span> <span class="keyword">struct</span> s *right)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">memcmp</span>(left, right, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> s))) &#123; </span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//correct</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> s *left, <span class="type">const</span> <span class="keyword">struct</span> s *right)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> ((left &amp;&amp; right) &amp;&amp; (left-&gt;c == right-&gt;c) </span><br><span class="line">  &amp;&amp; (left-&gt;i == right-&gt;i) </span><br><span class="line">  &amp;&amp; (<span class="number">0</span> == <span class="built_in">memcmp</span>(left-&gt;buffer, right-&gt;buffer, <span class="number">13</span>))) &#123; </span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>memcmp()</code> is used to compare the contents of two structures, including any padding bytes</li></ul><h4 id="EXP42-C-EX1">1.10.1. EXP42-C-EX1</h4><center><img loading="lazy" src="/posts/e8d0ec3/2.png" width="550"></center><h3 id="EXP43-C-Avoid-undefined-behavior-when-using-restrict-qualified-pointers">1.11. EXP43-C. Avoid undefined behavior when using restrict-qualified pointers</h3><ul><li><p>deleting all instances of the qualifier from a program does not change its meaning (that is, observable behavior).</p></li><li><p>undefined behavior:</p><blockquote><p>A restrict-qualified pointer is assigned a value based on another restricted pointer whose associated block neither began execution before the block associated with this pointer, nor ended before the assignment </p></blockquote></li><li><p><strong><code>restrict</code> says that two pointers cannot point to overlapping重叠的 memory regions. The most common usage is for function arguments.</strong></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *restrict a; </span><br><span class="line"><span class="type">int</span> *restrict b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> c[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123; </span><br><span class="line">  c[<span class="number">0</span>] = <span class="number">17</span>; </span><br><span class="line">  c[<span class="number">1</span>] = <span class="number">18</span>;</span><br><span class="line">  a = &amp;c[<span class="number">0</span>]; </span><br><span class="line">  b = &amp;c[<span class="number">1</span>];</span><br><span class="line">  a = b; <span class="comment">/* Undefined behavior */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The incorrect use of restrict-qualified pointers can result in undefined behavior that might be exploited to cause data <strong>integrity</strong> violations.</li></ul><h3 id="EXP44-C-Do-not-rely-on-side-effects-in-operands-to-sizeof-Alignof-or-Generic">1.12. EXP44-C. Do not rely on side effects in operands to sizeof, _Alignof, or _Generic</h3><ul><li>Some operators <strong>do not evaluate their operands beyond the type information the operands provide</strong>. When using one of these operators, do not pass an operand that would otherwise yield a side effect since the side effect will not be generated.</li><li>The sizeof operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. In most cases, the operand is not evaluated. <ul><li>A possible exception is when the type of the operand is a variable length array type（VLA）</li><li>然而in the case of a VLA used in sizeof, have <strong>unspecified results</strong></li><li>所以结论还是不要在sizeof里副作用VLA</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">14</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">sizeof</span>(a++);</span><br></pre></td></tr></table></figure><ul><li>expression <code>a++</code> is not evaluated计算</li></ul><h3 id="EXP45-C-Do-not-perform-assignments-in-selection-statements">1.13. EXP45-C. Do not perform assignments in selection statements</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a = b) &#123; </span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123; <span class="comment">/* ... */</span> &#125; <span class="keyword">while</span> (<span class="built_in">foo</span>(), x = y);</span><br></pre></td></tr></table></figure><h4 id="EXP45-C-EX2">1.13.1. EXP45-C-EX2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((x = y)) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="EXP46-C-Do-not-use-a-bitwise-operator-with-a-Boolean-like-operand">1.14. EXP46-C. Do not use a bitwise operator with a Boolean-like operand</h3><ul><li>混淆了<code>&amp;</code>和<code>&amp;&amp;</code><ul><li>The expression <code>x &amp; y</code> will perform a bitwise operation on each individual bit in <code>x</code> and <code>y</code>. So if x is <code>1010</code> in binary and y is <code>1100</code> then <code>x &amp; y</code> will evaluate to <code>1000</code>.</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">getuid</span>() &amp; <span class="built_in">geteuid</span>() == <span class="number">0</span>)) &#123; <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">getuid</span>() &amp;&amp; <span class="built_in">geteuid</span>() == <span class="number">0</span>)) &#123; <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Risk-Assessment">1.15. Risk Assessment</h3><table><thead><tr><th>Rule</th><th>Severity</th><th>Likelihood</th><th>Remediation Cost</th><th>Priority</th><th>Level</th></tr></thead><tbody><tr><td>EXP30-C</td><td>Medium</td><td>Probable</td><td>Medium</td><td>P8</td><td>L2</td></tr><tr><td>EXP32-C</td><td>Low</td><td>Likely</td><td>Medium</td><td>P6</td><td>L2</td></tr><tr><td>EXP33-C</td><td>High</td><td>Probable</td><td>Medium</td><td>P12</td><td>L1</td></tr><tr><td>EXP34-C</td><td>High</td><td>Likely</td><td>Medium</td><td>P18</td><td>L1</td></tr><tr><td>EXP35-C</td><td>Low</td><td>Probable</td><td>Medium</td><td>P4</td><td>L3</td></tr><tr><td>EXP36-C</td><td>Low</td><td>Probable</td><td>Medium</td><td>P4</td><td>L3</td></tr><tr><td>EXP37-C</td><td>Medium</td><td>Probable</td><td>High</td><td>P4</td><td>L3</td></tr><tr><td>EXP39-C</td><td>Medium</td><td>Unlikely</td><td>High</td><td>P2</td><td>L3</td></tr><tr><td>EXP40-C</td><td>Low</td><td>Unlikely</td><td>Medium</td><td>P2</td><td>L3</td></tr><tr><td>EXP42-C</td><td>Medium</td><td>Probable</td><td>Medium</td><td>P8</td><td>L2</td></tr><tr><td>EXP43-C</td><td>Medium</td><td>Probable</td><td>High</td><td>P4</td><td>L3</td></tr><tr><td>EXP44-C</td><td>Low</td><td>Unlikely</td><td>Low</td><td>P3</td><td>L3</td></tr><tr><td>EXP45-C</td><td>Low</td><td>Likely</td><td>Medium</td><td>P6</td><td>L2</td></tr><tr><td>EXP46-C</td><td>Low</td><td>Likely</td><td>Low</td><td>P9</td><td>L2</td></tr></tbody></table><h2 id="Memory-Mem">2. Memory (Mem)</h2><p>.</p><h2 id="Array-ARR">3. Array (ARR)</h2><p>.</p>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Software-Security/">Software Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/e8d0ec3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>软件安全备忘录：Mem Management</title>
      <link>https://hejueyun.github.io/posts/de2aa2c7/</link>
      <guid>https://hejueyun.github.io/posts/de2aa2c7/</guid>
      <pubDate>Fri, 01 Apr 2022 11:56:49 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;risk-assessment&quot;&gt;1. risk assessment&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CERT C Coding Standard contains a &lt;strong&gt;risk assessment&lt;/strong&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="risk-assessment">1. risk assessment</h2><blockquote><p>CERT C Coding Standard contains a <strong>risk assessment</strong> section</p></blockquote><h3 id="Severity-严重性">1.1. Severity 严重性</h3><ul><li>How serious are the consequences of the rule being ignored</li></ul><table><thead><tr><th>Value</th><th>Meaning</th><th>Examples of Vulnerabilities</th></tr></thead><tbody><tr><td>1</td><td>low</td><td>Denial-of-service attack, abnormal termination</td></tr><tr><td>2</td><td>medium</td><td>Data integrity violation, unintentional information disclosure</td></tr><tr><td>3</td><td>high</td><td>Run arbitrary code</td></tr></tbody></table><h3 id="Likelihood-可能性">1.2. Likelihood 可能性</h3><ul><li>How likely is it that a flaw introduced by ignoring the rule can lead to an exploitable vulnerability</li></ul><table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>Unlikely</td></tr><tr><td>2</td><td>Probable</td></tr><tr><td>3</td><td>likely</td></tr></tbody></table><h3 id="Detection-and-Correction-检测和纠正">1.3. Detection and Correction 检测和纠正</h3><ul><li>How will we cope with detection and correction</li></ul><table><thead><tr><th>Value</th><th>Meaning</th><th>Detection</th><th>Correction</th></tr></thead><tbody><tr><td>1</td><td>low</td><td>Automatic(Static and Dynamic Analysis)</td><td>Automatic(Fault Localisation and Repair)</td></tr><tr><td>2</td><td>medium</td><td>Automatic(Static and Dynamic Analysis)</td><td>Manual</td></tr><tr><td>3</td><td>high</td><td>Manual(Code Inspection)</td><td>Manual</td></tr></tbody></table><h3 id="Risk-Management">1.4. Risk Management</h3><ul><li>The three values are then multiplied together for each rule: severity, likelihood and remediation cost<ul><li>10 distinct values are possible: 1, 2, 3, 4, 6, 8, 9, 12, 18, and 27</li></ul></li><li>priority range<ul><li>12 to 27 are Level 1</li><li>6 to 9 are Level 2</li><li>1 to 4 are Level 3</li></ul></li></ul><center><img loading="lazy" src="/posts/de2aa2c7/2.png" width="550"></center><h2 id="CERT-C-Coding-Standard">2. CERT C Coding Standard</h2><h3 id="MEM30-C-Do-not-access-freed-memory">2.1. MEM30-C. Do not access freed memory</h3><p><strong>dangling pointers</strong>悬空指针</p><ul><li>Pointers to memory that has been deallocated<ul><li>Accessing a dangling pointer is undefined behaviour and can result in exploitable vulnerabilities</li></ul></li></ul><p><strong>example</strong></p><ul><li><code>p</code> is freed before <code>p-&gt;next</code> is executed, so that <code>p-&gt;next</code> reads memory that has already been freed</li></ul><p><strong>Risk Assessment</strong></p><ul><li>Reading memory that has been freed<ul><li>abnormal program termination</li><li>denial-of-service attacks</li></ul></li><li>Writing memory<ul><li>execution of arbitrary code</li></ul></li></ul><h3 id="MEM31-C-Free-dynamically-allocated-memory-when-no-longer-needed">2.2. MEM31-C. Free dynamically allocated memory when no longer needed</h3><p><strong>example</strong></p><ul><li>The object allocated by the call to malloc() is not freed before the end of the lifetime of the last pointer</li></ul><center><img loading="lazy" src="/posts/de2aa2c7/3.png" width="550"></center><h3 id="MEM33-C-Allocate-and-copy-structures-containing-a-flexible-array-member-dynamically">2.3. MEM33-C. Allocate and copy structures containing a flexible array member dynamically</h3><blockquote><p>As a special case, the last element of a structure with more than one named member may have an incomplete array type; this is called a flexible array member. In most situations, the flexible array member is ignored. In particular, the size of the structure is as if the flexible array member were omitted except that it may have more trailing padding than the omission would imply.</p></blockquote><p><strong>example</strong></p><center><img loading="lazy" src="/posts/de2aa2c7/4.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/5.png" width="550"></center><h3 id="MEM34-C-Only-free-memory-allocated-dynamically">2.4. MEM34-C. Only free memory allocated dynamically</h3><ul><li>Freeing memory that is not allocated dynamically can result in heap corruption</li></ul><p><strong>Risk Assessment</strong></p><ul><li>The consequences of this error depend on the implementation<ul><li>they range from nothing to arbitrary code execution if that memory is reused by <code>malloc()</code></li></ul></li></ul><h3 id="MEM35-C-Allocate-sufficient-memory-for-an-object">2.5. MEM35-C. Allocate sufficient memory for an object</h3><ul><li>An insufficient amount of memory can be allocated where sizeof(long) is larger than sizeof(int), which can cause a heap buffer overflow</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/de2aa2c7/6.png" width="550"></center><h3 id="MEM36-C-Do-not-modify-the-alignment-of-objects-by-calling-realloc">2.6. MEM36-C. Do not modify the alignment of objects by calling realloc()</h3><ul><li>Do not invoke realloc() to modify the size of allocated objects that have stricter alignment requirements than those guaranteed by malloc()</li></ul><center><img loading="lazy" src="/posts/de2aa2c7/7.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/8.png" width="550"></center><center><img loading="lazy" src="/posts/de2aa2c7/9.png" width="550"></center><h2 id="Secure-C-Programming">3. Secure C Programming</h2><ol><li>Pointers should not be left uninitialized</li><li>They should be assigned either NULL or the address of a valid item in memory</li><li>When you use free to deallocate dynamically allocated memory, the pointer passed to free is not assigned a new value, so it still points to the memory location where the dynamically allocated memory used to be</li><li>When you free dynamically allocated memory, you should immediately assign the pointer either NULL or a valid address<ol><li>We chose not to do this for local pointer variables that immediately go out of scope after a call to free</li></ol></li><li>Undefined behavior occurs when you attempt to use free to deallocate dynamic memory that was already deallocated—this is known as a “double free vulnerability”</li><li>To ensure that you don’t attempt to deallocate the same memory more than once, immediately set a pointer to NULL after the call to free— attempting to free a NULL pointer has no effect</li><li>Function malloc returns NULL if it’s unable to allocate the requested memory</li><li>You should always ensure that malloc did not return NULL before attempting to use the pointer that stores malloc’s return value</li></ol><h2 id="Tool-Selection-and-Validation">4. Tool Selection and Validation</h2><blockquote><p>Although rule checking can be performed manually, with increasing program size and complexity, it rapidly becomes infeasible. For this reason, the use of static analysis tools is recommended</p><p>When choosing a source code analysis tool, it is clearly desirable that the tool be able to enforce as many of the guidelines on the wiki as possible</p></blockquote><h3 id="Completeness-and-Soundness">4.1. Completeness and Soundness</h3><blockquote><p>It should be recognized that, in general, determining conformance to coding rules and recommendations is computationally undecidable. The precision of static analysis has practical limitations.</p><ul><li>应该认识到，一般来说，确定是否符合编码规则和建议在计算上是无法决定的。静态分析的精确性有实际的限制。</li></ul></blockquote><blockquote><p>For example, the halting theorem of computer science states that programs exist in which exact control flow cannot be determined statically. Consequently, any property dependent on control flow—such as halting—may be indeterminate for some programs. A consequence of undecidability is that it may be impossible for any tool to determine statically whether a given guideline is satisfied in specific circumstances. The widespread presence of such code may also lead to unexpected results from an analysis tool.</p></blockquote><ul><li>the analysis may generate:<ul><li>Flase negatives</li><li>Flase positive</li></ul></li></ul><center><img loading="lazy" src="/posts/de2aa2c7/1.png" width="550"></center><ul><li>An analyzer is considered <strong>sound</strong> with respect to a specific guideline if it cannot give a false-negative result, meaning it finds all violations of the guideline within the entire program</li><li>An analyzer is considered <strong>complete</strong> if it cannot issue false-positive results, or false alarms</li><li>incomplete: <ul><li>You cannot prove everything that in the system is True</li><li>There are some assertion cannot be triggered.</li></ul></li></ul><h4 id="False-Negatives">4.1.1. False Negatives</h4><blockquote><p><strong>Failure to report a real flaw in the code is usually regarded as the most serious analysis error, as it may leave the user with a false sense of security</strong>. Most tools err on the side of caution and consequently generate false positives. </p></blockquote><h4 id="False-Positives">4.1.2. False Positives</h4><blockquote><p><strong>The tool reports a flaw when one does not exist</strong>. False positives may occur because the code is too complex for the tool to perform a complete analysis. The use of features such as function pointers and libraries may make false positives more likely</p></blockquote><h3 id="Taint-Analysis-污点分析">4.2. Taint Analysis 污点分析</h3><ul><li>If the value of an operand or argument may be outside the domain of an operation or function that consumes that value, and the value is derived from any external input to the program (such as a command-line argument, data returned from a system call, or data in shared memory), that value is tainted, and its origin is known as a tainted source.</li></ul><h4 id="Sanitization">4.2.1. Sanitization</h4><p>To remove the taint from a value, the value must be sanitized to ensure that it is in the defined domain of any restricted sink into which it flows.</p><ul><li>Operands and arguments whose domain is a subset of the domain described by their types are called restricted sinks. Any integer operand used in a pointer arithmetic operation is a restricted sink for that operand<ul><li>比如数组越界就算out of domain?</li></ul></li></ul><p>更多参考</p><ul><li><a href="https://clang.llvm.org/docs/AddressSanitizer.html">AddressSanitizer — Clang 15.0.0git documentation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Software-Security/">Software Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/de2aa2c7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Bounded Model Checking</title>
      <link>https://hejueyun.github.io/posts/ade5e95e/</link>
      <guid>https://hejueyun.github.io/posts/ade5e95e/</guid>
      <pubDate>Wed, 30 Mar 2022 22:02:54 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Circuit-Satisfiability&quot;&gt;1. Circuit Satisfiability&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/ade5e95e/7.png&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Circuit-Satisfiability">1. Circuit Satisfiability</h2><center><img loading="lazy" src="/posts/ade5e95e/7.png" width="650"></center><ul><li>problem</li></ul><center><img loading="lazy" src="/posts/ade5e95e/8.png" width="650"></center><ul><li>由此引入了Formula Satisfiability<ul><li>The <strong>SAT</strong> problem asks whether a given <strong>Boolean formula</strong> is satisfiable</li><li>The <strong>SMT</strong> decides the satisfiability of <strong>first-order logic formulae</strong> using the combination of different background theories</li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/9.png" width="450"></center><h2 id="BMC">2. BMC</h2><p>BMC: 有界模型检测</p><center><img loading="lazy" src="/posts/ade5e95e/4.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/10.png" width="650"></center><h3 id="MC-vs-BMC">2.1. MC vs BMC</h3><center><img loading="lazy" src="/posts/ade5e95e/5.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/6.png" width="650"></center><ul><li>注意completeness threshold</li></ul><h3 id="example">2.2. example</h3><center><img loading="lazy" src="/posts/ade5e95e/11.jpg" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/12.jpg" width="650"></center><h3 id="Step">2.3. Step</h3><center><img loading="lazy" src="/posts/ade5e95e/13.png" width="650"></center><hr><center><img loading="lazy" src="/posts/ade5e95e/14.JPG" width="350"></center><h2 id="SMT-based-BMC">3. SMT-based BMC</h2><ul><li>In SMT-based BMC, ψ is a <strong>quantifier-free</strong> formula in a <strong>decidable</strong> subset of <strong>first-order logic</strong> which is then checked for <strong>satisfiability</strong> by an SMT solver</li><li>SMT-based BMC must consider a number of <strong>issues that are not easily mapped into the theories supported by SMT solvers</strong> （i.e. embedded software）<blockquote><p>In previous work on SMTbased BMC for software only the theories of uninterpreted functions, arrays and linear arithmetic were considered, but no encoding was provided for <strong>ANSI-C constructs</strong> such as <strong>bit-level operations</strong>, <strong>fixedpoint</strong> <strong>arithmetic</strong>, <strong>pointers</strong> (i.e., pointer arithmetic and comparisons) and <strong>unions</strong>.</p></blockquote></li></ul><h3 id="Generation-of-VCs">3.1. Generation of VCs</h3><ul><li><p>VC: verification condition </p><blockquote><p>BMC unrolls the system k times and translates it into a verification condition (VC) $ψ$ such that $ψ$ is satisfiable if and only if $φ$ has a counterexample of depth k or less</p><p>The VC $ψ$ is a quantifier-free formula in a decidable subset of first-order logic, which is then checked for satisfiability by an SMT solver</p></blockquote></li><li><p><strong>model checking problem</strong> is formulated by constructing the following logical formula：$ψ_k&#x3D;I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} γ(s_j, s_{j+1}) \land \lnot φ(s_i)$</p><ul><li>$φ$ is a safety property</li><li>$I$ the set of initial states of $M$</li><li>$γ(s_j, s_{j+1})$ the transition relation of M between time steps $j$ and $j + 1$</li><li>$I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} γ(s_j,s_{j+1})$ <ul><li>represents the executions of M of length i and the original formula can be satisfied if and only if for some $i ≤ k$ there exists a reachable state at time step i in which φ is violated</li></ul></li></ul></li><li><p>If it is <strong>satisfiable</strong>, then the SMT solver provides a satisfying assignment, from which we can extract the values of the program variables to construct a counter-example</p><ul><li>A counter-example for a property φ is a sequence of states $s_0, s_1,…,s_k$ with $s_0 ∈ S_0$, $s_k ∈ S$, and $γ(s_i, s_{i+1})$ for $0 ≤ i &lt; k$.</li></ul></li><li><p>If it is <strong>unsatisfiable</strong>, we can conclude that no error state is reachable in k steps or less</p></li></ul><div class="admonition caution"><p>It is important to note that this approach can be used only to find violations of the property up to the bound k. In order to prove properties we need to compute the completeness threshold (CT), which can be smaller than or equal to the maximum number of loop-iterations occurring in the program (完备性阈值（CT），它可以小于或等于程序中出现的最大循环迭代次数)</p></div><ul><li>也就是有不有界都差不多了</li></ul><p>points</p><ul><li>the encoding techniques that we use to convert the constraints and properties from the ANSI-C programs into the <strong>different background theories of the SMT solvers</strong></li><li>approach to decide the best encoding and solver to be used during the verification process.</li></ul><h2 id="ESBMC">4. ESBMC</h2><h3 id="CBMC">4.1. CBMC</h3><ul><li>CBMC implements BMC for ANSI-C&#x2F;C++ programs using <strong>SAT</strong> solvers<ul><li>process C&#x2F;C++ code using the goto-cc tool</li><li>process the C&#x2F;C++ files and to build an abstract syntax tree (AST) (via internal parser based on Flex&#x2F;Bison)<blockquote><p>The typechecker of CBMC’s front-end annotates this AST with types and generates a symbol table. CBMC’s IRep class then converts the annotated AST into an internal, language-independent format used by the remaining phase of the front-end.</p></blockquote></li></ul></li></ul><h3 id="Tool-Architecture">4.2. Tool Architecture</h3><h4 id="Frontend">4.2.1. Frontend</h4><ul><li>The <strong>white</strong> boxes (except for the SMT solver) represent the components that we reused from the CBMC model checker without any modification</li></ul><h4 id="Middleware">4.2.2. Middleware</h4><ul><li><p>The <strong>gray</strong> boxes with dashed lines represent the components that we modified in order to:</p><ul><li>generate VCs to check for memory leaks (implemented in GOTO program</li><li>to simplify the unrolled formula (implemented in GOTO symex</li><li>to perform an <strong>up-front analysis</strong>先期分析 in the CFG of the program to determine the best encoding and solver for a particular program (implemented in GOTO symex</li></ul></li><li><p><strong>GOTO program component</strong></p><ul><li>converts the ANSI-C program into a GOTO-program, which simplifies the representation (e.g., replacement of switch and while by if and goto statements)</li><li>and handles the unrolling of the loops and the elimination of recursive functions</li></ul></li><li><p><strong>GOTO symex component</strong></p><ul><li>performs a symbolic simulation of the program</li></ul></li></ul><h4 id="Backend">4.2.3. Backend</h4><ul><li>In the back-end of ESBMC, we build two sets of quantifier-free formulae C (for the constraints) and P (for the properties)<ul><li>C encodes the first part of $ψ_k$ (more precisely, $I(s_0) \land \bigvee_{i&#x3D;0}^k \bigwedge_{j&#x3D;0}^{i-1} γ(s_j, s_{j+1})$ )</li><li>$¬P$ encodes the second part (more precisely, $\bigvee_{i&#x3D;0}^k \lnot φ(s_i)$)</li><li>we check $C \models_{\tau} P$ using an SMT solver<ul><li>If the answer is satisfiable, we have found a violation of the property φ, which is encoded in $ψ_k$. </li><li>If not, the property holds up to the bound k.</li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/ade5e95e/2.png" width="650"></center><center><img loading="lazy" src="/posts/ade5e95e/3.png" width="650"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/ESBMC/">ESBMC</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/ade5e95e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-SMT</title>
      <link>https://hejueyun.github.io/posts/39d160ca/</link>
      <guid>https://hejueyun.github.io/posts/39d160ca/</guid>
      <pubDate>Thu, 10 Mar 2022 16:05:21 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;SAT-vs-SMT-布尔可满足性问题-vs-可满足性模理论&quot;&gt;1. SAT vs SMT 布尔可满足性问题 vs  可满足性模理论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SMT将SAT推广到涉及 实数 、 整数 和&amp;#x2F;或各种 数据结构 （如 列表 、 数组 、</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="SAT-vs-SMT-布尔可满足性问题-vs-可满足性模理论">1. SAT vs SMT 布尔可满足性问题 vs  可满足性模理论</h2><ul><li>SMT将SAT推广到涉及 实数 、 整数 和&#x2F;或各种 数据结构 （如 列表 、 数组 、 位向量 和 字符串</li><li>由于布尔可满足性已经是 NP 完全的，所以 SMT 问题通常是 NP困难的 ，并且对于许多理论来说它是 不可判定(nondeterministic)</li></ul><center><img loading="lazy" src="/posts/39d160ca/1.png" width="550"></center><p>SMT是指另外一类公式的可满足性判定问题。这一类公式具有两个特点：</p><ul><li>在命题逻辑公式里面混入了一些一阶逻辑表达式</li><li>具有任意的布尔结构</li></ul><blockquote><p>SAT solvers are automatic and efficient</p><p>However, systems are usually designed and modeled at a higher level than the Boolean level and the translation to Boolean logic can be expensive. <strong>A primary goal of research in Satisfiability Modulo Theories (SMT) is to create verification engines that can reason natively at a higher level of abstraction, while still retaining the speed and automation of today’s Boolean engines</strong></p></blockquote><hr><ul><li><strong>SMT Solver &#x3D; SAT Solver + Theory Solver</strong></li></ul><h2 id="Solver-vs-Checker">2. Solver vs Checker</h2><ul><li>In model checking, you have a model and a specification (or property), and you check if the model meets the specification.</li><li>In SAT solving, you have a formula and you try to find a satisfying assignment to it.</li></ul><hr><ul><li>To perform model checking a reachability analysis is needed and to do this the program transitions are often executed symbolically</li><li>The solution to the resulting satisfaction problem is created by a solver</li></ul><h2 id="overflow-溢出">3. overflow 溢出</h2><h3 id="arithmetic-overflow-算术溢出">3.1. arithmetic overflow 算术溢出</h3><ul><li>当计算产生出来的结果是非常大的，大于寄存器或存储器所能存储或表示的能力限制</li><li>任何数除以零的计算（Divided by zero）“不是”算术溢出的一种。在数学上只能明显算是不明确的定义（Undefined）；它计算出来的结果只能当成是“没有”值，而不是非常大的无限数值</li></ul><h3 id="arithmetic-underflow算术下溢">3.2. arithmetic underflow算术下溢</h3><ul><li>算术下溢也称为浮点数下溢，是指计算机浮点数计算的结果小于可以表示的最小数</li><li>例如，浮点数指数范围为-128至127，一个绝对值小于2−127的浮点数就会造成下溢（假设-128的阶码用于表示负无穷）</li></ul><h2 id="Theory-理论">4. Theory 理论</h2><ul><li>A theory T is a consistent一致的 set of first-order formulas<ul><li><strong>Equality</strong> (also called theory of uninterpreted functions UF</li><li><strong>Linear arithmetic</strong></li><li><strong>Arrays</strong></li><li>…</li></ul></li></ul><h3 id="一致性（consistency">4.1. 一致性（consistency)</h3><ul><li>指一个形式系统中不蕴涵矛盾<ul><li>语义上：当一个命题S是由许多命题组成时，如果所有命题可同时为真，则S是一致的，否则S是不一致的</li><li>语法上：公理系统不能推导出两个相反的结果。亦即不存在命题P，使得P→Q和P→~Q同时成立</li></ul></li></ul><h3 id="Validity-modulo-theories-有效性模式理论">4.2. Validity modulo theories 有效性模式理论</h3><ul><li>$T_1∪T_2∪…∪T_n \models{} ∀\bar{x}F(\bar{x})$</li><li>here each $T_i$ is a first-order theory and $F(\bar{x})$ is a quantifier-free formule</li></ul><center><img loading="lazy" src="/posts/39d160ca/3.png" width="550"></center><ul><li>$\simeq{}$ 大概是指logical equivalence<ul><li>非反常识的，可以用常识来理解</li></ul></li></ul><h3 id="Satisfiability-Modulo-Theories-可满足性模式理论">4.3. Satisfiability Modulo Theories 可满足性模式理论</h3><ul><li>From Validity Modulo Theories to Satisfiability Modulo Theories:</li></ul><center><img loading="lazy" src="/posts/39d160ca/4.png" width="550"></center><h3 id="SMT-solvers">4.4. SMT solvers</h3><center><img loading="lazy" src="/posts/39d160ca/5.png" width="550"></center><h2 id="Theory-of-equality-QF-UF-and-UF">5. Theory of equality (QF_UF and UF)</h2><ul><li>QF是指<code>quantifier-free</code></li></ul><center><img loading="lazy" src="/posts/39d160ca/6.png" width="550"></center><ul><li>Function congruence: 函数同构<ul><li><em>差不多相当于双射？</em></li></ul></li></ul><center><img loading="lazy" src="/posts/39d160ca/7.png" width="550"></center><p><strong>issue</strong></p><ul><li>Equality axioms are very prolific多产的, resolution will quickly generate many irrelevant clauses.</li><li>Resolving with symmetry axiom we can produce all permutations of left and right sides of all equations. Transitivity axiom can resolve with symmetry axioms and itself producing longer clauses.</li></ul><h3 id="Inference-rules">5.1. Inference rules</h3><center><img loading="lazy" src="/posts/39d160ca/8.png" width="550"></center><ul><li>Paramodulation: 调节</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/9.png" width="550"></center><ul><li>Idea: Only replace “bigger” terms by “smaller” terms</li><li>注意第七步不是 $f(b)&#x3D;f(b)$ ，不要马虎</li></ul><h3 id="Uninterpreted-function">5.2. Uninterpreted function</h3><ul><li>In mathematical logic, an uninterpreted function or function symbol is one that has no other property than its name and n-ary form. Function symbols are used, together with constants and variables, to form terms.<ul><li>相当于单纯0-ary符号$f$</li></ul></li><li>The theory of uninterpreted functions is also sometimes called the free theory, because it is freely generated, and thus a free object<ul><li>不被量词约束的</li></ul></li></ul><center><img loading="lazy" src="/posts/39d160ca/10.png" width="550"></center><h2 id="Theory-of-Arrays">6. Theory of Arrays</h2><ul><li>Array signature $Σarray &#x3D;&lt; { select&#x2F;2, store&#x2F;3 } , { \simeq{}} &gt;$</li></ul><h3 id="Axioms公理">6.1. Axioms公理</h3><ul><li>$∀A, I , E [select(store(A, I , E ), I ) \simeq{} E ]$<ul><li>if we store an element in an array and read from the same position then we should obtain the same element</li><li>注意store的返回值是一个新的Array</li></ul></li><li>$∀A, I , J, E [I \not\simeq{} J → select(store(A, I , E ), J) \simeq{} select(A, J)]$<ul><li>if we store an element at position i then at all other positions elements are unchanged</li></ul></li></ul><h2 id="Theory-of-Linear-Arithmetic-（QF-LRA）">7. Theory of Linear Arithmetic （QF_LRA）</h2><h3 id="linear-constraints-线性约束">7.1. linear constraints 线性约束</h3><center><img loading="lazy" src="/posts/39d160ca/11.png" width="550"></center><hr><center><img loading="lazy" src="/posts/39d160ca/12.png" width="550"></center><center><img loading="lazy" src="/posts/39d160ca/15.png" width="550"></center><h3 id="Inference-rules-1">7.2. Inference rules</h3><center><img loading="lazy" src="/posts/39d160ca/14.png" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/16.png" width="550"></center><h2 id="SMT-solver">8. SMT solver</h2><center><img loading="lazy" src="/posts/39d160ca/13.png" width="550"></center><h3 id="Abstract-DPLL">8.1. Abstract DPLL</h3><center><img loading="lazy" src="/posts/39d160ca/17.jpg" width="550"></center><center><img loading="lazy" src="/posts/39d160ca/18.jpg" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/39d160ca/19.jpg" width="550"></center><ul><li>可以看到theory unsat的原因是1，2所以可以直接回退</li><li>注意最后一步不是decide所以没有back jump</li></ul><h3 id="minimal-steps">8.2. minimal steps</h3><center><img loading="lazy" src="/posts/39d160ca/21.png" width="550"></center><ul><li>简而言之就是只考虑产生影响的那几步</li></ul><center><img loading="lazy" src="/posts/39d160ca/20.jpg" width="550"></center><h2 id="参考">9. 参考</h2><ul><li><a href="https://stackoverflow.com/questions/43908872/smt-sat-solver-vs-model-checker">SMT&#x2F;SAT Solver vs Model Checker - Stack Overflow</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/39d160ca/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-归结</title>
      <link>https://hejueyun.github.io/posts/e24b211f/</link>
      <guid>https://hejueyun.github.io/posts/e24b211f/</guid>
      <pubDate>Sun, 06 Mar 2022 21:08:15 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;atom-vs-literal-vs-term&quot;&gt;1. atom vs literal  vs term&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;a: $p$&lt;ul&gt;
&lt;li&gt;在一阶逻辑下得到扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;l: $p$  $\lnot{p}$</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="atom-vs-literal-vs-term">1. atom vs literal  vs term</h2><ul><li>a: $p$<ul><li>在一阶逻辑下得到扩展</li></ul></li><li>l: $p$  $\lnot{p}$  <ul><li>注意扩展到命题逻辑中时，$P$就可以带上函数和谓词<blockquote><ul><li>In propositional calculus a literal is simply a propositional variable or its negation.</li><li>In predicate calculus a literal is an atomic formula or its negation, where an atomic formula is a predicate symbol applied to some terms, ${\displaystyle P(t_{1},\ldots ,t_{n})}$ with the terms recursively defined starting from constant symbols, variable symbols, and function symbols. For example,  ${\displaystyle \neg Q(f(g(x),y,2),x)}$ is a negative literal with the <strong>constant symbol</strong> 2, the <strong>variable symbols</strong> x, y, the <strong>function symbol</strong>s f, g, and the <strong>predicate symbol</strong> Q.</li></ul></blockquote></li></ul></li><li>t: $p$  $f^{n}$  $a$</li></ul><h2 id="合一-Unification">2. 合一 Unification</h2><ul><li>Let s and t be two terms (or atoms), A <strong>unifier</strong> of s and t is a substitition <strong>σ</strong> that makes the two identical, formally<ul><li>sσ &#x3D; tσ</li></ul></li></ul><center><img loading="lazy" src="/posts/e24b211f/1.png" width="550"></center><h3 id="最一般的合一-Most-general-unifier">2.1. 最一般的合一 Most general unifier</h3><p>σ is a most general unifier of s and t, denoted mgu(s, t),</p><ul><li>if σ is a unifier of s and t and for any other unifier θ of s and t,</li><li><strong>there is</strong> a substitution ρ such that<ul><li>σρ &#x3D; θ</li></ul></li></ul><h3 id="Unifiers-and-most-general-unifiers-in-general">2.2. Unifiers and most general unifiers, in general</h3><center><img loading="lazy" src="/posts/e24b211f/2.png" width="550"></center><ul><li>simultaneous&#x2F;ˌsaɪ.məlˈteɪ.ni.əs&#x2F; 同时的</li></ul><h2 id="unification-algorithm-合一算法求解mgu">3. unification algorithm 合一算法求解mgu</h2><ul><li>Input: An equational system E</li><li>Goal: Determine if E is unifiable, and <strong>if it is, to read off mgu</strong></li><li>Output: Equational system E’ in <strong>solved form</strong>, or ⊥ (for not unifiable)</li><li>Perform the following transformations on the set of equations <strong>as long as any one of them is applicable</strong>:<ul><li>注意一定要用到不能用为止，一般结果会是左式由带有同一变量的右式表达，例如：<ul><li>$x&#x3D;y$</li><li>$z&#x3D;f(y)$</li></ul></li></ul></li></ul><ol><li>Transform t&#x3D;x, where t is not a variable, to x&#x3D;t. 变量换到左侧，非变量换到右边</li><li>Erase the equation x&#x3D;x. 消除相等式</li><li>Let t′&#x3D;t″ be an equation where t′, t″ are not variables. “非变量&#x3D;非变量”的情况<ol><li>If the outermost function symbols of t′ and t″ are not identical, terminate the algorithm and report not unifiable. 如果t′和t″的最外层函数符号不一致，则终止算法，并报告<strong>不可合一</strong></li><li>Otherwise, replace the equation $f(t_1^{‘},…t_k^{‘})&#x3D;f(t_1^{‘’},…t_k^{‘’})$ by the k equations $t_1^{‘}&#x3D;t_1^{‘’},…t_k^{‘}&#x3D;t_k^{‘’}$ . 否则替换</li></ol></li><li>Let x&#x3D;t be an equation such that x has another occurrence in the set. 同一变量多次出现<ol><li>If x occurs in t and x differs from t, terminate the algorithm and report not unifiable</li><li>Otherwise, transform the set by replacing all occurrences of x in other equations by t. 否则，通过将其他方程中所有出现的x替换为t来转换这个集合</li><li>rule 4 also called the <strong>occurs-check</strong></li></ol></li></ol><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/3.png" width="650"></center><ul><li>得到mgu</li></ul><h3 id="⇒-U-unification-rules">3.1. $⇒_{U^-}$unification rules</h3><center><img loading="lazy" src="/posts/e24b211f/4.png" width="550"></center><ul><li>Orientation: 方向</li><li>Trivial: 琐碎（可理解为无价值）</li><li>Disagreement&#x2F;Clash：分歧&#x2F;冲突</li><li>Decomposition：分解</li><li>Occur-check：出现检查（可理解为存在检查）</li><li>Substitution：替换</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/5.png" width="550"></center><h3 id="term-equation">3.2. term equation</h3><ul><li>The unifiability of ${p(f(x)),g(y),p(f(f(a))),g(z)}$ is expressed by the set of term equations<ul><li>${f(x)&#x3D;f(f(a)), g(y)&#x3D;g(z)}$</li></ul></li></ul><h3 id="solved-form">3.3. solved form</h3><ul><li>A set of term equations is in solved form iff:<ul><li>All equations are of the form $x_i &#x3D;t_i$ where x i is a variable.</li><li>Each variable $x_i$ that appears on the left-hand side of an equation does not appear elsewhere in the set.</li></ul></li><li>A set of equations in solved form defines a substitution:<ul><li>${x_1\leftarrow{t_1},…,x_n\leftarrow{t_n}}$</li></ul></li></ul><h2 id="Ordered-resolution-with-selection">4. Ordered resolution with selection</h2><h3 id="Selection-functions">4.1. Selection functions</h3><ul><li>A selection function is a mapping<ul><li>$S : C\rightarrowtail{}$ (multi-)set of occurrences of <strong>negative</strong> literals in C</li></ul></li></ul><center><img loading="lazy" src="/posts/e24b211f/7.png" width="550"></center><h3 id="Maximal-and-strictly-maximal-literals">4.2. Maximal and strictly maximal literals</h3><center><img loading="lazy" src="/posts/e24b211f/6.png" width="550"></center><ul><li>特别注意第三个，要求的是there exist就可，因此类似 $P(f (x)) ∨ P (g(y))$中找最大，就得分情况讨论<ul><li>是否可能相等？</li></ul></li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/8.png" width="550"></center><ul><li>A literal L is (strictly) maximal wrt. a general clause C<ul><li>iff ∃ gr. σ s.t. Lσ and $C_σ$ are ground and for all L’ in $C_σ$: $L_σ\geq{L’}$ ($L_σ&gt;{L’}$)</li></ul></li></ul><h2 id="General-resolution-system">5. General resolution system</h2><p>Ordered resolution with selection is parameterised参数化 with:</p><ul><li>a fixed total, well-founded ordering $&gt;$ on ground atoms</li><li>a fixed selection function S</li></ul><h3 id="Resolution-rule">5.1. Resolution rule</h3><center><img loading="lazy" src="/posts/e24b211f/9.png" width="550"></center><ul><li>Note: Renaming variables apart needs to be applied to the premises before applying resolution</li></ul><h3 id="Factoring-rule">5.2. Factoring rule</h3><center><img loading="lazy" src="/posts/e24b211f/10.png" width="550"></center><ul><li>Factors即为: $C∨A$</li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/11.png" width="550"></center><center><img loading="lazy" src="/posts/e24b211f/16.png" width="550"></center><p><strong>注意</strong></p><center><img loading="lazy" src="/posts/e24b211f/17.png" width="550"></center><h3 id="for-propositional-x2F-ground-clauses-回退到命题逻辑">5.3. for propositional&#x2F;ground clauses 回退到命题逻辑</h3><center><img loading="lazy" src="/posts/e24b211f/12.png" width="550"></center><h3 id="Search-spaces-become-smaller">5.4. Search spaces become smaller</h3><center><img loading="lazy" src="/posts/e24b211f/13.png" width="550"></center><h3 id="Properties-of-ordered-resolution-with-selection">5.5. Properties of ordered resolution with selection</h3><center><img loading="lazy" src="/posts/e24b211f/15.png" width="550"></center><p><strong>example</strong></p><center><img loading="lazy" src="/posts/e24b211f/14.png" width="550"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/e24b211f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-程序验证-协议安全分析</title>
      <link>https://hejueyun.github.io/posts/fa02fe64/</link>
      <guid>https://hejueyun.github.io/posts/fa02fe64/</guid>
      <pubDate>Thu, 03 Mar 2022 12:53:42 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;The-Neuman-Stubblebine-key-exchange-protocol&quot;&gt;1. The Neuman-Stubblebine key exchange protocol&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="The-Neuman-Stubblebine-key-exchange-protocol">1. The Neuman-Stubblebine key exchange protocol</h2><center><img loading="lazy" src="/posts/fa02fe64/1.png" width="550"></center><center><img loading="lazy" src="/posts/fa02fe64/2.png" width="550"></center><h3 id="breaking">1.1. breaking</h3><center><img loading="lazy" src="/posts/fa02fe64/5.png" width="550"></center><ul><li>The intruder now sends a message to B, and the message will make B believe it’s actually from A. Thus B will start to use the wrong key, i.e. an insecure key. <ul><li>入侵者现在向B发送一个信息，这个信息将使B相信它实际上来自A，因此B将开始使用错误的密钥，即一个不安全的密钥。</li></ul></li></ul><h2 id="Verification-of-security-protocols-using-resolution">2. Verification of security protocols using resolution</h2><ul><li>The idea is that the security property says an unsafe state is possible</li><li>Since first-order logic is not <strong>decidable</strong>, there is however no guarantee that the saturation will terminate when the security property does not hold. Non-termination can therefore indicate the existence of a potential attack on the protocol.</li></ul><center><img loading="lazy" src="/posts/fa02fe64/3.png" width="550"></center><h2 id="Assumptions-in-security-protocol-analysis">3. Assumptions in security protocol analysis</h2><p>What can an intruder do?</p><ul><li>The intruder can capture all messages sent by one participant to another</li><li>It can send a message it has constructed to any other participant</li><li>It can generate new keys, new nonces, timestamps . . .</li><li>It can construct new messages from the ones it has, using legal constructors</li><li>The intruder can decompose分解 tuples from which messages are formed</li><li>It can decrypt encrypted parts, but only if it knows the key I.e. we assume perfect cryptography: an intruder cannot break any keys nor does it know any of the initial keys $K_{at}$ at or $K_{bt}$</li></ul><h2 id="Encoding">4. Encoding</h2><center><img loading="lazy" src="/posts/fa02fe64/4.png" width="550"></center><h3 id="The-capabilities-of-the-intruder入侵者">4.1. The capabilities of the intruder入侵者</h3><center><img loading="lazy" src="/posts/fa02fe64/6.png" width="550"></center><center><img loading="lazy" src="/posts/fa02fe64/7.png" width="550"></center><h2 id="SPASS">5. SPASS</h2><blockquote><p>SPASS is an automated theorem prover for first-order logic with equality. So the input for the prover is a first-order formula in our syntax. </p><ul><li>Running SPASS on such a formula results in the final output SPASS beiseite: <code>Proof found.</code> if the formula is valid, </li><li>SPASS beiseite: <code>Completion found.</code> if the formula is not valid </li><li>and because validity in first-order logic is undecidable, <strong>SPASS may run forever without producing any final result.</strong></li></ul></blockquote><hr><blockquote><p>An SPASS input file consists of three parts, a description part started with list_of_descriptions., a part where the signature is declared starting with list_of_symbols., a part where all axioms are given, starting with list_of_formulae(axioms). and a final part where all conjectures are presented, starting with list_of_formulae(conjectures)</p><p>Then SPASS tries to prove that the conjunction of all axiom formulae implies the disjunction of all conjectures</p></blockquote><h2 id="Saturation">6. Saturation</h2><blockquote><p>Aclause C is a <strong>condensation</strong> of a clause D,if C is a proper (unordered) factor of D that subsumes D</p><p>A set of clauses N is called <strong>saturated</strong> if it is closed under condensation, the deletion of subsumed clauses and any clause generated by an ordered resolution inference from clauses from N is subsumed by some clause in N</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/fa02fe64/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>西行漫记-其六</title>
      <link>https://hejueyun.github.io/posts/2ba8f82c/</link>
      <guid>https://hejueyun.github.io/posts/2ba8f82c/</guid>
      <pubDate>Sat, 26 Feb 2022 22:26:20 GMT</pubDate>
      
      <description>有东西被加密了, 请输入密码查看.</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="a3bc817c3908ae67f704dabface47ef124dac94f6605c34ea7c8fd49515ab6c8">63a8672ddbb5b9158eb55097173249fad22b496a8876cf71b079381ad234cb95f094e21606daf1717aa32ac9bb46c3ec99a387f812d0a9e5a45bfd529c7b8ed5f86a0a6f45900b64a15b4130bd6ed52d8ef450f58e114d4fe18874ddcc125aa94adc7a4a8723b962b279a3d4fb7200835168fbe214ea68576e259f43343e2c7a777ab0f877cfb6fb4968bbe09478ebb4c8d82d533ea85f08a5195375f39c020dcf3cc513e539010453d4dc45f2948ba6de705108a00df9f7fc634cf34cf86bc985f7ae3ca2e1587e4469e2a695bfe5527047967d1184b513411930c48dbd3b183dbfe7eee873eff520957b049943bd7990c9027c77c010cf1c251f76064497d73aea9ab2a92c884d7e6a130b44100c9333493c6642eb39253827e8e7ee7be21ffa64373cba57238a83b953034350313408910b4f2679f2f08874a410bd240537e5df887e00d303bf15e0484321af3906101f651a5df62e1da0c56825bc53493bbacbdf596d137e27fd97b6c628bac1d18116316522c0f356832bdd769f420308aa8da425e501748296d0620ffcd2d204a6dc5558914c11fd7a1524e4a74f9b204bbd20c161cc1478f443c050f4ba0a2a920b98de1a54ffce1c44fc2f468058f0bb1e886e03126f45b33810e77bf6f346451c74bd304ed8bab57935484589bc2b1a746cb687de37762f1e3b10d6cfd7444ea4341b5bbaa363926e42f063f44b8f46d6605499ae1f341a8c790ae5bd18455a40510f81640659cedde4b9a1fc6db20b8923908bfcf4ae5c13fc518f33bc48541a2a7d3d6fa89d14d5b18660c04253e8df7a62ce6fc0f4ad77bacf3ed63e1debcc332519106136f1b2641e6b830db62a33b2814ade061b05c363610e54b4c33600d8f2a0b2cf0b5403307e91398cbbbb0ce1f3b35c40cf626f9a795e2c058a9888a016c8c300275a53050c70428dc6d716a592ca1dce1d3197c52f6b275d568a2743e0a76310126832d79fdcfc43732d3899a62320175ad5adfe51baf995eab391023ce63c80e7455f778279bae1b6cfa16a1f3fd6064e80b6edb960c9308f82803b28c9816effd3c9f18b7513a3462ff3283e482b374f639c4d371942db68469fbb882df4fba4cb46057f569b75b81dd528d80365daf13cf487e52bc0d872243dbcfa67e2662311be95169f4e3457537866e44a36183036a169aacb02f0364d0d8cd0e140707d5209b2a1af7333465fb987f7b541f65c6cc0fbd606bfe4f0c894625694563e1066468c3eb3621726bd64d23457ecfd39f2a80d573eaaf792330c5f431e88122d3cfa94437d24ab67b6275def89af510353f2a7489517b3c411db28635f7153403306aad70c5e9df7334a7fd589a6a3f75a51a7d6b6f787483545bfa8792edc7b2e4dcfc0fe43266617f408469c97bec089db0698d88bb025bfbd78f55264612f849e271cccf941010f831a58402c52173aa717e8b37950c2a3b460296672b585a2ae788b6f3b7c8090b5607688c4cafd8127c8e4ee6cd27a674759cae2d3491fa85850f8b7a2a6e4bcafe4b7130eb79a9520098f2fb0b47a58bc5befda2d0dff0985f0a5cc7b772d813bba5ef07576a87164e367fc73f2a0bf6835de598f88ecd078a36b94b34b8a357e603cded2557ec4f70929061db31af874a1464d0e0dd987fc578a673d0a337ae4e741be8864ab69bbc3bdebd6cc40f6ca541d2da832b73a9e0a784ec4a2a9881589cf5f1eca7ced187f2d61810e0605850bb28a2e0ddfd6d5fda5f6daf84446297a9ed808180db8985a74dc9bda783c8404a40816f5aa2e46472bfb0910fcbbf951ef6c00918ad218dd9ab2987f761d0925d0ef773c46fe4b7a161cedfc9b45c3ffdeb1de189b73be8fb6b988d56f7a0995999f0142f5cff66e3f48f8ff9aa4fa5d55cae1b3b28982f24b60eb6b2a013d1dbfe24a8ae7d060303846c826d30750266845c421f1cfb6284aaacfb809aa1f8cb2569943fa79b0a62156ce334515f7c49b2b3d7e15e7119bb61de88efddfcdddef82aa1c03a6a406a5558f5a19366ac18a0592f71ca072505313fb73a1170cdf6a366ab5af2c52234c20f20d5aa161384bc13a4181564db10d98fe6cd0df70f7d0b656d4cf22a4452ac33ed23ab0850e97ec391945ea2d35aa57102d3f7c9a52caa07c69252cc294b2917a61a22745bba81d0ab2cf3ab8fe96f5f8b88743444dea132dbb071087860a659b2f898c983e26249acf4e28b490b33a068809d43ee74895d7151833327cf9292c66c06fc66cc9e95586aba56fae820ff58101e2f3e7ccd5822b040cfc1c056b6ef68f8969d3c99f5a30d315b6a034bc88297af5601d1871e16caf265742b3c6a642b19e9f6f6794db94031bf90772091158922f53eec44078767c2b91d0a3209f32579c1a614ee5ecd41649d5e2914539a1b5099d13ea62045953d898e3c3299aa755f8a7d7f66d786f96a0678ba89744e1c1dd8eaed3853524794b50e94d5e42ec7d0c081151729648645308b00e9c95cc05ec5d649abf41b0a3ee729dc47aaffba089a3a7e228db9872879a8ce2750c66da4ab6c4e7062ab5ba7d323a2a07152a76f579c7cde3de94b9ac3a40049a6657917455fb6aeb02b75a7624e0f9bd302f852f98cc5949dbc91698a64c9cc57ad6a9c381ed372f0c3a390c9fe743e3855f7ee27289155bad0ef53c288fee088346517abc31e122e4897ff8fa5ce878ef35d93a1ba0e1a4ce39959c887525c1c1b8067f157686a8f7ac89d55078ec7230c4f62dfe01f6ae148cf3c62e428bc058a2121b8ea479aee258882493a4d5a91b633c6ec15f907ca53b06a3f0d0e05ec37e3a1db600461ce81b5b93ed5f894aa7f2feb1ed509912cdb3efd473444055d0fb07e0b456c6e1ad1bd4abd6ac38b2d01087f8baeffcb7594332834ea8295fa7d4668f0abb95f0242cfcd5953fd3b11b643a4e25b9c5ec13387e99faf24235dfdb215433217508d107c4393a84ca6bc4bd49bb562b77298220918e52e2d88f2a3c5177795aae347a4177f6d4937cacbd5e5c4ecbcc7081181b4bd65e862d818047d7e16712db3b8ec117d6230e832c8c9f590223188ca37d7f49620c3cf0fd771bb277bb4d1ccbbaa4c604248234fcbe3ed2a3cfb01c6ff72184ebaca088ccdb479e3bc41f475386277fbef50af51554d77d319aee4583a3a914df0fcf1461522c583cc55feac3e639133f196a8dc98a2c3d0fb746fe35ff6c87415712b49f144b33dc595c82daef511a693bf77f20537d7856befc651a7fb168cd3712c1bd8fe7018d8bdb296acfbdbac10427ab9b04b9aff10661fb759f66015099dab02de9ea25d9e6899a4ee5f2521f7e2093571ee1228005f4ca42af51d8cac3d507aecc9683a7105e89f467c7d451255b92fc2fe5822b3c3b31ec1d8caa8efdcd124545938a1751f30e3f7307f946ddf0d57c2cc8b4506663fd1f4b86beb3d82364c1ad1c63f22610b425d698806564308e162117445c0cf4f5fdc901ec86268162e776d60b7625189fdbdf9dc92e5655c8ccf2a7370d6bdbf69292964890d64be44c88f7b630e96bbfcd852eb083fd79ca55c7f12a4d378a54b9bfb074d3e916112d5a58cf8d749b5cd74d4007f1aaf349dfe63a400b06a507852c241b1aa296162365e0ad043a47209ae80845e6e4fced64b7f52dd8a9163d896f4bf443d5b199766366013d062a794181fde28ac9331795bc2cc77a5e0b52de3c3c00c099e9d3cb373ef771c69c20aed9255385280c3e42eec53920469ab690c8c6d49158146388b401b3186fd462ac2abd820b57e5e9325d859030d70616b14d2bb991ba7b20883a93425828fc70ae6f8171160be59150b2491816f49d6e832bb6c66f5f513ddbfb0d59f6a045dc88288ca21bba554a7a134fa3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/essay/">随笔</category>
      
      
      <category domain="https://hejueyun.github.io/tags/essay/">essay</category>
      
      
      <comments>https://hejueyun.github.io/posts/2ba8f82c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-逻辑编程</title>
      <link>https://hejueyun.github.io/posts/faaea58c/</link>
      <guid>https://hejueyun.github.io/posts/faaea58c/</guid>
      <pubDate>Fri, 25 Feb 2022 22:58:44 GMT</pubDate>
      
        
        
          
          
      <description>&lt;blockquote&gt;
&lt;p&gt;Resolution was originally developed as a method for automatic theorem proving. Later, it was discovered that a restricted</description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Resolution was originally developed as a method for automatic theorem proving. Later, it was discovered that a restricted form of resolution can be used for programming a computation. This approach is called logic programming. </p><ul><li>A <strong>program</strong> is expressed as <strong>a set of clauses</strong> </li><li>A <strong>query</strong> is expressed as <strong>an additional clause</strong> that can <strong>clash</strong>冲突 with one or more of the program clauses. <strong>The query is assumed to be the negation of result of the program</strong>. If a refutation succeeds, the <strong>query</strong> is not a <strong>logical consequence</strong> of the program, so its <strong>negation</strong> must be a <strong>logical consequence</strong>.</li></ul><p>解析最初是作为一种自动定理证明的方法而开发的。后来，人们发现，一种受限制的决议形式可以用于计算的编程。这种方法被称为逻辑编程。</p><ul><li>一个程序被表达为一组子句</li><li>一个查询被表达为一个额外的子句，可以与一个或多个程序子句发生冲突。查询被认为是对程序结果的否定。如果反驳成功，查询不是程序的逻辑结果，所以它的否定必须是一个逻辑结果</li></ul></blockquote><h2 id="From-Formulas-in-Logic-to-Logic-Programming">1. From Formulas in Logic to Logic Programming</h2><p><strong>program clauses</strong></p><ul><li>按我的理解就是霍恩子句</li></ul><p><strong>goal clause</strong></p><ul><li>Suppose now that we have a set of program clauses and we want to prove that some formula:<ul><li>$G_1\land{}…\land{}G_n$</li></ul></li><li>is a <strong>logical consequence</strong> of the set. This can be done by taking the negation of the formula:<ul><li>$\lnot{}G_1\lor{}…\lor{}\lnot{}G_n$</li></ul></li><li>and refuting it by resolution with the program clauses<blockquote><p>The formula $¬ G_1∨⋯∨¬ G_n$ , called a <strong>goal clause</strong>, consists entirely of negative literals, so it can only clash on the single positive literal of a program clause</p></blockquote></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/faaea58c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-时序逻辑-语法与语义</title>
      <link>https://hejueyun.github.io/posts/150c47ae/</link>
      <guid>https://hejueyun.github.io/posts/150c47ae/</guid>
      <pubDate>Thu, 24 Feb 2022 13:30:06 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Introduction&quot;&gt;1. Introduction&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Temporal logic is a formal system for reasoning about time. Temporal logic has</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Introduction">1. Introduction</h2><blockquote><p>Temporal logic is a formal system for reasoning about time. Temporal logic has found extensive application in computer science, because the behavior of both hardware and software is a function of time.</p></blockquote><blockquote><p>Temporal logics are related to formal systems called modal logics. Modal logics express the distinction between what is necessarily true and what is possibly true. For example, the statement ‘7 is a prime number’ is necessarily true because—given the definitions of the concepts in the statement—the statement is true always and everywhere. In contrast, the statement the head of state of this country is a king is possibly true, because its truth changes from place to place and from time to time. Temporal logic and modal logic are related because ‘always’ is similar to ‘necessarily’ and ‘eventually’ to ‘possibly’.</p><p>时间逻辑与称为模态逻辑的形式系统有关。模态逻辑表达了什么是必然真实和什么是可能真实之间的区别。例如，”7是质数 “这个陈述必然是真实的，因为–考虑到陈述中概念的定义–这个陈述总是真实的，而且无处不在。相比之下，这个国家的国家元首是国王的说法可能是真的，因为它的真理在不同的地方和不同的时间会发生变化。时间逻辑和模态逻辑是相关的，因为 “总是 “类似于 “必然”，”最终 “类似于 “可能”。</p></blockquote><ul><li>时间逻辑与模态逻辑相似，只是<strong>状态</strong>被认为是指定在某一特定时间点上的真实情况，而<strong>转换</strong>则定义了时间的流逝</li></ul><h2 id="PTL">2. PTL</h2><h3 id="Syntax">2.1. Syntax</h3><ul><li>The syntax of propositional temporal logic (PTL) is defined like the syntax of propositional logic, <strong>except for the addition of two additional unary operators</strong>:<ul><li><code>□</code> , read always</li><li><code>◊</code> , read eventually</li></ul></li><li>$(¬ ◊p)∧(□¬ q)$<ul><li>the temporal operators and negation have higher precedence优先权 than the conjunction operator</li></ul></li></ul><h3 id="semantic">2.2. semantic</h3><ul><li>Informally, □ is a universal operator meaning ‘<strong>for any time t in the future</strong>’, while ◊ is an existential operator meaning ‘<strong>for some time t in the future</strong>’</li></ul><h3 id="transition-diagram-状态转换图">2.3. transition diagram 状态转换图</h3><ul><li><p><strong>Interpretations</strong> of PTL formulas are based upon state transition diagrams. </p><ul><li>The intuitive直观 meaning is that each state represents a world and <strong>a formula can have different truth values in different worlds</strong>. The transitions represent changes from one world to another.</li></ul></li><li><p>A state transition diagram is a <strong>directed graph</strong>有向图.</p><ul><li>The nodes are states and the edges are transitions. 节点是状态，边是转换</li><li>Each state is labeled with a set of propositional literals such that clashing literals do not appear in any state. 每个状态都标有一个命题字面量的集合，这样冲突的字面量就不会出现在任何状态中</li></ul></li><li><p>A formula that contains a <strong>temporal operator</strong> is interpreted using the transitions between the states</p><ul><li>一个包含时间运算符的公式被解释为使用状态之间的转换</li></ul></li></ul><center><img loading="lazy" src="/posts/150c47ae/2.gif" width="550"></center><center><img loading="lazy" src="/posts/150c47ae/1.gif" width="550"></center><ul><li>If an atom is not shown in the label of a state, it is assumed to be assigned <strong>F</strong>.</li></ul><center><img loading="lazy" src="/posts/150c47ae/3.gif" width="550"></center><center><img loading="lazy" src="/posts/150c47ae/4.gif" width="550"></center><ul><li>$s:P \rightarrow { T,F }$</li><li>A <strong>binary relation</strong> can be considered to be <strong>a mapping from a state to a set of states</strong> $ρ:S→2^{S}$ , so the relational notation $(s_1,s_2)∈ρ$ will usually be written functionally as $s_2∈ρ(s_1)$<ul><li>注意$s_1$和$s_2$顺序关系</li></ul></li></ul><h3 id="truth-value">2.4. truth value</h3><center><img loading="lazy" src="/posts/150c47ae/5.png" width="550"></center><ul><li><p>注意最后一行得notation</p></li><li><p>$ρ(s_0)&#x3D;{s_1,s_2}$. Since $s_1⊨q$ and $s_2⊨q$, it follows that $s_0⊨□q$. By the semantics of $∨$, $s _0⊨□p∨□q$.</p></li><li><p>$s_3∈ρ(s_1)$, but $s_3 \not\models p$ and $s_3 \not\models q$ , so $s_1 \not\models □p$ and $s_1 \not\models □q$ . Therefore, $s_1 \not\models □p \lor □q$</p></li></ul><h3 id="Satisfiability-and-Validity">2.5. Satisfiability and Validity</h3><blockquote><p>The definition of semantic properties in PTL is more complex than it is in propositional or first-order logic, because an interpretation consists of <strong>both states and truth values</strong></p></blockquote><center><img loading="lazy" src="/posts/150c47ae/6.png" width="550"></center><blockquote><p>There are other formulas of PTL that are valid because of properties of temporal logic and not as instances of propositional validities. We will prove the validity of two formulas directly from the semantic definition. The first establishes a duality between □ and ◊, and the second is the distribution of □ over →, similar to the distribution of ∀ over →.</p></blockquote><h4 id="Duality">2.5.1. Duality</h4><ul><li>$⊨□p↔¬ ◊¬ p$</li></ul><h2 id="Models-of-Time">3. Models of Time</h2><blockquote><p><strong>In modal and temporal logics, different logics can be obtained by placing restrictions on the transition relation</strong></p><ul><li>在模态和时间逻辑中，通过对转换关系的限制可以得到不同的逻辑</li></ul></blockquote><ul><li>也就是说True value无关，逻辑是通过transition relation实现的</li></ul><h3 id="Reflexivity">3.1. Reflexivity</h3><ul><li>An interpretation $I&#x3D;(S,ρ)$ is reflexive iff $ρ$ is a reflexive <strong>relation</strong>: for all $s \in S$, $(s,s)∈ρ$, or $s∈ρ(s)$ in functional notation.<ul><li>放在状态图上就是个自己指向自己的圈</li></ul></li></ul><h3 id="Transitivity">3.2. Transitivity</h3><ul><li>An interpretation with a transitive relation is characterized by the formula $□A→□□A$ (or by the formula $◊◊A→◊A$)</li><li>In an interpretation that both is reflexive and transitive, $⊨□A↔□□A$ and $⊨◊A↔◊◊A$.</li></ul><h3 id="Linearity-线性关系">3.3. Linearity 线性关系</h3><ul><li>An interpretation $I&#x3D;(S,ρ)$  is linear if $ρ$ is a <strong>function</strong>, that is, for all $s \in S$, there is at most one $s^{‘} \in S$ such that $s^{‘} ∈ρ(s)$<ul><li>也就是最少没有后续状态，最多一个后续状态</li></ul></li></ul><blockquote><p>It might appear that a linear temporal logic would be limited to expressing properties of <strong>sequential programs</strong> and could not express properties of <strong>concurrent programs</strong>, where each state can have several possible successors depending on the interleaving of the statements of the processes. However, linear temporal logic is successful precisely in the context of concurrent programs because <strong>there is an implicit universal quantification in the definitions</strong></p><p>看起来线性时态逻辑仅限于表达<strong>顺序程序</strong>的属性，而不能表达<strong>并发程序</strong>的属性，因为在并发程序中，每个状态可以有几个可能的后继者，这取决于进程语句的交错情况。然而，线性时间逻辑恰恰在并发程序的背景下是成功的，因为在定义中有一个隐含的普遍量化</p></blockquote><p><strong>example</strong></p><ul><li>a temporal logic formula like $A&#x3D;□◊running$</li><li><strong>In any state, the execution will eventually reach a state in which the computation is running</strong></li><li>The program will be correct if this formula is <strong>true in every possible execution of the program obtained by interleaving the instructions of its processes</strong>. <ul><li>Each <code>interleaving</code>交错 can be considered as a single linear interpretation, so if we prove $\models{_I} A$ for an arbitrary linear interpretation $I$, then the correctness property holds for the program</li></ul></li></ul><h3 id="Discreteness-离散">3.4. Discreteness 离散</h3><blockquote><p>Although the passage of time is often considered to be continuous and expressible by real numbers, the execution of a program is considered to be <strong>a sequence of discrete steps, where each step consists of the execution of a single instruction of the CPU</strong>. Thus it makes sense to express the concept of the next instant in time. To express discrete steps in temporal logic, an additional operator is added</p><ul><li>虽然时间的流逝通常被认为是连续的，可以用实数来表达，但程序的执行被认为是一连串离散的步骤，其中每一步都包括执行CPU的一条指令。因此，<strong>用时间来表达下一个瞬间的概念是有意义的</strong>。为了在时间逻辑中表达离散的步骤，我们增加了一个额外的操作符</li></ul></blockquote><ul><li>The unary operator $\bigcirc$ is called <strong>next</strong></li><li>truth value<ul><li>f $A$ is $\bigcirc A^{‘}$ then $v(A)&#x3D;T$ iff $v(A^{‘})&#x3D;T$ for some $s^{‘}∈ρ(s)$</li><li><em>显然后面的状态想要是T那么前面的状态肯定得是T，但只需要<strong>some</strong>就行</em></li></ul></li><li>注意要$\bigcirc A$为T，只需A指向的state为T，和$A$本身T或F没有关系</li></ul><h4 id="self-dual">3.4.1. self-dual</h4><ul><li>$\bigcirc A \leftrightarrow \lnot \bigcirc \lnot A$</li></ul><blockquote><p>The operator $\bigcirc$ plays a crucial role in the theory of temporal logic and in algorithms for deciding properties like satisfiability, but it is rarely used to express properties of programs. In a concurrent program, not much can be said about what happens next since we don’t know which operation will be executed in the next step. Furthermore, we want a correctness statement to hold regardless of how the interleaving selects a next operation. Therefore, properties are almost invariably expressed in terms of always and eventually, not in terms of next.</p><ul><li>运算符 $\bigcirc◯$ 在时间逻辑理论和决定可满足性等属性的算法中起着关键作用，但它很少被用来表达<strong>程序的属性</strong>。在一个<strong>并发程序</strong>中，对于下一步会发生什么并没有太多可说的，<strong>因为我们不知道下一步会执行哪个操作。此外，我们希望正确性声明总能够成立——不管交错如何选择下一个操作。因此，</strong>属性几乎都是用always和eventually来表达，而不是用next来表达**。</li></ul></blockquote><h2 id="LTL">4. LTL</h2><ul><li>In the context of programs, the natural interpretations of temporal logic formulas are discrete, reflexive, transitive and linear. There is another restriction that simplifies the presentation: the transition function must be total so that each state has exactly one next state. An interpretation for a computation that terminates in state s is assumed to have a transition from s to s.<ul><li>在程序的背景下，时间逻辑公式的自然解释是<strong>离散的、反射的、传递的和线性的</strong>。还有一个简化表述的限制：转换函数必须是<strong>完全的</strong>，以便每个状态正好有一个下一个状态 <em>（即<strong>一一对应</strong>）</em> 。一个终止于状态s的计算的解释被假定为有一个从s到s的过渡</li></ul></li></ul><hr><ul><li><strong>Linear temporal logic (LTL)</strong> is propositional temporal logic whose interpretations are limited to transitions which are discrete, reflexive, transitive, linear and total.</li><li>Since there is only one transition out of each state, it need not be explicitly represented, so interpretations in LTL are defined to be paths of states<ul><li>也就是原来的状态转换$ρ:S→2^{S}$被省略了</li></ul></li></ul><center><img loading="lazy" src="/posts/150c47ae/7.png" width="550"></center><ul><li><p>Let A be a formula in LTL. A is satisfiable iff there is an interpretation σ for A such that σ⊨A. A is valid iff for all interpretations σ for A, σ⊨A. Notation: ⊨A</p></li><li><p>A formula of the form $\bigcirc A$ or $\lnot \bigcirc A$ is a <strong>next formula</strong>. </p></li><li><p>A formula of the form $◊A$ or $¬ □A$ (‘eventually’ and ‘not always’) is a <strong>future formula</strong>.</p></li><li><p>any substitution instance of a formula in propositional logic is also an LTL formula</p></li><li><p>The method of semantic tableaux is a decision procedure for satisfiability in LTL</p></li></ul><h2 id="Binary-Temporal-Operators">5. Binary Temporal Operators</h2><ul><li>binary operator $\cap$ (read until)<ul><li>The output lines maintain their values until the set-line is asserted</li><li>If A is $A_1 \cap A_2$ then $v_σ(A)&#x3D;T$ iff $v_{σ_{i}}(A_2)&#x3D;T$ for some $i≥0$ and for all $0≤k&lt;i$,  $v_{σ_k}(A_1)&#x3D;T$</li></ul></li></ul><p><strong>example</strong></p><ul><li>$p \cap q$ is not true in the following interpretation assuming that state $s$ is repeated indefinitely:</li></ul><center><img loading="lazy" src="/posts/150c47ae/8.gif" width="550"></center><ul><li>The Weak Until Operator<ul><li>Sometimes it is convenient to express precedence properties without actually requiring that something eventually occur. $W$ (read weak until) is the same as the operator except that <strong>it is not required that the second formula ever become true</strong></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/150c47ae/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-程序验证-并发程序</title>
      <link>https://hejueyun.github.io/posts/cf619a86/</link>
      <guid>https://hejueyun.github.io/posts/cf619a86/</guid>
      <pubDate>Wed, 23 Feb 2022 01:15:37 GMT</pubDate>
      
        
        
          
          
      <description>&lt;blockquote&gt;
&lt;p&gt;Verification is routinely used when developing computer hardware and concurrent programs. A sequential program can always</description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Verification is routinely used when developing computer hardware and concurrent programs. A sequential program can always be tested and retested, but the nondeterministic nature of hardware and concurrent programs limits the effectiveness of testing as a method to demonstrate that the system is correct. Slight variations in timing, perhaps caused by congestion on a network, mean that two executions of the same program might give different results. Even if a bug is found by testing and then fixed, we have no way of knowing if the next test runs correctly because we fixed the bug or because the execution followed a different scenario, one in which the bug cannot occur.</p><p>在开发计算机硬件和并发程序时，经常会用到验证。一个顺序程序总是可以被测试和重新测试，但硬件和并发程序的非确定性限制了测试作为证明系统正确的方法的有效性。<strong>时间上的微小变化，也许是由网络上的拥堵造成的，意味着同一个程序的两次执行可能会得到不同的结果。即使通过测试发现了一个错误，然后进行了修复，我们也没有办法知道下一次测试的正确运行是因为我们修复了这个错误，还是因为执行了一个不同的场景，在这个场景中，这个错误不会发生</strong></p></blockquote><ul><li>顺序程序的验证貌似没有用到时态逻辑</li></ul><h2 id="Concurrent-Program-并发程序">1. Concurrent Program 并发程序</h2><ul><li>A <strong>concurrent program</strong> is a set of <strong>sequential programs</strong> together with a set of <strong>global variables</strong></li><li>A concurrent program is a set of <code>processes</code> ${ p_1,p_2,…,p_n }$, where each <strong>process</strong> is a <strong>sequential program</strong><ul><li><strong>Processes</strong> are also known as <strong>threads</strong>; in some contexts, the two terms have different meanings but the difference is not relevant here<ul><li>进程与线程在此处无需区别</li></ul></li></ul></li><li>The variables declared in each process are its <code>local variables</code>; a local variable can be read and written only by the process where it is declared.</li><li>There may be <code>global variables</code> that can be read and written by all of the processes.</li></ul><h3 id="state-状态">1.1. state 状态</h3><ul><li>The state of a concurrent programs consists of <ul><li><strong>the values of its variables</strong> (both local and global),</li><li>together with the <strong>location counters</strong> of its processes.</li></ul></li></ul><center><img loading="lazy" src="/posts/cf619a86/2.png" width="550"></center><p><strong>Example</strong></p><center><img loading="lazy" src="/posts/cf619a86/3.gif" width="350"></center><blockquote><p>There are $5×3×3&#x3D;45$ different states, because the variable n can have the values $0, 1, 2, 3, 4$ and there are <strong>three</strong> labels for <strong>each</strong> process. </p><ul><li>These seems like quite a large number of states for such a simple program, but many of the states (for example, (0,end,end)) will never occur in any computation.</li></ul></blockquote><ul><li>possible computations:</li></ul><center><img loading="lazy" src="/posts/cf619a86/4.gif" width="350"></center><h3 id="Interleaving-交错">1.2. Interleaving 交错</h3><ul><li>A computation of a concurrent program is obtained by asynchronous interleaving of atomic instructions<ul><li>并发程序的计算是通过原子指令的异步交错得到的</li></ul></li><li>Each statement is executed to completion before the execution of another statement (from the same process or another process) is started<ul><li>these statements are <strong>atomic operations</strong></li></ul></li></ul><center><img loading="lazy" src="/posts/cf619a86/5.png" width="550"></center><center><img loading="lazy" src="/posts/cf619a86/6.png" width="550"></center><h2 id="Formalization-of-Correctness">2. Formalization of Correctness</h2><ul><li><strong>Correctness properties</strong> of concurrent programs can be expressed in <strong>linear temporal logic</strong>. </li><li>There are two types of properties: <ul><li>safety properties that require that <strong>something bad never happens</strong> </li><li>liveness活泼 properties that require that <strong>something good eventually happen</strong>.</li></ul></li></ul><hr><ul><li>Each process consists of a <code>critical section</code> and a <code>non-critical section</code>. <ul><li>A process may stay indefinitely in its non-critical section, or—at any time—it may request to enter its critical section. </li><li>A process that has entered its critical section will eventually leave it</li><li><strong>Mutual exclusion</strong>: It is forbidden for the two processes to be in their critical sections simultaneously.</li><li><strong>Liveness</strong>: If a process attempts to enter its critical section, it will eventually succeed</li></ul></li></ul><h3 id="Peterson’s-algorithm-彼得森算法">2.1. Peterson’s algorithm 彼得森算法</h3><center><img loading="lazy" src="/posts/cf619a86/8.png" width="500"></center><center><img loading="lazy" src="/posts/cf619a86/13.gif" width="500"></center><ul><li>The statement: <code>wait until (!wantq or turn == 2)</code> is a more intuitive way of writing:<ul><li><code>while (!(!wantq or turn == 2)) /* do nothing */</code></li></ul></li><li>The variables <code>wantp</code> and <code>wantq</code> are set to <strong>true</strong> by the processes to indicate that they are trying to enter their critical sections and reset to <strong>false</strong> when they leave their critical sections. </li><li>A trying-process <strong>waits</strong> until the other process is neither trying to enter its critical section nor is it in its critical section (<code>!wantq</code> or <code>!wantp</code>). Since the algorithm is <strong>symmetric</strong>, the variable turn is used to break ties when both processes are trying to enter their critical sections. </li><li>A tie is broken in favor of the first process which set turn. Suppose that process p set turn to 1 and then process q set turn to 2. The expression <code>turn==2</code> will be true and allow process p to enter its critical section.</li></ul><hr><center><img loading="lazy" src="/posts/cf619a86/24.gif" width="450"></center><ul><li>The following two LTL formulas express the correctness of Peterson’s algorithm for the critical section problem:</li></ul><center><img loading="lazy" src="/posts/cf619a86/7.gif" width="350"></center><ul><li>cs &#x3D; critical section</li></ul><blockquote><ul><li>Mutual exclusion forbids (always false) a computation from including a state where both processes are in their critical section, </li><li>while liveness requires that (always) if a computation includes a state where a process is trying to enter its critical section then (eventually) the computation will include a state where the process is in its critical section.</li></ul></blockquote><h3 id="progress-axioms">2.2. progress axioms</h3><center><img loading="lazy" src="/posts/cf619a86/9.gif" width="350"></center><center><img loading="lazy" src="/posts/cf619a86/23.png" width="550"></center><h3 id="Invariants-不变量">2.3. Invariants 不变量</h3><ul><li>$r$ is invariant, meaning that $r$ is true initially and remains true in any interpretation</li><li>deduction rule:</li></ul><center><img loading="lazy" src="/posts/cf619a86/14.png" width="350"></center><h2 id="Programs-as-Automata-–-model-checking">3. Programs as Automata – model checking</h2><ul><li>There is a different approach to the verification of the correctness of a program: <strong>generate all possible computations</strong>生成所有可能的计算 and check that the correctness property holds for each of them. Of course, <strong>this is possible only if there are a finite number of states so that each computation is finite or finitely presented</strong>. 所基于的假设<ul><li>For the program for integer square root整数平方根的程序, we could prove its correctness this way for any <strong>specific</strong> value of a, but we could not prove it in <strong>general</strong> for all values of a. </li><li>However, many concurrent algorithms have a finite number of states</li></ul></li><li>This approach to verification is called <code>model checking</code>. <ul><li>A concurrent system is represented by an abstract finite model that ignores details of the computation</li><li>a <strong>correctness property</strong> is expressed as a <strong>formula</strong> (usually in temporal logic) and we wish to show that the <strong>program</strong> is a <strong>model解</strong> of the <strong>formula</strong>, that is, an interpretation in which the formula is true</li></ul></li></ul><h3 id="Modeling-Concurrent-Programs-as-Automata">3.1. Modeling Concurrent Programs as Automata</h3><ul><li><p>Concurrent programs can be modeled as <strong>finite automata</strong>有限自动机</p><ul><li>Each <strong>value of the location counter</strong> is a <strong>state</strong> of one of the automata</li><li>while each <strong>transition</strong> is labeled with the <strong>Boolean condition</strong> that enables it to be taken or with the <strong>assignment statements</strong> that change the values of the variables.</li></ul></li><li><p>相比之下，顺序程序的correctness是通过 <strong>inductive expressions</strong> ${ p }S{ q }$来表示的</p></li><li><p>The abbreviated简略的 version of Peterson’s algorithm</p></li></ul><center><img loading="lazy" src="/posts/cf619a86/10.gif" width="350"></center><ul><li>The <strong>automata</strong> for the individual processes do not define the entire concurrent program. We must combine these automata into one <strong>automaton</strong>(automata的复数形式)</li><li>The states are defined as the Cartesian product of the states of the automata for the individual processes.</li></ul><center><img loading="lazy" src="/posts/cf619a86/11.png" width="550"></center><h3 id="The-State-Space-状态空间">3.2. The State Space 状态空间</h3><blockquote><p>The <strong>reachable states</strong> of a concurrent program are the states that can actually occur in a computation. The state space of the program is a directed graph: </p><ul><li>each reachable state is a <strong>node</strong> </li><li>and there is an <strong>edge</strong> from state $s_1$ to state $s_2$ if some transition of the program which is enabled in $s_1$ moves the state of the computation to $s_2$.</li></ul><p> </p></blockquote><ul><li>State space for Peterson’s algorithm</li></ul><center><img loading="lazy" src="/posts/cf619a86/12.gif" width="450"></center><h2 id="Model-Checking-of-Invariance-Properties">4. Model Checking of Invariance Properties</h2><blockquote><p>We now consider the second meaning of the term model: Is the state space a <strong>model</strong> of a correctness property? Consider the <strong>correctness property</strong> for mutual exclusion in Peterson’s algorithm $A&#x3D;□¬ (csp∧csq)$ . Since the state spacerepresents all the reachable states and all the transitions between them, any interpretation for $A$ must be an infinite path in this directed graph. A quick inspection of the graph shows that all of the ten reachable states satisfy the formula $¬ (csp∧csq)$; therefore, for any interpretation (that is, for any path constructed from these states), $□¬ (csp∧csq)$ is true.</p><hr><p>Once we have written the program and the correctness property, there are <strong>algorithms</strong> to perform the rest of the proof: </p><ul><li>compile the program to a set of automata</li><li>construct the product automaton</li><li>generate the state space </li><li>check the truth of the formula expressing the correctness property at each state.</li></ul></blockquote><h3 id="Algorithms-for-Searching-the-State-Space">4.1. Algorithms for Searching the State Space</h3><ul><li>breadth-first search (BFS)</li><li>depth-first search (DFS)</li></ul><h2 id="Model-Checking-of-Liveness-Properties">5. Model Checking of Liveness Properties</h2><ul><li>Using negation, we have: the correctness property does not hold iff there exists a computation is which ¬ A is true, where: <ul><li>$\lnot A \equiv \lnot □ \lnot (csp \land csq) \equiv ◊ (csp \land csq)$</li></ul></li><li>The model checking algorithm ‘succeeds’ if it finds a computation where ¬ A is true; it succeeds by finding a <code>counterexample</code> proving that the program is incorrect.</li></ul><center><img loading="lazy" src="/posts/cf619a86/15.gif" width="450"></center><ul><li>The states on the stack of a depth first search form a <code>path</code>. If the construction ever tries to generate a state that already exists higher up on the stack, the transition to this node defines a finitely-presented infinite computation like the ones shown above.</li><li>we could generate the entire state space and then check each distinct path to see if it model, but it is more efficient if the checking can be done on-the-fly即时完成 as we did for safety properties. <strong>The key is to transform an LTL formula into an automaton whose computations can be generated at the same time as those of the program.</strong></li></ul><h2 id="Expressing-an-LTL-Formula-as-an-Automaton">6. Expressing an LTL Formula as an Automaton</h2><ul><li>An LTL formula can be algorithmically transformed into an automaton that accepts an input if and only if <strong>the input represents a computation that satisfies the LTL formula</strong>.</li><li>The automaton is a non-deterministic Büchi automaton (NBA), which is the same as a non-deterministic finite automaton (NFA) <strong>except that it reads an infinite string</strong> as its input and its definition of acceptance is changed accordingly</li><li>在计算理论中，<strong>非确定有限状态自动机</strong>或<strong>非确定有限自动机</strong>是对每个状态和输入符号对可以有多个可能的下一个状态的有限状态自动机。这区别于确定有限状态自动机，它的下一个可能状态是唯一确定的</li></ul><center><img loading="lazy" src="/posts/cf619a86/16.gif" width="450"></center><ul><li>the negation of the liveness formula <ul><li>$\lnot □A ≡ \not □(waitp→◊csp) ≡ ◊(waitp \land □ \not csp)$</li></ul></li><li>The intuitive meaning of the formula is that the computation can do anything (expressed as true), but it may nondeterministically decide to enter a state where waitp is true and csp is and remains false from then on. Such a computation falsifies the liveness property.</li><li>In state $s_1$, if csp ever becomes true, there is no transition from the state; as with NFA, <strong>an automaton that cannot continue with its computation is considered to have rejected its input</strong></li></ul><h2 id="Model-Checking-Using-the-Synchronous-Automaton">7. Model Checking Using the Synchronous Automaton</h2><blockquote><p>On-the-fly model checking for an invariance property simply evaluates the correctness property as each new state is generated</p></blockquote><center><img loading="lazy" src="/posts/cf619a86/17.gif" width="450"></center><blockquote><p>When checking a <strong>liveness property</strong> (or a <strong>safety property</strong> expressed in LTL as $□A$), every step of the program automaton—the asynchronous product automaton of the processes—is immediately followed by a step of the NBA corresponding to the LTL formula expressing the negation of the correctness property. The product of the asynchronous automaton and the NBA is called a <strong>synchronous automaton</strong> since the steps of the two automata are synchronized. </p></blockquote><center><img loading="lazy" src="/posts/cf619a86/18.gif" width="450"></center><h3 id="Model-checking-the-liveness-of-Peterson’s-algorithm">7.1. Model checking the liveness of Peterson’s algorithm</h3><center><img loading="lazy" src="/posts/cf619a86/19.gif" width="450"></center><ul><li>Starting from the initial state 1, state 2 is reached and $◊(waitp∧□¬ csp)$ will be true, provided that we can find a reachable MSCC（强连通分量，Strongly connected component）where $¬ csp$ holds in all its states.</li><li>A nested DFS is initiated. Clearly, states 4 and 8 cannot be part of the MSCC since ¬ csp is false in those states</li><li>the computation can continue: $1,2,5,5,…$ and the state 5 with its self-loop forms an MSCC such that $¬ csp$ is false in all its states<ul><li><strong>rejected</strong></li></ul></li><li>Continuing the DFS, we encounter two more states 6 and 9 where waitp is true. We leave it as an exercise to show that the nested DFS will find computations in which ¬ csp holds in all states, but that these computations are also unfair. Therefore, the liveness holds for Peterson’s algorithm</li></ul><h3 id="Fair">7.2. Fair</h3><ul><li>A computation is (weakly) fair if a transition that is always <strong>enabled</strong> is eventually executed in the computation.</li><li>The statement wait <code>until (!wantq or turn == 2)</code> is always <strong>enabled</strong> because <code>turn=2</code>, but it is never taken. Therefore, we reject this counterexample</li></ul><h2 id="Branching-Time-Temporal-Logic">8. Branching-Time Temporal Logic</h2><p>. </p><h2 id="Symbolic-Model-Checking-符号模型检验">9. Symbolic Model Checking 符号模型检验</h2><ul><li>In symbolic model checking, the <strong>states</strong> and <strong>transitions</strong> are not represented explicitly; instead, they are encoded as formulas in <strong>propositional logic</strong><ul><li>在符号模型检查中，状态和转换没有明确表示；相反，它们被编码为命题逻辑的公式</li></ul></li></ul><p><strong>exampl</strong></p><ul><li><p>A state in the state space of Peterson’s algorithm can be represented as a propositional formula using five atomic propositions. </p><ul><li>There are <strong>three</strong> locations in each process, so <strong>two</strong> bits for each process can represent these values ${p_0,p_1,q_0,q_1}$</li></ul><center><img loading="lazy" src="/posts/cf619a86/20.png" width="450"></center><ul><li>The variable turn can take <strong>two</strong> values so <strong>one</strong> bit is sufficient. The atomic proposition t will encode turn: <strong>true</strong> for turn&#x3D;1 and <strong>false</strong> for turn&#x3D;2</li></ul></li><li><p>The initial state of the state space is encoded by the formula:</p><ul><li>$p_0 \land p_1 \land q_0 \land q_1 \land t$</li></ul></li><li><p>To encode the transitions, we need another set of atomic propositions: </p><ul><li>the original set will encode the state <strong>before</strong> the transition </li><li>and the new set (denoted by primes) will encode the <strong>state</strong> after the transition</li></ul></li><li><p>The encoding of the transition from $s_5&#x3D;(waitp,waitq,2)$ to $s_8$ is given by the formula:</p><center><img loading="lazy" src="/posts/cf619a86/21.gif" width="350"></center></li><li><p>There are two ways of proceeding from here</p><ul><li>One is to encode the formulas using <strong>BDDs</strong><ul><li>The algorithms on BDDs can be used to compute the formulas corresponding to new sets of states: union, predecessor, and so on</li></ul></li><li>The other approach to <strong>symbolic model checking</strong> is called <strong>bounded model checking</strong>. <ul><li>Recall that a formula in temporal logic has the finite model property: if a formula is satisfiable then it is satisfied in a finitely-presented model. For an LTL formula, we showed that a model consists of MSCCs that are reachable from the initial state. In fact, by unwinding解开 the MSCCs, we can always find a model that consists of a single cycle reachable from the initial state </li><li>In bounded model checking, a maximum size $k$ for the model is guessed. The <strong>behavior of the program</strong> and the <strong>negation of a correctness property</strong> are expressed as a <strong>propositional formula</strong> obtained by encoding each state that can appear at distance $i$ from the initial state $0≤i≤k$. This formula is the input to a <strong>SAT solver</strong>; if a satisfying interpretation is found, then there is a computation that satisfies the negation of the correctness property is true and the program is not correct.</li></ul></li></ul></li></ul><h3 id="BDD-二元决策图">9.1. BDD 二元决策图</h3><p>( 二元决策图 Binary decision diagram)</p><blockquote><p>A binary decision diagram (BDD) is a data structure for representing the semantics of a formula in propositional logic. A formula is represented by a directed graph and an algorithm is used to reduce the graph.</p><ul><li>二元决策图（BDD）是一种数据结构，用于表示命题逻辑中一个公式的语义。一个公式由一个有向图表示，并使用一种算法来减少该图。</li></ul></blockquote><ul><li><p>归约有序的二元决策图是<strong>布尔函数</strong>的规范表示</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/397164596">二元决策图(Binary Decision Diagrams - BDD) （一） - 知乎</a></p></li></ul><hr><blockquote><p>A Boolean function can be represented as a rooted, directed, acyclic graph, which consists of several (<strong>decision</strong>) nodes and two <strong>terminal</strong> nodes. The two terminal nodes are labeled 0 (FALSE) and 1 (TRUE). Each (decision) node ${\displaystyle u}$ is labeled by a Boolean variable ${\displaystyle x_{i}}$ and has two child nodes called <strong>low child</strong> and <strong>high child</strong>. The edge from node ${\displaystyle u}$ to a low (or high) child represents an assignment of the value FALSE (or TRUE, respectively) to variable ${\displaystyle x_{i}}$. Such a BDD is called ‘ordered’ if different variables appear in the same order on all paths from the root. A BDD is said to be ‘<strong>reduced</strong>‘ if the following two rules have been applied to its graph:</p><ul><li>Merge any isomorphic subgraphs.</li><li>Eliminate any node whose two children are isomorphic.</li></ul></blockquote><ul><li>In the figures below, <strong>dotted</strong> lines represent edges to a <strong>low</strong> child, while <strong>solid</strong> lines represent edges to a <strong>high</strong> child.<ul><li>For function ${\displaystyle f(x1,x2,x3)}$, to find ${\displaystyle f(0,1,1)}$, begin at x1, traverse down the dotted line to x2 (since x1 has an assignment to 0), then down two solid lines (since x2 and x3 each have an assignment to one). This leads to the terminal 1, which is the value of ${\displaystyle f(0,1,1)}$</li></ul></li><li>The <strong>binary decision tree</strong> of the left figure can be transformed into a <strong>binary decision diagram</strong> by maximally reducing it according to the two reduction rules. The resulting BDD is shown in the right figure.</li></ul><center><img loading="lazy" src="/posts/cf619a86/22.png" width="550"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/cf619a86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-程序验证-顺序程序</title>
      <link>https://hejueyun.github.io/posts/ab706956/</link>
      <guid>https://hejueyun.github.io/posts/ab706956/</guid>
      <pubDate>Wed, 23 Feb 2022 01:15:14 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Program&quot;&gt;1. Program&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;computer program&lt;/strong&gt; is not very different from a logical formula. It</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Program">1. Program</h2><blockquote><p>A <strong>computer program</strong> is not very different from a logical formula. It consists of a sequence of <strong>symbols</strong> constructed according to <strong>formal syntactical rules</strong> and it has a meaning which is assigned by an <strong>interpretation</strong> of the elements of the language. In programming, the symbols are called <strong>statements or commands</strong> and the intended interpretation is the <strong>execution</strong> of the program on a computer. The syntax of programming languages is specified using formal systems such as BNF, but the semantics is usually informally specified.</p><p>一个计算机程序与一个逻辑公式没有什么不同。它由一连串的符号组成，这些符号是根据正式的句法规则构建的，它有一个意义，这个意义是通过对语言元素的解释而赋予的。在编程中，这些符号被称为语句或命令，预期的解释是程序在计算机上的执行。<strong>编程语言的语法是用BNF这样的形式化系统指定的，但语义通常是非正式地指定的</strong></p></blockquote><h3 id="考虑一门语言的设计">1.1. 考虑一门语言的设计</h3><ul><li>A program is a <strong>statement</strong> S, where statements are defined recursively using the concepts of variables and expressions<ul><li>程序本身就是一个抽象的大statement</li></ul></li></ul><center><img loading="lazy" src="/posts/ab706956/6.gif" width="550"></center><ul><li>A <strong>statement</strong> in a programming language can be considered to be a function that transforms the state of a computation<ul><li>编程语言可以被视作状态转换函数</li></ul></li></ul><blockquote><p>Let $S$ be a <strong>program</strong> with $n$ <strong>variables</strong> $(x1,…,xn)$. A <strong>state</strong> $s$ of $S$ consists of an $n+1$-tuple of values $(lc,x_1,…,x_n )$, where $lc$ is the value of the <strong>location counter</strong>(sometimes called the <strong>instruction pointer</strong>，存储下一个指令的地址)  and $x_i$ is the value of the variable $xi$.</p></blockquote><ul><li><strong>we aim to verify the program by proving: if the input to the program satisfies the precondition, then the output of the program will satisfy the postcondition</strong></li></ul><p><strong>example</strong></p><ul><li>If the variables (x,y) have the values (8,7) in a state, then the result of executing the statement x &#x3D; 2*y+1 is the state in which (x,y)&#x3D;(15,7) and the location counter is incremented</li></ul><h2 id="Correctness-Formulas">2. Correctness Formulas</h2><ul><li><p>A <strong>correctness formula</strong> is a triple ${ p } S { q }$ , where $S$ is a program, and $p$ and $q$ are formulas called the precondition and postcondition, respectively. S is <strong>partially correct</strong> with respect to p and q，$⊧ { p } S { q }$,iff</p><ul><li>If $S$ is started in a state where $p$ is true and if the computation of $S$ terminates, then it terminates in a state where $q$ is true</li></ul></li><li><p>correctness formulas also call <strong>inductive expressions</strong></p></li></ul><center><img loading="lazy" src="/posts/ab706956/1.gif" width="550"></center><blockquote><p>只要 P 在 C 执行前的状态下成立，则在执行之后 Q 也成立。注意如果 C 不终止，也就没有”之后”了，所以 Q 在根本上可以是任何语句。实际上，你可以选择 Q 为假来表达 C 不终止。事实上，这种情形叫做 “部分正确（partial correctness）”。如果 C 终止并且在终止时 Q 是真，则表达式被称作 “全部正确性（total correctness）”。终止必须被单独证明。</p></blockquote><p><strong>example</strong></p><center><img loading="lazy" src="/posts/ab706956/7.png" width="550"></center><h3 id="characteristic-predicate">2.1. characteristic predicate</h3><blockquote><p>Let U be the set of all n-tuples of values over some domain(s), and let U′⊆U be a <strong>relation</strong> over U. The n-ary predicat $P_{U′}$ is the <strong>characteristic predicate</strong>特征谓词 of U′ if it is interpreted over the domain U by the relation U′. That is, $v(P_{U′}($x_1$,…,$x_n$))&#x3D;T iff ($x_1$,…,$x_n$)∈U′$.</p></blockquote><ul><li>We can write {(x 1,…,x n )∣(x 1,…,x n )∈U′} as {(x 1,…,x n )∣ $P_{U′}$ }</li><li>即：如果变量都在domain上，则为T</li></ul><h3 id="semantics-of-programming-language">2.2. semantics of programming language</h3><ul><li>编程语言的<strong>语义</strong>是通过指定语言中的每个语句如何将一种状态转化为另一种状态而给出的</li></ul><p><strong>example</strong></p><ul><li>Let S be the statement x &#x3D; 2*y+1. <ul><li>If started in an arbitrary state (x,y), the statement terminates in the state (x′,y′) where x′&#x3D;2y′+1. </li><li>Another way of expressing this is to say that S transforms the set of states {(x,y)∣true} into the set {(x,y)∣x&#x3D;2y+1}.</li><li>The statement S also transforms the set of states {(x,y)∣y≤3} into the set {(x,y)∣(x≤7)∧(y≤3)}, because if y≤3 then 2y+1≤7</li></ul></li></ul><h2 id="Deductive-System-HL-霍尔逻辑">3. Deductive System HL 霍尔逻辑</h2><ul><li>Instead, we will simply take all true formulas in the domain as axioms. For example, (x≥y)→(x+1≥y+1) is true in arithmetic and will be used as an axiom. This is reasonable since we wish to concentrate on the verification that a program S is correct without the complication of verifying arithmetic formulas that are well known.</li></ul><center><img loading="lazy" src="/posts/ab706956/2.png" width="550"></center><p>example</p><center><img loading="lazy" src="/posts/ab706956/3.png" width="550"></center><ul><li>The formula p in the loop rule is called an <strong>invariant</strong>不变量: it describes the behavior of a single execution of the statement S in the body of the while-statement.</li><li>感觉有点类似sed</li></ul><h2 id="Program-Verification">4. Program Verification</h2><center><img loading="lazy" src="/posts/ab706956/8.png" width="650"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/ab706956/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>academic writing-Literature Review</title>
      <link>https://hejueyun.github.io/posts/dd5e4fc6/</link>
      <guid>https://hejueyun.github.io/posts/dd5e4fc6/</guid>
      <pubDate>Tue, 22 Feb 2022 22:23:20 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;What-is-literature&quot;&gt;1. What is literature&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Published written works (publications)&lt;/li&gt;
&lt;li&gt;Unpublished written</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="What-is-literature">1. What is literature</h2><ul><li>Published written works (publications)</li><li>Unpublished written works</li></ul><h2 id="Why-literature-review">2. Why literature review</h2><ul><li>First step of research</li><li>Help you obtain background knowledge</li><li>Identify related work to yours</li><li>Understand <strong>the state of the art</strong>尖端技术 in your project area</li><li>To frame your arguments and research questions based on the state-of-the-art</li><li>Identify knowledge gaps or limitations in your project area</li></ul><h2 id="Where-to-find-publications">3. Where to find publications</h2><ol><li>ACM Digital Library (<a href="https://dl.acm.org/">https://dl.acm.org/</a>) hosts ACM Journals and ACM Conference Proceedings</li><li>IEEE Xplore (<a href="https://ieeexplore.ieee.org/">https://ieeexplore.ieee.org/</a>) hosts IEEE Journals and IEEE Conference Proceedings</li><li>SpringerLink (<a href="https://link.springer.com/">https://link.springer.com/</a>) hosts Springer Journals (including Nature) and Springer Conference Proceedings</li><li>ScienceDirect (<a href="https://www.sciencedirect.com/">https://www.sciencedirect.com/</a>) hosts Elsevier Journals and e-books</li><li>Wiley Online Library (<a href="https://onlinelibrary.wiley.com/">https://onlinelibrary.wiley.com/</a>) hosts Wiley Journals and e-books</li><li>Google Scholar (<a href="https://scholar.google.com/">https://scholar.google.com/</a>) – Web search engine for scholarly literature</li></ol><h2 id="How-to-do-literature-review">4. How to do literature review</h2><ul><li>Systematic literature review (SLR) methods<ul><li>Traditional SLR</li><li>Snowballing</li></ul></li></ul><h3 id="Traditional-SLR">4.1. Traditional SLR</h3><ul><li>使用由一组关键词组成的搜索字符串</li><li>对每一个已知的数字图书馆进行详尽的搜索</li><li>旨在选择所有相关的论文</li><li>耗费时间，而且作为个人很难做到这一点</li></ul><h3 id="Snowballing">4.2. Snowballing</h3><center><img loading="lazy" src="/posts/dd5e4fc6/1.png" width="550"></center><ol><li>Identify the start set<ol><li>Ask your supervisor to suggest 3-5 good quality, relevant papers</li><li>Add 3-5 top cited and relevant papers from Google Scholar search</li></ol></li><li>Perform backward snowballing<ol><li>Go through the <strong>reference list</strong> of each paper in the start set to identify new papers to include</li><li>Exclude papers that do not fulfil the basic criteria such as, for example, language, publication year and type of publication</li><li>Remove papers from the list that have already been examined in the earlier iteration</li><li>Add the remaining papers to the start set</li><li>Repeat from step1 将剩余的论文添加到起始集</li><li>End if you have gone through the reference list of all the papers in the start set</li></ol></li><li>Perform <strong>forward</strong> snowballing<ol><li>For each paper in the start set, identify the papers that cite this paper using Google Scholar 使用谷歌学术找出<strong>引用该论文</strong>的论文</li><li>For each citing paper that is not in the start set, download it from its DL, read, in the order of: 1) abstract, 2) introduction, 3) conclusion or 4) full text to see if it’s relevant to your project</li><li>Repeat from step 1 until you have gone through all the papers in the start set</li></ol></li><li>Iterations<ol><li>Repeat backward snowballing at least once</li><li>Repeat forward snowballing at least once</li><li>Iterate from forward snowballing to backward, to ensure a comprehensive inclusion of good quality, relevant papers</li><li>The results of iterations are the set of the papers for detailed review and <strong>to be included in your dissertation report</strong>.</li></ol></li><li>Manage your references<ol><li>EndNote - for Word</li><li>BibTex - for Overleaf</li><li><strong>Citation and reference styles</strong><ol><li>Numbering system (IEEE style)</li><li>Author and Date system (Harvard style)</li></ol></li></ol></li></ol><h2 id="Critical-tasks-in-literature-review">5. Critical tasks in literature review</h2><p>When reading each reference, you need to systematically perform the following tasks:</p><ul><li>Data extraction 数据提取: Extract useful information (data) from each reference</li><li>Data synthesis 数据综合: Organize the extracted data into categories and subcategories</li><li>Data analysis 数据分析: Interpret the data to make sense of them through:<ul><li>Quantitative analysis 定量分析: use statistics and frequency counts to analyse the data</li><li>Qualitative analysis 定性分析: use descriptions to interpret the data</li><li>Visualisation 可视化: use tables, charts, graphs to represent the data</li></ul></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/dd5e4fc6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-项与范式</title>
      <link>https://hejueyun.github.io/posts/bb11e25b/</link>
      <guid>https://hejueyun.github.io/posts/bb11e25b/</guid>
      <pubDate>Fri, 18 Feb 2022 15:27:40 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Terms-项&quot;&gt;1. Terms 项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Variables. &lt;ul&gt;
&lt;li&gt;Any &lt;strong&gt;variable&lt;/strong&gt;, &lt;strong&gt;constant&lt;/strong&gt; or &lt;strong&gt;0-ary</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Terms-项">1. Terms 项</h2><ul><li>Variables. <ul><li>Any <strong>variable</strong>, <strong>constant</strong> or <strong>0-ary function symbol</strong> is a term.</li></ul></li><li>Functions. <ul><li>Any <strong>expression</strong> $f(t_1,…,t_n)$ of n arguments (where each argument $t_i$ is a term and $f$ is a function symbol of valence n) is a term. In particular, symbols denoting individual constants are nullary function symbols, and thus are terms.</li></ul></li></ul><p>Only expressions which can be obtained by finitely many applications of rules 1 and 2 are terms</p><h2 id="prenex-conjunctive-normal-form-PCNF-前束范式">2. prenex conjunctive normal form(PCNF) 前束范式</h2><ul><li>A formula is in prenex conjunctive normal form (PCNF) iff it is of the form:<ul><li>$Q_1x_1…Q_nx_nM$</li></ul></li><li>where the $Q_i$ are quantifiers and $M$ is a quantifier-free formula in CNF. The sequence $Q_1x_1⋯Q_nx_n$ is the prefix and $M$ is the matrix</li></ul><blockquote><p>如果一个公示可以被写为量词在前，随后是被称为母体的无量词部分，则称其为前束范式的，所有经典逻辑公式都逻辑等价于某个前束范式公式</p></blockquote><p><strong>example</strong></p><center><img loading="lazy" src="/posts/bb11e25b/7.gif" width="550"></center><ul><li>Let A be a closed formula in PCNF whose prefix consists only of universal quantifiers. The clausal form of A consists of the matrix of A written as a set of clauses</li><li>所以上个例子可以写为：</li></ul><center><img loading="lazy" src="/posts/bb11e25b/7.gif" width="550"></center><h3 id="Skolem’s-Theorem-斯科伦定理">2.1. Skolem’s Theorem 斯科伦定理</h3><ul><li>In propositional logic, every formula is equivalent to one in CNF, but this is not true in first-order logic. However, a formula in first-order logic can be transformed into <strong>one in clausal form</strong> <strong>without modifying its satisfiability</strong>. 在不改变及可满足性的情况下</li><li><strong>Skolem</strong>: Let $A$ be a closed formula. Then there exists a formula $A^′$ in clausal form such that $A≈A^′$</li></ul><h4 id="≈-vs-≡">2.1.1. ≈ vs ≡</h4><blockquote><p>A≈A′ means that A is satisfiable if and only if A′ is satisfiable; that is, there exists a model for A if and only if there exists a model for A′. (may not be the same)</p><p>This is not the same as logically equivalence A≡A′, which means that for all models $I$, $I$  is a model for A if and only if it is a model for A′.</p></blockquote><hr><ul><li>In A&#x3D;∀x∃yp(x,y), the quantifiers can be read: **for all x, produce a value y associated with that x such that the predicate p is true. **</li><li>But our intuitive concept of a function is the same: y&#x3D;f(x) means that given x, f produces a value y associated with x. The existential quantifier can be removed giving A′&#x3D;∀xp(x,f(x)).<ul><li>y&#x3D;f(x)意味着给定x，f产生一个与x相关的值y。可以删除存在量词，给出 $A^′&#x3D;∀xp(x,f(x))$</li></ul></li></ul><center><img loading="lazy" src="/posts/bb11e25b/9.jpg" width="550"></center><h3 id="Skolem’s-Algorithm-斯科伦算法">2.2. Skolem’s Algorithm 斯科伦算法</h3><ul><li>目的：将任意(?)一阶逻辑公式转化为clause form</li></ul><center><img loading="lazy" src="/posts/bb11e25b/13.png" width="550"></center><ul><li>例子：$∀x(p(x)\rightarrow{q(x)})\rightarrow{}(∀xp(x)\rightarrow{}∀xq(x))$</li></ul><ol><li>Eliminate all binary Boolean operators other than ∨ and ∧<ol><li>消去除 ∨ 和 ∧ 外的所有二元操作符</li></ol></li><li>Push negation operators inward, collapsing double negation, until they apply to atomic formulas only<ol><li>将否定运算符向内推，折叠双重否定，直到否定运算符只作用于原子式</li></ol></li><li>Extract quantifiers from the matrix. Repeat until all quantifiers appear in the prefix and the matrix is quantifier-free.  <ol><li>从矩阵中提取量词</li><li>重复以上步骤，直到所有的量词都出现在前缀中，并且矩阵无量词</li></ol></li><li>Use the distributive laws to transform the matrix into CNF. The formula is now in PCNF.<ol><li>使用分配律将矩阵转换为CNF。该公式现在是PCNF</li></ol></li><li>For every existential quantifier $∃x$ in A, let $y_1,…,y_n$ be the universally quantified variables preceding $∃x$ and let f be a new n-ary function symbol. <ol><li>Delete $∃x$ and replace every occurrence of x by $f(y_1,…,y_n)$. </li><li>If there are no universal quantifiers preceding ∃x, replace x by a new constant (0-ary function). </li><li>These new function symbols are <strong>Skolem functions</strong> and the process of replacing existential quantifiers by functions is <strong>Skolemization</strong>.</li></ol></li><li>The formula can be written in clausal form by dropping the (universal) quantifiers and writing the matrix as sets of clauses</li></ol><center><img loading="lazy" src="/posts/bb11e25b/10.jpg" width="550"></center><center><img loading="lazy" src="/posts/bb11e25b/11.jpg" width="550"></center><ul><li>注意最后一步大括号以及逗号分别取代的二元符号<ul><li>clause: {L,L,L}代表的是or</li><li>set of clauses:{C,C,C}代表的是and</li></ul></li><li>同时注意有一步是<strong>rename</strong></li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/bb11e25b/12.jpg" width="550"></center><h3 id="Skolemised-form-斯科伦范式">2.3. Skolemised form 斯科伦范式</h3><ul><li>如果一阶逻辑式的前束范式只有全称量词，则称其为是符合Skolem 范式的</li></ul><h3 id="Properties-of-CNFs-and-clausal-forms">2.4. Properties of CNFs and clausal forms</h3><ul><li>For F be any formula and suppose $F⇒^{∗}_{CNF} F^{‘}$<ul><li>Then $F ≡ F^{‘}$</li></ul></li></ul><h3 id="为什么需要斯科伦范式">2.5. 为什么需要斯科伦范式</h3><center><img loading="lazy" src="/posts/bb11e25b/14.png" width="550"></center><h2 id="Herbrand-Models-埃尔布朗模型">3. Herbrand Models 埃尔布朗模型</h2><blockquote><p><strong>When function symbols are used to form terms</strong>, there is no easy way to describe the set of possible <strong>interpretations</strong>. The domain could be a numerical domain or a domain of data structures or almost anything else. The definition of even one function can choose to assign an arbitrary element of the domain to an arbitrary subset of arguments.</p></blockquote><blockquote><p><strong>Herbrand models</strong>, which are a relatively limited set of interpretations that have the following property: If a set of clauses has a model then it has an Herbrand model.</p></blockquote><ul><li>a formula is satisfiable if and only if its clausal form is satisfiable and A set of clauses S has a model iff it has an Herbrand model.<ul><li>反之亦成立</li></ul></li></ul><center><img loading="lazy" src="/posts/bb11e25b/22.png" width="550"></center><h3 id="Herbrand-Universes-for-domain">3.1. Herbrand Universes (for domain)</h3><p>Let Σ &#x3D; (F, P) denote the <strong>signature</strong>标识 of a clause set N</p><ul><li><p>The Herbrand universe is $T_Σ$, i.e., the set of all <strong>ground terms</strong> over Σ</p><ul><li>Suppose N &#x3D; {P(a), ¬P(x) ∨ P(f (x, b))}</li><li>Then F consists of one binary function symbol f and two constants a and b Herbrand universe over Σ:<ul><li>$T_Σ &#x3D; {a, b, f (a, a), f (a, b), f (b, a), f (b, b), f (a, f (a, a)), . . .}$</li></ul></li></ul></li><li><p>If Σ contains non-constant function symbols then TΣ is infinite</p></li><li><p>Important assumption: There is at least one constant in the signature Σ</p><ul><li>Suppose N &#x3D; {P(x), ¬P(x) ∨ P(f (x, y))}. Then include a (fresh) in Σ<ul><li>$T_Σ &#x3D; {a, f (a, a), f (a, f (a, a)), f (f (a, a), f (a, a)), . . .}$</li></ul></li></ul></li><li><p>If there are no constant symbols or 0-ary function symbols in S, i<strong>nitialize the inductive definition</strong> of $H_S$ with an arbitrary constant symbol a. </p></li><li><p>The Herbrand universe is just the set of ground terms that can be formed from symbols in S. Obviously, if S contains a function symbol, the Herbrand universe is infinite since $f(f(…(a)…))∈H_S$</p></li></ul><center><img loading="lazy" src="/posts/bb11e25b/20.gif" width="550"></center><h3 id="Herbrand-Interpretations">3.2. Herbrand Interpretations</h3><p>A Herbrand interpretation, denoted I, is a set of ground atoms over Σ</p><ul><li>$I &#x3D; {A_1, . . . , A_n, . . .}$</li><li>Note: $I |&#x3D; A$ iff $A ∈ I$<ul><li>is equivalent to $I |\neq{} A$ iff $A \notin{} I$</li></ul></li></ul><center><img loading="lazy" src="/posts/bb11e25b/15.png" width="550"></center><ul><li><p>注意此处将对某一公式的解的验证转化为对该公式的埃尔布朗解的验证</p><ul><li>同时注意I不是P(x)的解，并不意味着I就是非P(x)的解！</li></ul></li><li><p>Truth in I of any set N of clauses&#x2F;quantifier-free formulae:</p><center><img loading="lazy" src="/posts/bb11e25b/16.png" width="550"></center></li></ul><p><strong>example</strong></p><center><img loading="lazy" src="/posts/bb11e25b/17.png" width="550"></center><h3 id="all-ground-instances">3.3. all ground instances</h3><center><img loading="lazy" src="/posts/bb11e25b/18.png" width="550"></center><p>Let N be a set of Σ-clauses. Then</p><ul><li><p>N is true in a standard interpretation</p><ul><li>iff N has a Herbrand model (over Σ)</li><li>iff $G_Σ(N)$ has a Herbrand model (over Σ)</li></ul></li><li><p>We use it for model construction required for the completeness proof of the resolution system</p><ul><li>我们用它来构建归结系统的完整性证明所需的解释</li></ul></li></ul><p>Using Herbrand’s theorem to find a model</p><center><img loading="lazy" src="/posts/bb11e25b/19.png" width="550"></center><center><img loading="lazy" src="/posts/bb11e25b/21.png" width="550"></center><hr><h2 id="Formulas-in-number-theory-informal-meaning-in-N">4. Formulas in number theory, informal meaning in $N$</h2><center><img loading="lazy" src="/posts/bb11e25b/1.png" width="550"></center><ul><li>Even：偶数</li></ul><h2 id="Translating-English-into-first-order-logic-formulas">5. Translating English into first-order logic formulas</h2><center><img loading="lazy" src="/posts/bb11e25b/2.png" width="550"></center><h2 id="Substitution-替换">6. Substitution 替换</h2><ul><li><strong>一个function</strong></li><li>$σ : X → TΣ(X)$</li><li>such that the set $Dom(σ) &#x3D;^{def}{x ∈ X | σ(x) \neq{x}}$ is <strong>finite</strong><ul><li>Dom(σ) is the <strong>domain</strong> of σ</li><li>$Cod(σ) &#x3D;^{def} {σ(x) | x ∈ Dom(σ)}$ is the <strong>codomain</strong> of σ</li></ul></li></ul><p>Example</p><ul><li>F &#x3D; P(g(x), y, x)</li><li>F{x&#x2F;a, y&#x2F;f (z)} &#x3D; P(g(a), f (z), a)</li></ul><center><img loading="lazy" src="/posts/bb11e25b/3.png" width="550"></center><p><strong>一般式</strong></p><center><img loading="lazy" src="/posts/bb11e25b/4.png" width="550"></center><h3 id="Modification-of-a-substitution">6.1. Modification of a substitution</h3><center><img loading="lazy" src="/posts/bb11e25b/5.png" width="550"></center><h3 id="Restriction">6.2. Restriction</h3><ol><li>only for a free variable</li><li>The captured variable must be renamed into a “fresh” variable, say x’, F{y&#x2F;x} &#x3D; ∃x’(x’ &gt; x)<ol><li>也就是不能用x换y，导致歧义</li></ol></li></ol><h3 id="substitution-instance">6.3. substitution instance</h3><p><strong>instance就是由substitution所产生的</strong></p><blockquote><p>n. We say that a formula φ is an instance of a formula ψ if there exists a substitution <code>σ</code> for the free variables in ψ such that ψσ is a renamed variant of φ</p></blockquote><ul><li>We say Eσ is formed by applying σ to E, where E is an expression (a term or formula)</li><li>Example σ &#x3D; {x&#x2F;a, y&#x2F;b}<ul><li>P(g(x), y, x)σ &#x3D; P(g(x)σ, yσ, xσ) &#x3D; P(g(xσ), yσ, xσ) &#x3D; P(g(a), b, a)</li></ul></li></ul><h3 id="identity-substitution-一致性替换">6.4. identity substitution 一致性替换</h3><blockquote><p>The identity substitution, which maps every variable to itself, is the neutral element of substitution composition</p><p>一致性替换，将每个变量都映射到自身，是替换组合的中性元素。</p></blockquote><h3 id="Codomain-到达域">6.5. Codomain 到达域</h3><ul><li>到达域（英语：Codomain），或称为陪域、余定义域、上域、终域、共变域、目标集</li><li>一个函数的到达域指的是<strong>至少包含所有</strong>此函数的输出值的一个集合。在函数符号 ${\displaystyle f\colon X\rightarrow Y}$ 中， ${\displaystyle Y}$ 是函数 ${\displaystyle f}$ 的到达域</li><li><strong>不是值域</strong><ul><li>${\displaystyle f}$ 的值域是 ${\displaystyle Y}$ 的一个子集，若 ${\displaystyle f}$ 是一个满射函数，则 ${\displaystyle f}$ 的到达域和值域相等</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/bb11e25b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-演绎</title>
      <link>https://hejueyun.github.io/posts/f450749c/</link>
      <guid>https://hejueyun.github.io/posts/f450749c/</guid>
      <pubDate>Fri, 18 Feb 2022 15:11:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;Deductive-system&quot;&gt;1. Deductive system&lt;/h2&gt;&lt;h3 id=&quot;G&quot;&gt;1.1. G&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;We extend the deductive systems $G$ and $H$ from</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Deductive-system">1. Deductive system</h2><h3 id="G">1.1. G</h3><ul><li>We extend the deductive systems $G$ and $H$ from propositional logic to first-order logic by adding axioms and rules of inference <strong>for the universal quantifier</strong>全称量词.</li></ul><center><img loading="lazy" src="/posts/f450749c/1.gif" width="550"></center><h3 id="H">1.2. H</h3><ul><li>The rules of inference are modus ponens and generalization</li></ul><center><img loading="lazy" src="/posts/f450749c/2.gif" width="550"></center><ul><li>The Deduction Rule：</li></ul><center><img loading="lazy" src="/posts/f450749c/3.gif" width="550"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/f450749c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机数理逻辑-一阶逻辑-语法与语义</title>
      <link>https://hejueyun.github.io/posts/ed4b45dd/</link>
      <guid>https://hejueyun.github.io/posts/ed4b45dd/</guid>
      <pubDate>Tue, 15 Feb 2022 23:57:35 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;引入&quot;&gt;1.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="引入">1. 引入</h2><p>命题逻辑对于算术等数学理论的形式化来说，表现力并不充分。一个算术表达式，如$x+2&gt;y-1$，既不是真的，也不是假的。</p><ol><li>它的真假取决于变量x和y的值</li><li>我们需要将运算符+和-的含义形式化，作为将一对数字映射为一个数字的函数</li><li>像&gt;这样的关系运算符必须被形式化为将一对数字映射为真值</li></ol><h2 id="命题逻辑vs一阶逻辑">2. 命题逻辑vs一阶逻辑</h2><ol><li><p>命题逻辑（Propositional Logic） </p><ol><li>形如 ¬P，P∧Q，P∨Q，P → Q ，P↔Q的语句，值为True或者False</li><li>推理规则较简单，往往通过（1.真值表  2.为数不多的推理规则，例如Modus ponesn等几个）</li><li>缺点：不能或者很难表示复杂的语句，不能记录推理过程中的变化</li></ol></li><li><p>一阶逻辑（First Order Logic），简称FOL</p><ol><li>包含的东西有常量（Constant symbol），谓词符号（Predicate symbol），函数符号（Function symbol），变量（Variable），连词（ ∧∨→↔），量词（Quantifiers, ∃∀）</li></ol></li><li><p>命题逻辑(很少部分人叫它作零阶逻辑). 在命题逻辑里, 每一个字母就代表一个命题, 所以命题逻辑只能表达句子之间的关系, 比如“p&amp;q”, “if p then q”等等的真值如何从p和q的真值中计算出来.</p></li><li><p>一阶逻辑则引入了两个量词, 即universal quantifier(倒A)和existential quantifier(倒E), 并且加入了一阶谓词和individual variables和individual constants. 这些导致一阶逻辑可以量化individuals in the domain.</p><ol><li>比如经典的三段论就可以被一阶逻辑表达 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For all x, Hx-&gt;Mx</span><br><span class="line"></span><br><span class="line">Hs</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">Ms</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="vs-Propositional-Logic-vs-Set-Theory-vs-Elementary-Number-Theory">2.1. vs Propositional Logic vs Set Theory vs Elementary Number Theory</h3><p><strong>Propositional Logic</strong></p><ul><li><strong>Equality: no</strong></li><li>Predicate symbols: A1, A2, . . .</li><li><strong>Constant symbols: none</strong></li><li><strong>Function symbols: none</strong></li></ul><p><strong>Set Theory</strong></p><ul><li>Equality: yes</li><li>Predicate symbols: ∈</li><li>Constant symbols: ∅</li><li>Function symbols: none</li></ul><p><strong>Elementary Number Theory</strong>初等数论</p><ul><li>Equality: yes</li><li>Predicate symbols: &lt;</li><li>Constant symbols: 0</li><li>Function symbols: S (successor), +, ×, exp</li></ul><h2 id="集合论vs一阶逻辑">3. 集合论vs一阶逻辑</h2><ul><li>集合论作为公理系统，一阶逻辑作为<strong>推理系统</strong>，共同为数学打下基石</li><li>谈论某一理论时，都需要有<strong>上层语言</strong>（meta-language）作为基础。对于最上层的语言研究一般归于哲学的范畴<ul><li>基于上层语言，我们可以定义<strong>一阶语言</strong>（一阶逻辑的语言），语言中字母表、项、公式的不同可以产生不同的“子语言”。如：初等算术语言，群论语言，<strong>集合论语言</strong></li><li>定义一阶语言的模型，模型对语言做出解释（可以看成是<strong>语义</strong>部分）。譬如对于初等算术语言，有初等算术的标准模型</li><li>一阶语言的推理系统给出了一阶逻辑的语法。不同的推理系统如自然推理系统和 PK 推理系统可以证明是等价的。同时注意到，推理系统可以独立于模型（<strong>语义</strong>）而存在。而推理系统的 soundness 和 completeness 保证了语义与语法的一致性</li></ul></li><li>同阶下，一阶语言的集合论是一阶逻辑的一部分（一阶语言+公式集），但一阶逻辑又不能表达所有的集合论（高阶）</li></ul><h2 id="Syntax">4. Syntax</h2><p><strong>Logical Symbols</strong></p><ul><li>Parentheses: (, )</li><li>Propositional connectives: ¬, ∨, ∧, →, ↔</li><li>Variables: v1, v2, . . .</li><li>Quantifiers: ∀, ∃<ul><li>Quantifiers allow a purely syntactical expression of the statement that the relation represented by a predicate is true for some or all elements of the domain</li><li>量词允许以纯语法的方式来表达谓词所代表的关系对域中的某些或所有元素来说是真的</li></ul></li></ul><p><strong>Parameters</strong></p><ul><li>Equality symbol (optional): &#x3D;</li><li>Predicate谓词 symbols: e.g. p(x), x &gt; y</li><li>Constant symbols: e.g. 0, John, π</li><li>Function symbols: e.g. f(x), x + y, x +[2] y</li></ul><p><strong>注意</strong></p><ul><li>大写P、Q、R等默认位predicate</li><li>小写p、q、r才是函数</li><li>非+predicate有意义，但非+函数没有意义</li></ul><h3 id="Predicate-谓词">4.1. Predicate 谓词</h3><ul><li>Predicates are used to represent <strong>functions</strong> from a domain to truth values<ul><li><strong>谓词</strong>被用来表示从域到真值的<strong>函数</strong></li><li>$p^n$ is called an n-ary predicate</li></ul></li></ul><h3 id="Quantifier-量词">4.2. Quantifier 量词</h3><ul><li>∀ is the universal quantifier and is read <strong>for all</strong>.</li><li>∃ is the existential quantifier and is read <strong>there exists</strong></li><li>A universal or existential formula ∀xA or ∃xA is a <strong>quantified formula</strong></li><li>In many presentations of first-order logic, ∀ is defined in the logic and ∃ is considered to be an abbreviation of ¬ ∀¬</li></ul><h3 id="断言符号？">4.3. 断言符号？</h3><p>断言是容许一个、甚至多个对象，所以对于自然数 $n,j$ 我们约定 $A_{j}^{n}(x_1,x_2,…,x_n)$ 为一阶逻辑的<strong>合法词汇</strong>，它在直观上表示一个有 ${\displaystyle{} n}$ 个”对象”的断言，我们称它为 ${\displaystyle{} n}$ 元断言符号。下标的自然数 ${\displaystyle{} j}$ 只是拿来和其他同为 ${\displaystyle{} n}$ 元的断言符号作区别</p><h3 id="signature-标识">4.4. signature 标识</h3><ul><li><p>在一阶逻辑中的标识(signature)为包含函数常数(function constants)和谓词常数(predicate constants)俩种元素的一个集合</p></li><li><p>例如：$Σ &#x3D; (F, P) &#x3D; ({ a_1,…,a_n, f_1,…, f_k } , { \simeq{}&#x2F;2, P_1,…, P_m } )$</p></li></ul><h3 id="arity-元数">4.5. arity 元数</h3><blockquote><p>函数或运算的元数是指所需的参数或算子的数量。关系的元数则是指其对应之笛卡儿积的维度</p></blockquote><ul><li>一元unary函数、二元…</li><li>Equality is a special predicate symbol of arity 2.</li><li>Constant symbols can also be thought of as functions whose arity is 0.</li></ul><h2 id="Formula">5. Formula</h2><ul><li><del>本质上是n元关系</del></li><li>函数不是</li></ul><center><img loading="lazy" src="/posts/ed4b45dd/3.gif" width="550"></center><h3 id="Atomic-Formulas-原子公式">5.1. Atomic Formulas 原子公式</h3><ul><li>An atomic formula is an expression of the form: $P(t_1, . . . , t_n)$ here P is a predicate symbol of arity n and $t_1,. . . ,t_n$ are terms.</li><li>If the language includes the equality symbol, we consider the equality symbol to be a special predicate of arity 2</li></ul><h3 id="Well-formed-Formulas-合式公式">5.2. Well-formed Formulas 合式公式</h3><ul><li>The set of well-formed formulas is the set of expressions generated from the <strong>atomic</strong> formulas by the operations E¬, E→, and $Q_{i}i$ &#x3D; 1, 2, . . .</li></ul><ol><li>原子公式为公式。(美观起见，在原子公式外面包一层括弧也是公式)</li><li>若 ${\displaystyle {\mathcal {A}}}$ 为公式，则 (${\displaystyle (\neg {\mathcal {A}})}$ 为公式。</li><li>若 ${\displaystyle {\mathcal {A}}}$ 与 ${\displaystyle {\mathcal {B}}}$ 为公式，则 ${\displaystyle ({\mathcal {A}}\Rightarrow {\mathcal {B}})}$ 为公式。</li><li>若 ${\displaystyle {\mathcal {A}}}$ 为公式， ${\displaystyle x}$ 为任意变量，则 ${\displaystyle (\forall x{\mathcal {A}})}$ 为公式。 (美观起见 ${\displaystyle (\forall x){\mathcal {A}}:&#x3D;\forall x{\mathcal {A}}}$ ，也就是里面的量词有无外包括弧都是公式)<br>合式公式只能透过以上四点，于有限步骤内置构出来</li></ol><h3 id="quantified-formula-量化公式">5.3. quantified formula 量化公式</h3><ul><li>A universal or existential formula ∀xA or ∃xA is a quantified formula. </li><li>x is the quantified variable and its scope is the formula A. </li><li>It is not required that x actually appear in the scope of its quantification.</li></ul><hr><ul><li>If a formula has no free variables, it is <strong>closed</strong>. If ${x_1,…,x_n}$ are all the free variables of A, the universal closure of A is $∀x_1 …∀x_n$ A and the existential closure is $∃x_1…∃x_n$ A.</li></ul><p><strong>Example</strong></p><ol><li>p(x,y) has two free variables x and y, ∃yp(x,y) has one free variable x and ∀x∃yp(x,y) is closed. The universal closure of p(x,y) is ∀x∀yp(x,y) and its existential closure is ∃x∃yp(x,y).</li><li>In $∀xp(x)∧q(x)$, the occurrence of x in $p(x)$ is bound and <strong>the occurrence in $q(x)$ is free</strong>. The universal closure is $∀x(∀xp(x)∧q(x))$. <ol><li>Obviously, it would have been better to write the formula as $∀xp(x)∧q(y)$ with y as the free variable; its universal closure is ∀y(∀xp(x)∧q(y)) </li><li>这个其实就是把$∀xp(x)$简写了，实际应该就是$∀x(p(x))$，量词后紧跟的就是作用域(<strong>scope</strong>)</li></ol></li></ol><h4 id="Free-and-Bound-Variables-自由变量和约束变量">5.3.1. Free and Bound Variables 自由变量和约束变量</h4><p>量词所施用的<strong>公式</strong>被称为**量词的范围(scope)**。若变量 ${\displaystyle x}$ 某次出现在 ${\displaystyle \forall x}$ 的范围内，称这样出现的 ${\displaystyle x}$ 为不自由&#x2F;被约束的 ${\displaystyle x}$ (not free&#x2F;bounded)；反过来说，不出现在 ${\displaystyle \forall x}$ 的范围内的某个 ${\displaystyle x}$ 被称为自由的 ${\displaystyle x}$，（<code>∃</code>同理）</p><center><img loading="lazy" src="/posts/ed4b45dd/2.png" width="550"></center><ul><li>（封闭公式、句子）If no variable occurs free in a $wff x$, then $x$ is a sentence</li></ul><hr><ul><li>If α is an <strong>atomic formula</strong>, then <ul><li>x occurs free in α iff x occurs in α.</li><li>x occurs free in (¬α) iff x occurs free in α.</li><li>x occurs free in (α → β) iff x occurs free in α or in β.</li><li>x occurs free in ∀ $v_i$ α iff x occurs free in α and $x\neq{v_i}$</li></ul></li></ul><h3 id="ground-formula-基态公式">5.4. ground formula 基态公式</h3><ul><li>A <strong>ground term</strong> is a term which <strong>does not contain any variables</strong>.</li><li>A <strong>ground atomic formula</strong> is an atomic formula, all of whose terms are ground.</li><li>A <strong>ground literal</strong> is a ground atomic formula or the negation of one.</li><li>A <strong>ground formula</strong> is a <strong>quantifier-free</strong> formula, all of whose <strong>atomic formula are ground</strong>.</li><li>A is a ground instance of a quantifier-free formula A′ iff it can be obtained from A′ by substituting ground terms for the (free) variables in A′</li></ul><blockquote><p>The terms a, f(a,b), g(b,f(a,b)) are ground. p(f(a,b),a) is a ground atomic formula and ¬ p(f(a,b),a) is a ground literal. p(f(x,y),a) is not a ground atomic formula because of the variables x,y</p></blockquote><h2 id="Semantic-Interpretation">6. Semantic: Interpretation</h2><ul><li>In propositional logic, the truth of a formula was determined by a truth assignment over the propositional symbols.</li><li>In first-order logic, we use a <strong>model</strong> (also called a <strong>structure</strong>) to determine the truth of a formula</li></ul><hr><ul><li>In propositional logic, an interpretation is a mapping from atomic propositions to truth values. </li><li>In first-order logic, the analogous concept is a mapping from atomic formulas to truth values.<ul><li>However, atomic formulas contain variables and constants that must be assigned elements of some domain; once that is done, the <strong>predicates</strong> are interpreted as <strong>relations</strong> over the domain.（比如大于小于关系）</li></ul></li></ul><center><img loading="lazy" src="/posts/ed4b45dd/4.png" width="550"></center><h3 id="assignment">6.1. assignment</h3><center><img loading="lazy" src="/posts/ed4b45dd/5.jpg" width="550"></center><h3 id="Closed-Formula-闭公式">6.2. Closed Formula 闭公式</h3><p>Validity and Satisfiability</p><ul><li>Let A be a closed formula of first-order logic<ul><li>A is true in I or I is a <strong>model</strong> for A iff $v_I(A)&#x3D;T$ . Notation: I⊧A.</li><li>A is valid if for all interpretations I, I⊧A. Notation: ⊨A</li><li>A is satisfiable if for some interpretation I, I⊧A.</li><li>A is unsatisfiable if it is not satisfiable.</li><li>A is falsifiable if it is not valid</li></ul></li></ul><p>$∀x∀y(p(x,y)→p(y,x))$</p><ul><li>The formula is satisfiable in an interpretation where p is assigned a symmetric relation like &#x3D;. It is not valid because the formula is falsified in an interpretation that assigns to p a non-symmetric relation like &lt;</li></ul><h3 id="An-Interpretation-for-a-Set-of-Formulas">6.3. An Interpretation for a Set of Formulas</h3><blockquote><p>In propositional logic, the concept of interpretation and the definition of properties such as satisfiability can be extended to sets of formulas. The same holds for first-order logic</p></blockquote><ul><li>Let U&#x3D;{A 1,…} be a set of formulas where {p 1,…,p m } are all the predicates appearing in all A i ∈S and {a 1,…,a k } are all the constants appearing in all A i ∈S. An interpretation $I_v$ for S is as triple:<ul><li>${D,{R_1,…R_n},{d_1,…d_n}}$</li></ul></li><li>where D is a non-empty set called the domain, R i is an $n_i$-ary relation on D that is assigned to the $n_i$-ary predicate p i and d i ∈D is an element of D that is assigned to the constant a i</li></ul><h2 id="Logical-Equivalence">7. Logical Equivalence</h2><ul><li>Let U&#x3D;{A 1,A 2} be a pair of <strong>closed formulas</strong>. A 1 is logically equivalent to A 2 iff $v_{I_{U}}(A_1)&#x3D;v_{I_{U}}(A_2)$ for all interpretations . Notation: $A_1≡A_2$</li></ul><center><img loading="lazy" src="/posts/ed4b45dd/6.jpg" width="550"></center><p>对等duality公式</p><ul><li><p>用于公式化简和转化为范式</p></li><li><p>¬∀x.A ≡ ∃x.¬A</p></li><li><p>¬∃x.A ≡ ∀x.¬A</p></li></ul><center><img loading="lazy" src="/posts/ed4b45dd/7.jpg" width="550"></center><center><img loading="lazy" src="/posts/ed4b45dd/8.jpg" width="550"></center><ul><li>Theorem (Equivalent Replacement Theorem)<ul><li>Suppose A, B, C are first-order formulas and A is a subformula of C</li><li>If A ≡ B, then C(. . . A . . .) ≡ C(. . . B . . .)</li></ul></li></ul><h2 id="语义表">8. 语义表</h2><blockquote><p>语义表的方法对于显示一个公式是不可满足的来说是合理和完整的，但是它不是一个可满足性的决定程序，因为表的分支可能是无限的。当一个tableau被构造出来时，一个普遍量词后面跟着一个存在量词可能会导致一个无限的分支：存在公式被用一个新的常数实例化，然后普遍公式的实例化会导致一个新的存在量词公式的出现，如此无限地下去。有一些公式只在无限域中是可满足的。</p></blockquote><h2 id="参考">9. 参考</h2><ul><li><a href="https://www.zhihu.com/question/40419871/answer/127792613">命题逻辑和一阶逻辑分别是什么？ - 嘉嘉杨的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/22915503/answer/151477106">一阶逻辑和高阶逻辑的区别，能不能具象一点说明？ - ZS Chen的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/28776730/answer/702538400">集合论和一阶逻辑的关系是什么？ - Zangwei Zheng的回答 - 知乎</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/ed4b45dd/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
