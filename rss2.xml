<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>烏巢</title>
    <link>https://hejueyun.github.io/</link>
    
    <image>
      <url>https://hejueyun.github.io/icon.png</url>
      <title>烏巢</title>
      <link>https://hejueyun.github.io/</link>
    </image>
    
    <atom:link href="https://hejueyun.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 06 Feb 2022 00:27:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>计算机数理逻辑-命题逻辑</title>
      <link>https://hejueyun.github.io/posts/cacbbbdb/</link>
      <guid>https://hejueyun.github.io/posts/cacbbbdb/</guid>
      <pubDate>Sat, 05 Feb 2022 23:01:28 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Logic formalizes valid methods of reasoning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;逻辑将有效的推理方法正规化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比如syllogism&amp;#x2F;ˈsɪləˌdʒɪz(ə)m&amp;#x2F;三段论&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;atomic&lt;code&gt;/əˈtɒm.ɪk/&lt;/code&gt; proposition&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;statements that have no internal structure&lt;/li&gt;
&lt;li&gt;原子命题是没有内部结构的语句&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cannot be further decomposed&lt;/code&gt; and &lt;code&gt;can be assigned a truth value of true or false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;often shortened to &lt;strong&gt;atoms&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;syntax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define the legal structure of formulas in propositional logic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;semantics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the meaning of formulas&lt;ul&gt;
&lt;li&gt;T or F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A proof is a deduction of a formula from a set of formulas called &lt;strong&gt;axioms&lt;/strong&gt; using rules of inference.&lt;/li&gt;
&lt;li&gt;证明是&lt;strong&gt;利用推理规则&lt;/strong&gt;从一组称为&lt;strong&gt;公理&lt;/strong&gt;的公式中推导出一个&lt;strong&gt;公式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Propositional logic is central to the design of computer hardware because hardware is usually designed with components having two voltage levels that are arbitrarily assigned the symbols 0 and 1. Circuits&lt;code&gt;/ˈsərkət/&lt;/code&gt; are described by idealized elements called logic gates&lt;/p&gt;
&lt;p&gt;命题逻辑是计算机硬件设计的核心，因为硬件的设计通常有两个电压电平，被任意分配为符号0和1。电路由称为逻辑门的理想化元素描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Propositional-Formulas命题公式&quot;&gt;&lt;a href=&quot;#Propositional-Formulas命题公式&quot; class=&quot;headerlink&quot; title=&quot;Propositional Formulas命题公式&quot;&gt;&lt;/a&gt;Propositional Formulas命题公式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt; 表达式&lt;ul&gt;
&lt;li&gt;denoted the computation of a value from other values&lt;/li&gt;
&lt;li&gt;表示从其他数值中计算出一个数值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In propositional logic, the term formula is used instead&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atomic propositions &lt;ul&gt;
&lt;li&gt;An unbounded set of symbols P&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boolean operators&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Formulas-as-Trees&quot;&gt;&lt;a href=&quot;#Formulas-as-Trees&quot; class=&quot;headerlink&quot; title=&quot;Formulas as Trees&quot;&gt;&lt;/a&gt;Formulas as Trees&lt;/h3&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/cacbbbdb/1.gif&quot; wid=&quot;550px&quot;&gt;&lt;/center&gt;

&lt;ul&gt;
&lt;li&gt;unary&lt;code&gt;/ˈjuːnəri/&lt;/code&gt; operator 单目运算符 vs binary operators 双目运算符&lt;/li&gt;
&lt;li&gt;implication 实质条件 实质蕴涵 &lt;ul&gt;
&lt;li&gt;若A，则B &lt;/li&gt;
&lt;li&gt;A$\rightarrow$B&lt;/li&gt;
&lt;li&gt;区别于语义蕴含&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命题逻辑中的公式可以是一棵递归定义的树（defined recursively）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Logic formalizes valid methods of reasoning</p><ul><li><p>逻辑将有效的推理方法正规化</p></li><li><p>比如syllogism&#x2F;ˈsɪləˌdʒɪz(ə)m&#x2F;三段论</p></li><li><p><strong>atomic<code>/əˈtɒm.ɪk/</code> proposition</strong></p><ul><li>statements that have no internal structure</li><li>原子命题是没有内部结构的语句</li><li><code>cannot be further decomposed</code> and <code>can be assigned a truth value of true or false</code></li><li>often shortened to <strong>atoms</strong></li></ul></li><li><p><strong>syntax</strong></p><ul><li>define the legal structure of formulas in propositional logic</li></ul></li><li><p><strong>semantics</strong></p><ul><li>the meaning of formulas<ul><li>T or F</li></ul></li></ul></li><li><p><strong>Proof</strong></p><ul><li>A proof is a deduction of a formula from a set of formulas called <strong>axioms</strong> using rules of inference.</li><li>证明是<strong>利用推理规则</strong>从一组称为<strong>公理</strong>的公式中推导出一个<strong>公式</strong></li></ul></li></ul><blockquote><p>Propositional logic is central to the design of computer hardware because hardware is usually designed with components having two voltage levels that are arbitrarily assigned the symbols 0 and 1. Circuits<code>/ˈsərkət/</code> are described by idealized elements called logic gates</p><p>命题逻辑是计算机硬件设计的核心，因为硬件的设计通常有两个电压电平，被任意分配为符号0和1。电路由称为逻辑门的理想化元素描述</p></blockquote><h2 id="Propositional-Formulas命题公式"><a href="#Propositional-Formulas命题公式" class="headerlink" title="Propositional Formulas命题公式"></a>Propositional Formulas命题公式</h2><ul><li><strong>expression</strong> 表达式<ul><li>denoted the computation of a value from other values</li><li>表示从其他数值中计算出一个数值</li><li><strong>In propositional logic, the term formula is used instead</strong></li></ul></li><li>atomic propositions <ul><li>An unbounded set of symbols P</li></ul></li><li>Boolean operators</li></ul><h3 id="Formulas-as-Trees"><a href="#Formulas-as-Trees" class="headerlink" title="Formulas as Trees"></a>Formulas as Trees</h3><center><img loading="lazy" src="/posts/cacbbbdb/1.gif" wid="550px"></center><ul><li>unary<code>/ˈjuːnəri/</code> operator 单目运算符 vs binary operators 双目运算符</li><li>implication 实质条件 实质蕴涵 <ul><li>若A，则B </li><li>A$\rightarrow$B</li><li>区别于语义蕴含</li></ul></li></ul><p>命题逻辑中的公式可以是一棵递归定义的树（defined recursively）</p><ul><li>一个公式是由一个原子命题标记（labeled）的叶子。</li><li>一个公式是一个由¬标记的节点，它的一个子节点是一个公式</li><li>一个公式是一个由二元运算符之一标记的节点，同时两个子节点自身也是公式</li></ul><center><img loading="lazy" src="/posts/cacbbbdb/2.gif" wid="550px"></center><h3 id="Formulas-as-Strings"><a href="#Formulas-as-Strings" class="headerlink" title="Formulas as Strings"></a>Formulas as Strings</h3><p>命题逻辑中的公式也可以是字符串</p><ul><li>The string associated with a formula is obtained by an <strong>inorder traversal</strong><code>/trəˈvərs(ə)l/</code><br> of the tree</li><li>一个公式的字符串表示是通过对树的<strong>中序遍历</strong>得到的<ul><li>先左子树，后根结点，最后右子树</li></ul></li><li>ambiguity <code>/æmbɪˈɡjuːɪti/</code> 模糊性</li></ul><h3 id="Resolving-Ambiguity-in-the-String-Representation"><a href="#Resolving-Ambiguity-in-the-String-Representation" class="headerlink" title="Resolving Ambiguity in the String Representation"></a>Resolving Ambiguity in the String Representation</h3><p><strong>parentheses</strong><code>/pəˈrenθəsiːz/</code> 圆括号</p><ul><li>The simplest way to avoid ambiguity is to use parenthesesto maintain the structure of the tree when the string is constructed.</li><li>避免歧义的最简单方法是在构建字符串时使用<strong>圆括号</strong>来保持树的结构</li><li>缺点：verbose冗长 and hard to read and write</li></ul><center><img loading="lazy" src="/posts/cacbbbdb/3.gif" wid="550px"></center><p><strong>Precedence<code>/ˈpresɪdəns/</code></strong> 优先级</p><ul><li>define precedence and associativity conventions among the operators as is done in arithmetic, so that we immediately recognize <code>a∗b∗c+d∗e</code> as <code>(((a∗b)∗c)+(d∗e))</code><ul><li>解决模棱两可的公式的第二种方法是在运算符之间定义优先级和关联性约定，就像在算术中所做的那样，这样我们就可以立即将<code>a∗b∗c+d∗e</code>识别为<code>(((a∗b)∗c)+(d∗e))</code></li></ul></li><li>Parentheses are used only if needed to indicate an order different from that imposed by the rules for precedence and associativity<ul><li>只有在需要表示与优先权和关联性规则所规定的顺序不同时，才使用括号</li></ul></li><li>precedence from high to low</li></ul><center><img loading="lazy" src="/posts/cacbbbdb/4.gif" wid="550px"></center><p><strong>Polish Notation</strong> 波兰式（前缀表示法）和 <strong>reverse Polish notation</strong> 逆波兰式（后缀表示法）</p><blockquote><p>波兰表达式和逆波兰表达式有个好处，就算将圆括号去掉也没有歧义</p><p>逆波兰表达式的解释器一般是基于堆栈的。解释过程一般是：操作数入栈；遇到操作符时，操作数出栈，求值，将结果入栈；当一遍后，栈顶就是表达式的值。因此逆波兰表达式的求值使用堆栈结构很容易实现，并且能很快求值</p></blockquote><ul><li>用于简化命题逻辑</li><li><strong>先序遍历</strong> preorder<ul><li>表达式<code>a*(b+c)-e/f</code><ul><li>中序遍历，就是日常用的表达式写法。对于加法和减法需要加括号。</li><li>用前序遍历，对应前缀表达式：<code>-*a+bc/ef</code></li><li>用后序遍历，对应后缀表达式：<code>abc+*ef/-</code></li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/cacbbbdb/5.svg" wid="550px"></center><h3 id="Structural-induction-结构归纳法"><a href="#Structural-induction-结构归纳法" class="headerlink" title="Structural induction 结构归纳法"></a>Structural induction 结构归纳法</h3><blockquote><p>Structural induction is used to prove that a property holds for all formulas. This form of induction is similar to the familiar numerical induction that is used to prove that a property holds for all natural numbers</p><p>结构归纳法被用来证明一个属性对所有公式都成立。这种形式的归纳法类似于我们熟悉的数字归纳法，后者是用来证明一个属性对所有自然数都成立的</p></blockquote><p>To show that a property holds for all formulas $A\inF$ :</p><ol><li>Prove that the property holds all atoms $p$.</li><li>Assume that the property holds for a formula $A$ and prove that the property holds for $¬A$.</li><li>Assume that the property holds for formulas $A_1$ and $A_2$ and prove that the property holds for $A_1 op A_2$, for each of the binary operators.</li></ol><blockquote><p> so a proof that a property holds for all formulas can be done using structural induction with the base case and only two <strong>inductive</strong> steps. 一个初始例子和两个归纳步骤</p></blockquote><h2 id="Interpretations-解释"><a href="#Interpretations-解释" class="headerlink" title="Interpretations 解释"></a>Interpretations 解释</h2><p>一个<strong>函数</strong></p><ul><li>An interpretation for A is a total function $I_A:P_A \rightarrow{ { T,F } }$ that assigns one of the truth values T or F to every atom in $P_A$, $P_A$ 是 $A$ 的原子命题子集，$A$ 是公式集合 $F$ 中的一个</li><li>真值表Truth values of formulas</li></ul><center><img loading="lazy" src="/posts/cacbbbdb/6.gif" wid="550px"></center>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Automated-Reasoning/">Automated Reasoning</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/cacbbbdb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>软件安全备忘录：Fundamentals</title>
      <link>https://hejueyun.github.io/posts/a3244b40/</link>
      <guid>https://hejueyun.github.io/posts/a3244b40/</guid>
      <pubDate>Mon, 31 Jan 2022 20:12:07 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Main-Goal&quot;&gt;&lt;a href=&quot;#Main-Goal&quot; class=&quot;headerlink&quot; title=&quot;Main Goal&quot;&gt;&lt;/a&gt;Main Goal&lt;/h2&gt;&lt;p&gt;Verified trustworthy software systems 经过验证的值得信赖的软件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Safty&lt;/li&gt;
&lt;li&gt;Resilience 复原能力&lt;ul&gt;
&lt;li&gt;in timely response to events&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Standard-Notions-of-Security-安全的标准概念&quot;&gt;&lt;a href=&quot;#Standard-Notions-of-Security-安全的标准概念&quot; class=&quot;headerlink&quot; title=&quot;Standard Notions of Security 安全的标准概念&quot;&gt;&lt;/a&gt;Standard Notions of Security 安全的标准概念&lt;/h2&gt;&lt;p&gt;Safety vs Security&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safety: &lt;code&gt;any input&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;desired output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Secruity: &lt;code&gt;bad input&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;bad output&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;wrong input does not cause failure or crashes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;most sofeware system do not have precise准确 explict明确 security objectives&lt;/p&gt;
&lt;h2 id=&quot;Software-Security-Problems&quot;&gt;&lt;a href=&quot;#Software-Security-Problems&quot; class=&quot;headerlink&quot; title=&quot;Software Security Problems&quot;&gt;&lt;/a&gt;Software Security Problems&lt;/h2&gt;&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/a3244b40/1.png&quot; width=&quot;550&quot;&gt;&lt;/center&gt;

&lt;p&gt;Why are there security vulnerabilities?&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Main-Goal"><a href="#Main-Goal" class="headerlink" title="Main Goal"></a>Main Goal</h2><p>Verified trustworthy software systems 经过验证的值得信赖的软件系统</p><ul><li>Reliability</li><li>Availability</li><li>Safty</li><li>Resilience 复原能力<ul><li>in timely response to events</li></ul></li></ul><h2 id="Standard-Notions-of-Security-安全的标准概念"><a href="#Standard-Notions-of-Security-安全的标准概念" class="headerlink" title="Standard Notions of Security 安全的标准概念"></a>Standard Notions of Security 安全的标准概念</h2><p>Safety vs Security</p><ul><li>Safety: <code>any input</code> &#x3D;&gt; <code>desired output</code></li><li>Secruity: <code>bad input</code> &#x3D;&gt; <code>bad output</code><ul><li>wrong input does not cause failure or crashes</li></ul></li></ul><p>most sofeware system do not have precise准确 explict明确 security objectives</p><h2 id="Software-Security-Problems"><a href="#Software-Security-Problems" class="headerlink" title="Software Security Problems"></a>Software Security Problems</h2><center><img loading="lazy" src="/posts/a3244b40/1.png" width="550"></center><p>Why are there security vulnerabilities?</p><ul><li>Limited number of <strong>courses</strong> in computer security<br>– Programming <strong>textbooks</strong> do not emphasize security<br>– Limited number of security <strong>audits</strong><br>– <strong>Programmers</strong> are focused on implementing features<br>– Security is <strong>expensive</strong> and takes <strong>time</strong></li></ul><p>cve</p><ul><li>Common Vulnerabilities and Exposures 公共漏洞和暴露 <blockquote><p>公共漏洞和暴露又称通用漏洞披露、常见漏洞与披露，是一个与信息安全有关的数据库，收集各种信息安全弱点及漏洞并给予编号以便于公众查阅。此数据库现由美国非营利组织MITRE所属的National Cybersecurity FFRDC所营运维护</p></blockquote></li></ul><h3 id="Critical-Software-Vulnerabilitie"><a href="#Critical-Software-Vulnerabilitie" class="headerlink" title="Critical Software Vulnerabilitie"></a>Critical Software Vulnerabilitie</h3><ul><li><strong>Null pointer dereference</strong><ul><li>dereference 解引用<ul><li>“*”（即星号），是一个单项操作符（即有一个操作数）</li><li>它对一个指针变量进行操作，并返回一个指针地址的值</li></ul></li></ul></li></ul><center><img loading="lazy" src="/posts/a3244b40/2.png" width="550"></center><ul><li><strong>Double free</strong></li></ul><center><img loading="lazy" src="/posts/a3244b40/3.png" width="550"></center><ul><li><strong>Unchecked Return Value to NULL Pointer Dereference</strong></li></ul><center><img loading="lazy" src="/posts/a3244b40/4.png" width="550"></center><ul><li>Division by zero</li><li>Missing free</li><li>Use after free</li><li>APIs rule based checking</li><li><strong>Race Condition Vulnerability</strong> 竞争条件漏洞</li><li>Structured output generation vulnerabilitie<ul><li>SQL Injection</li></ul></li><li>XSS</li><li>XXE <ul><li>XML External Entity (XXE) </li><li>XXE occurs when XML input (incl. an external entity) is processed by a weakly configured XML parser</li><li>XXE might lead to the disclosure披露 of confidential data</li></ul></li></ul><center><img loading="lazy" src="/posts/a3244b40/5.png" width="550"></center><ul><li>DoS</li></ul><h2 id="testing-and-verification-techniques"><a href="#testing-and-verification-techniques" class="headerlink" title="testing and verification techniques"></a>testing and verification techniques</h2><h3 id="proof-by-induction-数学归纳法"><a href="#proof-by-induction-数学归纳法" class="headerlink" title="proof by induction 数学归纳法"></a>proof by induction 数学归纳法</h3><ul><li>base step</li><li>inductice step</li></ul><h3 id="Temporal-Logic-Model-Checking-时态逻辑模型检查"><a href="#Temporal-Logic-Model-Checking-时态逻辑模型检查" class="headerlink" title="Temporal Logic Model Checking 时态逻辑模型检查"></a>Temporal Logic Model Checking 时态逻辑模型检查</h3><p>2 branches of verification</p><ul><li>deductive 演绎式</li><li>Model checking<ul><li>可以automatic</li></ul></li></ul><p>Verification procedure is algorithmic rather than deductive in nature</p><ul><li>验证程序是算法性的，而不是演绎性的</li></ul><p><code>Model checking</code></p><ul><li>an automatic verification technique for <strong>finite state concurrent systems</strong>并发系统<ul><li>模型检查是一种<strong>有限状态并发系统</strong>的自动验证技术</li></ul></li><li>Advantages<ul><li><strong>No proofs</strong>(Algorithmic rather than Deductive)</li><li><strong>Fast</strong> (compared to other rigorous methods such as theorem proving) 与其他严格的方法相比，如定理证明</li><li>Diagnostic <strong>counterexamples</strong> 诊断性反例</li><li>No problem with <strong>partial specifications</strong> 部分规格</li><li>Logics can easily express many <strong>concurrency properties</strong> 逻辑学可以很容易地表达许多并发性属性</li></ul></li></ul><h4 id="LTL-Linear-Time-Logic"><a href="#LTL-Linear-Time-Logic" class="headerlink" title="LTL - Linear Time Logic"></a>LTL - Linear Time Logic</h4><ul><li>Atomic Propositions 原子命题</li><li>Temporal operators 时间运算符</li></ul><center><img loading="lazy" src="/posts/a3244b40/6.png" width="550"></center><center><img loading="lazy" src="/posts/a3244b40/7.png" width="550"></center><h4 id="Model-Checking-Problem"><a href="#Model-Checking-Problem" class="headerlink" title="Model Checking Problem"></a>Model Checking Problem</h4><ul><li><code>M</code><ul><li>Let M be a state-transition graph</li></ul></li><li><code>f</code><ul><li>Let ƒ be an assertion or specification in temporal logic</li></ul></li><li><code>s</code><ul><li>Find all states s of M such that M, s satisfies ƒ</li></ul></li></ul><p><strong>Complexity</strong></p><ul><li><strong>singly exponential</strong> in size of specification 与规格大小呈单指数关系</li><li><strong>linear</strong> in size of state-transition graph 与状态转换图的大小呈线性关系</li></ul><center><img loading="lazy" src="/posts/a3244b40/8.png" width="550"></center><h3 id="Bounded-Model-Checking-BMC-有界模型检查"><a href="#Bounded-Model-Checking-BMC-有界模型检查" class="headerlink" title="Bounded Model Checking(BMC) 有界模型检查"></a>Bounded Model Checking(BMC) 有界模型检查</h3><p>Basic idea: check negation of given property up to given depth</p><center><img loading="lazy" src="/posts/a3244b40/9.png" width="550"></center><ul><li><code>iff</code>: if and only if 当且仅当</li><li><code>Negation</code>: 逻辑非</li></ul><blockquote><p>有界模型检测的主要过程是:先把要验证的系统或模型构造为有限状态自动机(finite state machine,简称FSM),通过 FSM 状态间的转移来模拟系统或模型运行;要验证的规范说明用时序逻辑 LTL(linear-time temporal logic)进行说明(如 G(p),F(p));设定边界上界 K;FSM 状态间的转移关系和 LTL 逻辑规范否定的 NNF(negation normal form)公式通过逻辑与构成 BMC 转换公式;把 BMC 转换公式编码成 SAT 实例,通过 SAT 工具求解.若有解,则找到反例;反之,若不可满足,则表明要验证的系统或模型运行到 K 阶段时,是安全的、没有错误的</p></blockquote><h4 id="LTL-语法"><a href="#LTL-语法" class="headerlink" title="LTL 语法"></a>LTL 语法</h4><ul><li>设原子命题的集合为 A<ul><li>若ϕ∈A,则ϕ是 LTL 公式.</li><li>若ϕ和φ是 LTL 公式,则¬ϕ,ϕ∧φ,ϕ∨φ,ϕ→φ,Gϕ,Fϕ,Xϕ,ϕUφ,ϕRφ等是 LTL 公式.<ul><li>X,G,F,U,R 分别表示下一个(next),全部(global),最终(eventually),直到…全(until),直到…有(release)等模态词- ¬,∧,∨,→等符号称为连接词</li></ul></li></ul></li></ul><blockquote><p>因为主要是通过 BMC 找反例,因此 BMC 实际处理的是 LTL 规范的否定形式.LTL 规范的否定形式要表示为 NNF(negative normal form)形式的 LTL 公式(简称 NNF 公式).NNF 公式是不包含→连接词,且否定词只能出现在原子命题前的 LTL 公式</p><p>若 f 为 LTL 公式,则 depth(f)为 f 的深度,即 f 中模态词的嵌套层数.</p></blockquote><p><strong>Modal logic模态逻辑</strong></p><blockquote><p>Modal logic is a collection of formal systems developed to represent statements about necessity and possibility</p><p>模态逻辑是一个形式化系统的集合，用来表示关于必然性和可能性的声明</p></blockquote><h4 id="BMC的克里普克结构-Kripke-structure"><a href="#BMC的克里普克结构-Kripke-structure" class="headerlink" title="BMC的克里普克结构(Kripke structure)"></a>BMC的克里普克结构(Kripke structure)</h4><blockquote><p>BMC 的克里普克结构(Kripke structure)为一四元组 M＝(S,I,T,ℓ),其中,S 为 BMC 中 FSM 产生的所有状态集合;I⊆S,I 为初时状态的集合;T⊆S×S,T 为状态间转移关系的集合;ℓ:S→P(A),为标注状态的函数.</p></blockquote><h4 id="LTL-语义"><a href="#LTL-语义" class="headerlink" title="LTL 语义"></a>LTL 语义</h4><center><img loading="lazy" src="/posts/a3244b40/10.png" width="550"></center><h3 id="Satisfiability-Modulo-Theories-可满足性模数理论"><a href="#Satisfiability-Modulo-Theories-可满足性模数理论" class="headerlink" title="Satisfiability Modulo Theories 可满足性模数理论"></a>Satisfiability Modulo Theories 可满足性模数理论</h3><blockquote><p>SMT decides the satisfiability of first-order logic formulae using the combination of different background theories</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Software-Security/">Software Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/a3244b40/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>软件工程基础-软件质量与其他</title>
      <link>https://hejueyun.github.io/posts/3ff63edb/</link>
      <guid>https://hejueyun.github.io/posts/3ff63edb/</guid>
      <pubDate>Mon, 24 Jan 2022 23:40:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Software-Quality&quot;&gt;&lt;a href=&quot;#Software-Quality&quot; class=&quot;headerlink&quot; title=&quot;Software Quality&quot;&gt;&lt;/a&gt;Software Quality&lt;/h2&gt;&lt;h3 id=&quot;Desirable-Software-Quality-理想的软件质量&quot;&gt;&lt;a href=&quot;#Desirable-Software-Quality-理想的软件质量&quot; class=&quot;headerlink&quot; title=&quot;Desirable Software Quality(理想的软件质量)&quot;&gt;&lt;/a&gt;Desirable Software Quality(理想的软件质量)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;External characteristics： External characteristics are characteristics that a user of the software product is aware of&lt;/li&gt;
&lt;li&gt;Internal : developer directly experience&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;联系&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between internal and external characteristics isn’t completely clear-cut because at some level internal characteristics affect external ones. Software that isn’t internally understandable or maintainable impairs your ability to correct defects, which in turn affects the external characteristics of correctness and reliability. Software that isn’t flexible can’t be enhanced in response to user requests, which in turn affects the external characteristic of usability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/3ff63edb/2.png&quot; width=&quot;450px&quot;&gt;&lt;/center&gt;

&lt;p&gt;External characteristics：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctness&lt;ul&gt;
&lt;li&gt;一个系统在其规格、设计和实现中没有错误的程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Usability&lt;ul&gt;
&lt;li&gt;用户学习和使用一个系统的容易程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Efficiency&lt;ul&gt;
&lt;li&gt;对系统资源的最小化使用，包括&lt;strong&gt;内存和执行时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reliability&lt;ul&gt;
&lt;li&gt; 一个系统在规定的条件下，无论何时都能执行所需功能的能力–&lt;strong&gt;具有较长的平均故障间隔时间&lt;/strong&gt;( a long mean time between failures)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integrity&lt;ul&gt;
&lt;li&gt;完整性的概念包括&lt;strong&gt;限制未经授权的用户访问&lt;/strong&gt;，以及&lt;strong&gt;确保数据被正确访问&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Adaptability&lt;ul&gt;
&lt;li&gt;一个系统在没有修改的情况下，可以在其专门设计之外的应用或环境中使用的程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accuracy&lt;ul&gt;
&lt;li&gt;精确性与正确性不同；它决定了一个系统在多大程度上完成了它所构建的工作(而不是关注错误)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Robustness&lt;ul&gt;
&lt;li&gt;一个系统在无效的输入或紧张的环境条件下继续运行的程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;internal quality characteristics：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maintainability&lt;ul&gt;
&lt;li&gt;你可以修改一个软件系统以改变或增加功能、提高性能或纠正缺陷的容易程度&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The ease with&lt;/strong&gt; which you can modify a software system to change or add capabilities, improve performance, or correct defects&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flexibility &lt;ul&gt;
&lt;li&gt;可以修改一个系统的用途或环境的程度，而不是它的专门设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Portability&lt;ul&gt;
&lt;li&gt;你可以修改一个系统以在不同于其专门设计的环境中运行的容易程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reusability&lt;ul&gt;
&lt;li&gt;你可以在其他系统中使用一个系统的部分的程度和容易程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Readability&lt;ul&gt;
&lt;li&gt;你能够阅读和理解一个系统的源代码的难易程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testability&lt;ul&gt;
&lt;li&gt;你可以对一个系统进行单元测试和系统测试的程度；你可以&lt;strong&gt;验证该系统满足其要求的程度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Understandability&lt;ul&gt;
&lt;li&gt;在系统-组织和详细陈述层面上，你能理解一个系统的难易程度。&lt;strong&gt;与可读性相比，可理解性与系统在更一般的层面上的一致性有关&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readability is part of understandability&lt;/strong&gt;. But you can have readable methods or functions and an impossible to grasp architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Software-Quality"><a href="#Software-Quality" class="headerlink" title="Software Quality"></a>Software Quality</h2><h3 id="Desirable-Software-Quality-理想的软件质量"><a href="#Desirable-Software-Quality-理想的软件质量" class="headerlink" title="Desirable Software Quality(理想的软件质量)"></a>Desirable Software Quality(理想的软件质量)</h3><ul><li>External characteristics： External characteristics are characteristics that a user of the software product is aware of</li><li>Internal : developer directly experience</li></ul><p><strong>联系</strong></p><blockquote><p>The difference between internal and external characteristics isn’t completely clear-cut because at some level internal characteristics affect external ones. Software that isn’t internally understandable or maintainable impairs your ability to correct defects, which in turn affects the external characteristics of correctness and reliability. Software that isn’t flexible can’t be enhanced in response to user requests, which in turn affects the external characteristic of usability.</p></blockquote><center><img loading="lazy" src="/posts/3ff63edb/2.png" width="450px"></center><p>External characteristics：</p><ul><li>Correctness<ul><li>一个系统在其规格、设计和实现中没有错误的程度</li></ul></li><li>Usability<ul><li>用户学习和使用一个系统的容易程度</li></ul></li><li>Efficiency<ul><li>对系统资源的最小化使用，包括<strong>内存和执行时间</strong></li></ul></li><li>Reliability<ul><li> 一个系统在规定的条件下，无论何时都能执行所需功能的能力–<strong>具有较长的平均故障间隔时间</strong>( a long mean time between failures)</li></ul></li><li>Integrity<ul><li>完整性的概念包括<strong>限制未经授权的用户访问</strong>，以及<strong>确保数据被正确访问</strong></li></ul></li><li>Adaptability<ul><li>一个系统在没有修改的情况下，可以在其专门设计之外的应用或环境中使用的程度</li></ul></li><li>Accuracy<ul><li>精确性与正确性不同；它决定了一个系统在多大程度上完成了它所构建的工作(而不是关注错误)</li></ul></li><li>Robustness<ul><li>一个系统在无效的输入或紧张的环境条件下继续运行的程度</li></ul></li></ul><p>internal quality characteristics：</p><ul><li>Maintainability<ul><li>你可以修改一个软件系统以改变或增加功能、提高性能或纠正缺陷的容易程度<blockquote><p><strong>The ease with</strong> which you can modify a software system to change or add capabilities, improve performance, or correct defects</p></blockquote></li></ul></li><li>Flexibility <ul><li>可以修改一个系统的用途或环境的程度，而不是它的专门设计</li></ul></li><li>Portability<ul><li>你可以修改一个系统以在不同于其专门设计的环境中运行的容易程度</li></ul></li><li>Reusability<ul><li>你可以在其他系统中使用一个系统的部分的程度和容易程度</li></ul></li><li>Readability<ul><li>你能够阅读和理解一个系统的源代码的难易程度</li></ul></li><li>Testability<ul><li>你可以对一个系统进行单元测试和系统测试的程度；你可以<strong>验证该系统满足其要求的程度</strong></li></ul></li><li>Understandability<ul><li>在系统-组织和详细陈述层面上，你能理解一个系统的难易程度。<strong>与可读性相比，可理解性与系统在更一般的层面上的一致性有关</strong></li><li><strong>Readability is part of understandability</strong>. But you can have readable methods or functions and an impossible to grasp architecture</li></ul></li></ul><hr><center><img loading="lazy" src="/posts/3ff63edb/1.png" width="400px"></center><ul><li><strong>最大化某些特征的尝试不可避免地与最大化其他特征的尝试相冲突。从一组相互竞争的目标中找到一个最佳解决方案，是使软件开发成为真正的工程学科的一项活动。</strong></li><li><strong>专注于一个特定的特征并不总是意味着要与另一个特征进行交换。有时一个会伤害另一个，有时会帮助另一个，有时既不伤害也不帮助另一个</strong> Focusing on one external characteristic of software quality can affect other characteristics positively, adversely, or not at all</li></ul><h3 id="Techniques-for-Improving-Software-Quality（提高软件质量的方法）"><a href="#Techniques-for-Improving-Software-Quality（提高软件质量的方法）" class="headerlink" title="Techniques for Improving Software Quality（提高软件质量的方法）"></a>Techniques for Improving Software Quality（提高软件质量的方法）</h3><h4 id="Setting-Objectives"><a href="#Setting-Objectives" class="headerlink" title="Setting Objectives"></a>Setting Objectives</h4><blockquote><p>One powerful technique for improving software quality is setting explicit quality objectives from among the <strong>external</strong> and <strong>internal</strong> characteristics described in the previous section</p><p>Explicit quality-assurance activity.</p><ul><li>Making the quality-assurance activity explicit makes the priority clear, and programmers will respond accordingly.</li></ul></blockquote><h4 id="Development-Process"><a href="#Development-Process" class="headerlink" title="Development Process"></a>Development Process</h4><ul><li><strong>Change-control procedures</strong><ul><li>One big obstacle to achieving software quality is uncontrolled changes. Uncontrolled requirements changes can result in disruption to design and coding. Uncontrolled changes in design can result in code that doesn’t agree with its requirements, inconsistencies in the code, or more time spent modifying code to meet the changing design than spent moving the project forward. 实现软件质量的一个大障碍就是不受控制的变更。不受控制的需求变更会导致设计和编码的中断。不受控制的设计变更会导致代码与需求不一致，代码中的不一致，或者花在修改代码以满足不断变化的设计上的时间比花在推进项目上的时间多</li></ul></li><li><strong>Measurement of results</strong><ul><li>除非对质量保证计划的结果进行测量，否则你将无法知道该计划是否有效</li></ul></li><li><strong>Prototyping</strong><ul><li>Prototyping is the development of realistic models of a system’s key functions. A developer can prototype parts of a user interface to determine usability, critical calculations to determine <strong>execution time</strong>, or typical data sets to determine <strong>memory requirements</strong>. 原型验证是对系统关键功能的现实模型的开发。开发者可以对用户界面的一部分进行原型开发以确定可用性，对关键计算进行原型开发以确定执行时间，或对典型数据集进行原型开发以确定内存需求。</li></ul></li></ul><h3 id="不同质量保证的方法的有效性"><a href="#不同质量保证的方法的有效性" class="headerlink" title="不同质量保证的方法的有效性"></a>不同质量保证的方法的有效性</h3><blockquote><p>这个数据所揭示的最有趣的事实是，任何一种技术的模态率都没有超过75%，各种技术平均约为40%。此外，对于最常见的缺陷检测–单元测试和集成测试–模式率只有30-35%。典型的组织使用重测试的缺陷清除方法，只能达到约85%的缺陷清除效率。领先的组织使用更广泛的技术，实现了95%或更高的缺陷清除效率。</p><p>如果项目开发人员要争取更高的缺陷发现率，他们需要使用多种技术组合（if project developers are striving for a higher defect detection rate, they need to use a combination of techniques）</p></blockquote><p>Cost of Finding Defects发现漏洞的成本</p><ul><li>Most studies have found that <strong>inspection</strong>s are cheaper than <strong>testing</strong>. A study at the Software Engineering Laboratory found that <strong>code reading</strong> detected about 80 percent more faults per hour than <strong>testing</strong><br>Cost of Fixing Defects</li><li>the longer a defect remains in the system, the more expensive it becomes to remove. A detection technique that finds the error earlier therefore results in a lower cost of fixing it</li></ul><p>Here’s a recommended combination for achieving higher-than-average quality:</p><ul><li>Formal inspections of all requirements, all architecture, and designs for critical parts of a system</li><li>Modeling or prototyping</li><li>Code reading or inspections</li><li>Execution testing</li></ul><h3 id="When-to-Do-Quality-Assurance"><a href="#When-to-Do-Quality-Assurance" class="headerlink" title="When to Do Quality Assurance"></a>When to Do Quality Assurance</h3><blockquote><p>the earlier an error is inserted into software, the more entangled it becomes in other parts of the software and the more expensive it becomes to remove. </p></blockquote><ul><li>一个错误越早插入软件，它在软件其他部分的纠缠就越多，消除它的代价就越大。需求中的错误会在设计中产生一个或多个相应的错误，而设计中的错误又会在代码中产生许多相应的错误。一个需求错误会导致额外的架构或错误的架构决策。额外的架构会导致额外的代码、测试用例和文档。或者一个需求错误会导致架构、代码和测试用例被丢弃</li><li><strong>Defects creep into software at all stages</strong><ul><li>质量保证工作应当在每一构建环节都介入 </li><li> It should be planned into the project as work begins; </li><li> it should be part of the technical fiber of the project as work continues; </li><li> and it should punctuate the end of the project, verifying the quality of the product as work ends.</li></ul></li></ul><h3 id="The-General-Principle-of-Software-Quality"><a href="#The-General-Principle-of-Software-Quality" class="headerlink" title="The General Principle of Software Quality"></a>The General Principle of Software Quality</h3><blockquote><p><strong>The General Principle of Software Quality is that improving quality reduces development costs.</strong></p></blockquote><ul><li>这个原则本质上也是个“悖论”paradox</li><li>提高生产力和质量的最好方法是减少代码返工的时间，无论返工是由于需求的变化、设计的变化还是调试的变化</li><li>Compared to the traditional <code>code-test-debug</code> cycle, an enlightened software-quality program saves money</li></ul><img loading="lazy" src="/posts/3ff63edb/11.png" width="550"><blockquote><p>the best way to improve productivity and quality is to reduce the time spent reworking code, whether the rework arises from changes in requirements, changes in design, or debugging. The industry-average productivity for a software product is about 10 to 50 of lines of delivered code per person per day (including all noncoding overhead). It takes only a matter of minutes to type in 10 to 50 lines of code</p></blockquote><img loading="lazy" src="/posts/3ff63edb/9.png" width="550"><ul><li>你是否考虑过一些特性可能与其他特性竞争或互补的方式？</li></ul><h3 id="key-points"><a href="#key-points" class="headerlink" title="key points"></a>key points</h3><ol><li>Quality is free, in the end, but it requires a reallocation of resources so that <strong>defects are prevented cheaply instead of fixed expensively</strong>.</li><li>Not all quality-assurance goals are simultaneously achievable. Explicitly decide which goals you want to achieve, and communicate the goals to other people on your team.</li><li>No single defect-detection technique is completely effective by itself. Testing by itself is not optimally effective at removing errors. Successful quality-assurance programs use several different techniques to detect different kinds of errors.</li><li>You can apply effective techniques during construction and many equally powerful techniques before construction. The earlier you find a defect, the less intertwined it will become with the rest of your code and the less damage it will cause.</li><li>Quality assurance in the software arena is process-oriented. Software development doesn’t have a repetitive phase that affects the final product like manufacturing does, so the quality of the result is controlled by the process used to develop the software.</li></ol><hr><h2 id="Intellectual-Property-知识产权"><a href="#Intellectual-Property-知识产权" class="headerlink" title="Intellectual Property 知识产权"></a>Intellectual Property 知识产权</h2><blockquote><p>Intellectual property is any articulable, tangible production of a mind whose physical realisations are restricted by law (e.g., in distribution)</p><p>知识产权是任何可阐明的、有形的思想成果，其物质实现受到法律的限制（例如，在分销方面）。</p><hr><p>Copyright is a licensable monopoly of the tangible expression of an idea with respect to reproduction, derivation, display，distribution, and the like.</p><p>版权是对思想的有形表达在复制、衍生、展示、传播等方面的一种可授权的垄断。</p></blockquote><h2 id="程序等价"><a href="#程序等价" class="headerlink" title="程序等价"></a>程序等价</h2><ul><li>如果我们无法区分两个程序（在某种程度上），那么这两个程序就是等价的（以这种方式）。</li><li>Two programs are functionally equivalent just in case they implement exactly the same <strong>functionality</strong>.</li><li>if two programs are <strong>behaviourly</strong> equivalent then they are functionally equivalent.</li><li>这里将等价性定义为“给定相同合法输入，有相同输出”</li></ul><h2 id="Managing-Construction"><a href="#Managing-Construction" class="headerlink" title="Managing Construction"></a>Managing Construction</h2><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><ol><li>Good coding practices can be achieved either through enforced standards or through more light-handed approaches.<ol><li>Encouraging Good Coding</li></ol></li><li>Configuration management, when properly applied, makes programmers’ jobs easier. This especially includes change control.<ol><li><strong>Configuration management is the practice of identifying project artifacts and handling changes systematically so that a system can maintain its integrity over time. Another name for it is “change control.”</strong> It includes techniques for evaluating proposed changes, tracking changes, and keeping copies of the system as it existed at various points in time.</li><li>Software Code Changes、Tool Versions、Machine Configurations、Backup</li></ol></li><li>Good software estimation is a significant challenge. Keys to success are using multiple approaches, tightening down your estimates as you work your way into the project, and making use of data to create the estimates.<ol><li>Use estimating software、algorithmic approach、Have a walk-through meeting for estimates</li></ol></li><li>Measurement is a key to successful construction management. You can find ways to measure any aspect of a project that are better than not measuring it at all. Accurate measurement is a key to accurate scheduling, to quality control, and to improving your development process.</li><li>Programmers and managers are people, and they work best when treated as such</li></ol><h2 id="character"><a href="#character" class="headerlink" title="character"></a>character</h2><ol><li>our personal character directly affects your ability to write computer programs.</li><li>The characteristics that matter most are humility, curiosity, intellectual honesty, creativity and discipline, and enlightened laziness.</li><li>The characteristics of a superior programmer have almost nothing to do with talent and everything to do with a commitment to personal development.</li><li>Surprisingly, raw intelligence, experience, persistence, and guts hurt as much as they help.</li><li>Many programmers don’t actively seek new information and techniques and instead rely on accidental, on-the-job exposure to new information. If you devote a small percentage of your time to reading and learning about programming, after a few months or years you’ll dramatically distinguish yourself from the programming mainstream.</li><li>Good character is mainly a matter of having the right habits. To be a great programmer, develop the right habits and the rest will come naturally.</li></ol><h2 id="开发成本"><a href="#开发成本" class="headerlink" title="开发成本"></a>开发成本</h2><ul><li>The unit cost diminishes as the number of units increases<ul><li>So focus on lines of code or bits of functionality</li></ul></li><li><strong>Cost Ratios</strong><ul><li>Before deployment (aka submission)<ul><li>Small fixes are cheap</li></ul></li><li>After deployment (aka submission)<ul><li>Even “small” fixes are expensive (or impossible)</li></ul></li><li>Strategies<ul><li>Avoid late bugs</li><li>Make fixing late bugs cheaper</li></ul></li></ul></li><li>The General <strong>Principle</strong> of Software Quality is that improving quality reduces development costs</li></ul><center><img loading="lazy" src="/posts/3ff63edb/3.png" width="450px"></center><h3 id="Trade-Offs"><a href="#Trade-Offs" class="headerlink" title="Trade-Offs"></a>Trade-Offs</h3><ul><li> Time for Space (and the reverse)</li><li> Performance for Readability (and the reverse)</li></ul><h3 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h3><ul><li>Buy More and Faster Hardware</li><li>Use the Optimiser</li><li>Better compilers/frameworks/libraries</li></ul><h3 id="Technical-Debt"><a href="#Technical-Debt" class="headerlink" title="Technical Debt"></a>Technical Debt</h3><blockquote><p>In software development, technical debt (also known as design debt or code debt) is the implied** cost of additional rework** caused by <strong>choosing an easy(limited) solution</strong> now instead of using a <strong>better approach that would take longer</strong></p><p>技术负债（英语：Technical debt），又译技术债，也称为设计负债（design debt）、代码负债（code debt），是程序设计及软件工程中的一个比喻。指开发人员为了加速软件开发，在应该采用最佳方案时进行了妥协，改用了短期内能加速软件开发的方案，从而在未来给自己带来的额外开发负担。这种技术上的选择，就像一笔债务一样，虽然眼前看起来可以得到好处，但必须在未来偿还。软件工程师必须付出额外的时间和精力持续修复之前的妥协所造成的问题及副作用，或是进行重构，把架构改善为最佳实现方式。 </p></blockquote><ul><li>如果我们等待，就会产生利息<ul><li>我们写的测试越多，以后要改的测试就越多</li><li>可能会导致更对债务</li></ul></li></ul><p>Intentional Vs Unintentional Debt<br>无意的债务==意外的或偶然的</p><ul><li>我们可能不知道我们产生了它!</li><li>我们可能不知道有利息！<br>故意的债务 == 故意的，有意识地产生的</li><li>需要一个可识别的理由（identifiable rationale）</li><li>有一个范围</li></ul><p>为什么负债</p><ul><li><p>Short-Term Debt</p><ul><li>战术原因 Tactical reasons</li></ul></li><li><p>Long-Term Debt</p><ul><li>战略原因 Strategic reasons</li></ul></li><li><p><strong>重构是还债最常见的方式</strong></p></li><li><p>其余还包括增加测试用例等</p></li></ul><h2 id="Managing-Complexity"><a href="#Managing-Complexity" class="headerlink" title="Managing Complexity"></a>Managing Complexity</h2><h3 id="No-silver-bullet"><a href="#No-silver-bullet" class="headerlink" title="No silver bullet"></a>No silver bullet</h3><p>The complexities of software systems lead to difficulties in both accident and essence. According to Brooks, the accidental complexities are largely caused by artificial barriers, including poor programming skills, severe hardware constraints and lack of machine time. On the contrary, the essential complexities, inherent in the nature of the software, are reflected by the hardship of composing the abstract software entity, including specification, design and testing of the conceptual construct, rather than the labour of actual construction.</p><p>What is highlighted in Brooks’ essay is that no once-and-for-all solution to remove the complexity of the software, thus “no silver bullet”. From the aspect of accidental complexities, although problems can be considerably alleviated by the high-level language, time-sharing and unified programming environment, it is impossible to avoid “accidents”, particularly when products increase with size. From the aspect of accidental complexities, the inherent properties of modern software systems determine the difficulty of finding a solution, as technologies that are advanced as potential “silver bullet” yet mostly remain problem-specific. An artificial intelligence implement of computer images, for example, cannot easily transfer to different programming practices. </p><p>However, there are some promising attacks, raised by Brooks, on the conceptual essence. These contain the principles of buy rather than build, rapid prototyping of system and cautious design. </p><p>In general, considering the shrinking marginal benefit of reducing accidents, and the inherent complexity of software systems, finding “silver bullets” to minimize complexity remains challenging yet possible.</p><hr><p>Brooks observes that the major accidental difficulties in software were addressed long ago. For example, accidental difficulties related to clumsy language syntaxes were largely eliminated in the evolution from assembly language to third-generation languages and have declined in significance incrementally since then. Accidental difficulties related to noninteractive computers were resolved when time-share operating systems replaced batch-mode systems. Integrated programming environments further eliminated inefficiencies in programming work arising from tools that worked poorly together.</p><p>Brooks argues that progress on software’s remaining essential difficulties is bound to be slower. The reason is that, at its essence, software development consists of working out all the details of a highly intricate, interlocking set of concepts. The essential difficulties arise from the necessity of interfacing with the complex, disorderly real world; accurately and completely identifying the dependencies and exception cases; designing solutions that can’t be just approximately correct but that must be exactly correct; and so on. Even if we could invent a programming language that used the same terminology as the real-world problem we’re trying to solve, programming would still be difficult because of the challenge in determining precisely how the real world works. As software addresses ever-larger real-world problems, the interactions among the real-world entities become increasingly intricate, and that in turn increases the essential difficulty of the software solutions.</p><p><strong>The root of all these essential difficulties is complexity—both accidental and essential.</strong></p><h3 id="Importance-of-Managing-Complexity"><a href="#Importance-of-Managing-Complexity" class="headerlink" title="Importance of Managing Complexity"></a>Importance of Managing Complexity</h3><ul><li>Projects fail most often because of poor requirements, poor planning, or poor management. But when projects do fail for reasons that are primarily technical, the reason is often uncontrolled complexity. The software is allowed to grow so complex that no one really knows what it does. When a project reaches the point at which no one completely understands the impact that code changes in one area will have on other areas, progress grinds to a halt.</li><li>no one’s skull is really big enough to contain a modern computer program (Dijkstra 1972), which means that we as software developers shouldn’t try to cram whole programs into our skulls at once; we should try to organize our programs in such a way that we can safely focus on one part of it at a time.</li><li>Keeping routines short helps reduce your mental workload. Writing programs in terms of the problem domain, rather than in terms of low-level implementation details, and working at the highest level of abstraction reduce the load on your brain.</li></ul><h3 id="How-to-Attack-Complexity"><a href="#How-to-Attack-Complexity" class="headerlink" title="How to Attack Complexity"></a>How to Attack Complexity</h3><ul><li>Minimize the amount of essential complexity that anyone’s brain has to deal with at any one time<ul><li>尽量减少任何人的大脑在任何时候都必须处理的基本复杂性。</li></ul></li><li>Keep <strong>accidental complexity</strong> from needlessly proliferating<ul><li>防止意外的复杂性不必要地扩散</li></ul></li></ul><h2 id="Architecting-How-Much-and-When"><a href="#Architecting-How-Much-and-When" class="headerlink" title="Architecting: How Much and When?"></a>Architecting: How Much and When?</h2><h3 id="the-Cost-of-Fixing-Software"><a href="#the-Cost-of-Fixing-Software" class="headerlink" title="the Cost of Fixing Software"></a>the Cost of Fixing Software</h3><center><img loading="lazy" src="/posts/3ff63edb/10.png" width="450px"></center><h3 id="How-Much-Architecting-Is-Enough"><a href="#How-Much-Architecting-Is-Enough" class="headerlink" title="How Much Architecting Is Enough"></a>How Much Architecting Is Enough</h3><blockquote><p>The evidence provided across 40 years of data on the degree of increase in software cost-to-fix versus delay-of-fix is that for large projects, the increase from fixing requirements changes and defects during requirements definition to fixing them once the product is fielded continues to be around 100:1. However, this ratio can be significantly reduced by higher investments in early requirements and architecture verification and validation. As shown by the CCPDS-R project data in Figure 10-6, the ratio can approach 1:1 if the high-risk fixes are addressed early.<br>The evidence for small projects continues to show ratios around 5:1, but these can also be flattened by the use of outstanding personnel and by Agile methods, such as pair programming and continuous integration, that shorten the delay-of-fix time. Small, noncritical projects can also spread their architecting activity across the life cycle via refactoring, but need to watch out for making easiest-first architectural commitments that cannot be easily undone by refactoring, such as committing to unscalable COTS products or security-incompatible data and control structures.<br>The evidence provided more recently on the payoff of architecting and risk resolution efforts, such as those on CCPDS-R, is that the location of the highest-payoff “how much architecting is enough” sweet spot is a function of project size and criticality (larger, more critical projects require more architecting investment), but also a function of requirements volatility (more volatile projects would be slowed down by the need to revise extensive documentation). For detailed project planning and budgeting, the sweet-spot numbers need to be adjusted to reflect additional project, personnel, and product-related cost drivers. A recent COSYSMO model is now available to support such adjustments.<br>Very large projects are likely to have elements that are high in criticality and stability (e.g., safety and security-critical elements), as well as elements that are high in requirements volatility (e.g., user interfaces, external-system interfaces, device drivers, database schemas). In such cases, a hybrid approach using Agile methods for the rapidly changing parts and plandriven methods for the more stable and high-criticality parts will work, as long as the overall system is based on an architecture using the [Parnas 1979] information-hiding approach of encapsulating sources of change within modules.<br>Thus, there are no one-size-fits-all solutions for the increasingly rapid change that projects will experience in the future. Large projects or enterprises with a mix of critical and volatile elements are best served by risk-driven process generators, such as the Incremental Commitment Model and risk-driven versions of the Rational Unified Process. These model generators use the degree of developer-supplied evidence of project feasibility to determine project risk. Such evidence is critical to the success of many future projects facing the prospect of having to cope with increasing size, criticality, volatility, and complexity. In addition, the use of such evidence-based models will have the double benefit of reducing risk and adding to the knowledge base of evidence that can be analyzed for further sources of project and enterprise improvement.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Software-Engineering/">Software Engineering</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/3ff63edb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>论文笔记：使用基于SMT的上下文边界模型来验证多线程软件</title>
      <link>https://hejueyun.github.io/posts/9277bdf3/</link>
      <guid>https://hejueyun.github.io/posts/9277bdf3/</guid>
      <pubDate>Sun, 23 Jan 2022 16:18:14 GMT</pubDate>
      
      
      
      
      
      
      <comments>https://hejueyun.github.io/posts/9277bdf3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码学备忘录-工作模式</title>
      <link>https://hejueyun.github.io/posts/c82bbc9e/</link>
      <guid>https://hejueyun.github.io/posts/c82bbc9e/</guid>
      <pubDate>Thu, 20 Jan 2022 16:28:13 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;工作模式Modes-of-Operation&quot;&gt;&lt;a href=&quot;#工作模式Modes-of-Operation&quot; class=&quot;headerlink&quot; title=&quot;工作模式Modes of Operation&quot;&gt;&lt;/a&gt;工作模式Modes of Operation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决如何将cipher加密算法运用到plaintext明文的问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有block分组和stream流两种方式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/c82bbc9e/2020-08-10-19-02-24.png&quot; width height=&quot;200&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;ECB，CBC，OFB，CFB，CTR和XTS模式仅仅提供了&lt;strong&gt;机密性&lt;/strong&gt;；为了保证加密信息没有被意外修改或恶意篡改，需要采用分离的消息验证码，例如CBC-&lt;strong&gt;MAC&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ECB-Electronic-codebook&quot;&gt;&lt;a href=&quot;#ECB-Electronic-codebook&quot; class=&quot;headerlink&quot; title=&quot;ECB Electronic codebook&quot;&gt;&lt;/a&gt;ECB Electronic codebook&lt;/h3&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/c82bbc9e/2020-08-10-19-05-10.png&quot; width height=&quot;200&quot;&gt;

&lt;ul&gt;
&lt;li&gt;当明文分组重复时，密文也重复，易实现统计分析攻击&lt;/li&gt;
&lt;li&gt;结构化数据，将产生大量重复的密文&lt;/li&gt;
&lt;li&gt;ECB模式最严重的问题是使得对手选取部分分组进行重放攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CBC-Cipher-block-chaining&quot;&gt;&lt;a href=&quot;#CBC-Cipher-block-chaining&quot; class=&quot;headerlink&quot; title=&quot;CBC Cipher-block chaining&quot;&gt;&lt;/a&gt;CBC Cipher-block chaining&lt;/h3&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/c82bbc9e/2020-08-10-19-06-24.png&quot; width height=&quot;200&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;保护IV的原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果敌手能欺骗接收方使用不同的Iv值，敌手就能够在明文的第1个分组中插入自己选择的比特值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;错误传播&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明文错误传播&lt;ul&gt;
&lt;li&gt;加密前的明文中某个错误对解密后恢复的明文的影响&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CBC没有明文错误传播&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;密文错误传播&lt;ul&gt;
&lt;li&gt;密文组中某部分比特错误&lt;/li&gt;
&lt;li&gt;某密文组丢失&lt;/li&gt;
&lt;li&gt;被插入一个密文组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CBC的密文错误传播很小&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;padding oracle attack&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="工作模式Modes-of-Operation"><a href="#工作模式Modes-of-Operation" class="headerlink" title="工作模式Modes of Operation"></a>工作模式Modes of Operation</h2><ul><li><strong>解决如何将cipher加密算法运用到plaintext明文的问题</strong></li><li><strong>有block分组和stream流两种方式</strong></li></ul><img loading="lazy" src="/posts/c82bbc9e/2020-08-10-19-02-24.png" width height="200"><blockquote><p>ECB，CBC，OFB，CFB，CTR和XTS模式仅仅提供了<strong>机密性</strong>；为了保证加密信息没有被意外修改或恶意篡改，需要采用分离的消息验证码，例如CBC-<strong>MAC</strong></p></blockquote><h3 id="ECB-Electronic-codebook"><a href="#ECB-Electronic-codebook" class="headerlink" title="ECB Electronic codebook"></a>ECB Electronic codebook</h3><img loading="lazy" src="/posts/c82bbc9e/2020-08-10-19-05-10.png" width height="200"><ul><li>当明文分组重复时，密文也重复，易实现统计分析攻击</li><li>结构化数据，将产生大量重复的密文</li><li>ECB模式最严重的问题是使得对手选取部分分组进行重放攻击</li></ul><h3 id="CBC-Cipher-block-chaining"><a href="#CBC-Cipher-block-chaining" class="headerlink" title="CBC Cipher-block chaining"></a>CBC Cipher-block chaining</h3><img loading="lazy" src="/posts/c82bbc9e/2020-08-10-19-06-24.png" width height="200"><ul><li><p>保护IV的原因</p><ul><li>如果敌手能欺骗接收方使用不同的Iv值，敌手就能够在明文的第1个分组中插入自己选择的比特值</li></ul></li><li><p><strong>错误传播</strong></p><ul><li>明文错误传播<ul><li>加密前的明文中某个错误对解密后恢复的明文的影响</li><li><strong>CBC没有明文错误传播</strong></li></ul></li><li>密文错误传播<ul><li>密文组中某部分比特错误</li><li>某密文组丢失</li><li>被插入一个密文组</li><li><strong>CBC的密文错误传播很小</strong></li></ul></li></ul></li><li><p>padding oracle attack</p></li></ul><h4 id="CBC-MAC"><a href="#CBC-MAC" class="headerlink" title="CBC-MAC"></a>CBC-MAC</h4><blockquote><p> a technique for constructing a message authentication code from a block cipher. </p></blockquote><ul><li>CBC-MAC 仅适用于对相同长度的消息进行认证，在消息长度变化的情况下是不安全的</li><li>当取AES作为MAC加密的分组密码时，一般采用CBC模式，所以通常称为基于AES的CBC-MAC,若需要产生认证码的消息为x，加密的AES为k，则生成加解密的过程如下图所示</li></ul><img loading="lazy" src="/posts/c82bbc9e/3.jpg" width="500"><h3 id="CFB-密码反馈-Cipher-Feed-Back"><a href="#CFB-密码反馈-Cipher-Feed-Back" class="headerlink" title="CFB(密码反馈)Cipher Feed Back"></a>CFB(密码反馈)Cipher Feed Back</h3><ul><li>将分组密码作为流密码的密钥流发生器<ul><li>利用CFB(Cipher Feed Back)模式或输出反馈(OFB)模式，可将<strong>分组密码</strong>转换为<strong>流密码</strong></li></ul></li></ul><img loading="lazy" src="/posts/c82bbc9e/2020-08-10-19-18-52.png" width height="250"><img loading="lazy" src="/posts/c82bbc9e/2020-08-11-15-19-31.png" width height="250"><p>攻击</p><img loading="lazy" src="/posts/c82bbc9e/2020-08-11-15-08-16.png" width height="200"><h3 id="OFB-输出反馈-Output-feedback"><a href="#OFB-输出反馈-Output-feedback" class="headerlink" title="OFB(输出反馈) Output feedback"></a>OFB(输出反馈) Output feedback</h3><ul><li>OFB模式是将加密算法的输出反馈到移位寄存器</li><li>CFB模式中是将密文单元反馈到移位寄存器</li></ul><img loading="lazy" src="/posts/c82bbc9e/2020-08-11-15-12-27.png" width height="200"><ul><li>优点:传输过程中的密文比特错误不会被传播</li><li>缺点:它比CFB模式更易受到对消息流的篡改攻击</li></ul><img loading="lazy" src="/posts/c82bbc9e/2020-08-11-15-06-33.png" width height="200"><h3 id="CTR-Counter"><a href="#CTR-Counter" class="headerlink" title="CTR Counter"></a>CTR Counter</h3><blockquote><p>与OFB一样，计数器模式将一个块状密码变成了一个流密码。它通过对一个 “计数器 “的连续值进行加密来生成下一个密钥流块。计数器可以是任何能产生一个保证长时间不重复的序列的函数</p></blockquote><img loading="lazy" src="/posts/c82bbc9e/5.svg" width="500"><h3 id="XTS"><a href="#XTS" class="headerlink" title="XTS"></a>XTS</h3><img loading="lazy" src="/posts/c82bbc9e/2.svg" width="500"><ul><li>XEX-based tweaked-codebook mode with ciphertext stealing</li><li>基于XEX的调整密码本模式与密码文本窃取</li></ul><p>弱点</p><blockquote><p>XTS模式容易受到数据操纵和篡改的影响，如果操纵和篡改是一个问题，应用程序必须采用措施来检测数据的修改：”……由于没有认证标签，那么任何密码文本（原始或被攻击者修改）将被解密为一些明文，没有内置机制来检测修改。可以做的最好的事情是确保对密码文本的任何更改将完全随机化明文，并依靠使用这种转换的应用程序在其明文中包括足够的冗余，以检测和丢弃这种随机明文。” 这就需要为磁盘上的所有数据和元数据维护校验和，正如ZFS或Btrfs所做的那样。然而，在常用的文件系统中，如ext4和NTFS，只有元数据受到保护，不被篡改，而对数据篡改的检测是不存在的[16] 。</p><p>该模式容易受到流量分析、重放和对扇区和16字节块的随机化攻击。当一个给定的扇区被重写时，攻击者可以收集细粒度（16字节）的密码文本，这可用于分析或重放攻击（以16字节为粒度）。定义扇区范围内的块密码是可能的，不幸的是性能会下降（见下文）。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Cryptography/">Cryptography</category>
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/c82bbc9e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码学备忘录-消息验证码MAC</title>
      <link>https://hejueyun.github.io/posts/d83c07b3/</link>
      <guid>https://hejueyun.github.io/posts/d83c07b3/</guid>
      <pubDate>Wed, 19 Jan 2022 23:59:07 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;哈希&lt;ul&gt;
&lt;li&gt;其中一种实现方法称为HMAC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组密码&lt;/li&gt;
&lt;/ul&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/d83c07b3/2020-08-13-15-27-33.png&quot; width height=&quot;250&quot;&gt;

&lt;ul&gt;
&lt;li&gt;appended to message as a &lt;strong&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接收者进行相同计算，比较MAC前后是否一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;approach&quot;&gt;&lt;a href=&quot;#approach&quot; class=&quot;headerlink&quot; title=&quot;approach&quot;&gt;&lt;/a&gt;approach&lt;/h3&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/d83c07b3/9.png&quot; width=&quot;500&quot;&gt;

&lt;ul&gt;
&lt;li&gt;不可逆&lt;/li&gt;
&lt;li&gt;均匀分布&lt;/li&gt;
&lt;li&gt;均匀依赖每一bit消息&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>用途</p><ul><li>实现authentication</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li>哈希<ul><li>其中一种实现方法称为HMAC</li></ul></li><li>分组密码</li></ul><img loading="lazy" src="/posts/d83c07b3/2020-08-13-15-27-33.png" width height="250"><ul><li>appended to message as a <strong><code>digest</code></strong></li><li>接收者进行相同计算，比较MAC前后是否一致</li></ul><h3 id="approach"><a href="#approach" class="headerlink" title="approach"></a>approach</h3><img loading="lazy" src="/posts/d83c07b3/9.png" width="500"><ul><li>不可逆</li><li>均匀分布</li><li>均匀依赖每一bit消息</li></ul><h3 id="requirement"><a href="#requirement" class="headerlink" title="requirement"></a>requirement</h3><img loading="lazy" src="/posts/d83c07b3/10.png" width="500"><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>MAC与加密算法的区别</p><ul><li>MAC算法不要求可逆，但加密算法则必须是可逆的;</li><li>MAC算法的输出MAC码是<strong>定</strong>长的，而加<strong>密算法输出的密文长度与明文长度有关</strong>。</li><li>MAC函数的设计比加密函数更为灵活</li></ul><h2 id="基于hash函数"><a href="#基于hash函数" class="headerlink" title="基于hash函数"></a>基于hash函数</h2><img loading="lazy" src="/posts/d83c07b3/2020-08-13-15-22-19.png" width height="250"><ul><li>散列函数的软件实现快于分组密码的软件实现</li><li>散列函数的库代码来源广泛</li><li>散列函数不使用密钥，因此不能直接用于MAC</li></ul><h3 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h3><p>HMAC是基于散列函数的消息认证算法，在IPSec和其他网络协议(如SSL)中得以应用。</p><img loading="lazy" src="/posts/d83c07b3/2020-08-13-20-48-57.png" width height="250"><ul><li>precomputation预运算</li></ul><img loading="lazy" src="/posts/d83c07b3/2020-08-13-20-49-12.png" width height="250"><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>依赖于底层的(underlying)哈希函数的安全性</p><ul><li>暴力破解</li><li>生日攻击</li></ul><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>HMAC用于身份认证</p><ul><li>先由客户端向服务器发出一个验证请求。<br>服务器接到此请求后生成一个随机数并通过网络传输给客户端(挑战–Challenge)。</li><li>客户端将收到的随机数提供给U盾，U盾使用该随机数与存储在U盾中的密钥进行HMAC-MD5运算并得到一个结果作为认证证据传给服务器(响应–Response)。</li><li>服务器也使用该随机数与存储在服务器数据库中的该客户密钥进行HMAC-MD5运算，如果服务器的运算结果与客户端传回的响应结果相同，则认为客户端是一个合法<br>用户。</li></ul><h2 id="基于分组密码"><a href="#基于分组密码" class="headerlink" title="基于分组密码"></a>基于分组密码</h2><h3 id="DES-CBC"><a href="#DES-CBC" class="headerlink" title="DES-CBC"></a>DES-CBC</h3><ul><li>Data Authentication Algorithm (DAA)</li><li>but final MAC is now too small (64 bits) for security</li></ul><h4 id="CBC-MAC"><a href="#CBC-MAC" class="headerlink" title="CBC-MAC"></a>CBC-MAC</h4><ul><li>考虑CBC和CFB工作模式的特点:<ul><li>一个明文分组的改变，在加密时会引起相应的密文分组及其后的所有密文分组的改变。</li></ul></li><li>因此，可以利用分组密码的CBC和CFB工作模式来构造消息认证码。</li><li>也有AES实现</li></ul><img loading="lazy" src="/posts/d83c07b3/2020-08-13-16-18-15.png" width height="250">- IV：0<h4 id="CFB-MAC"><a href="#CFB-MAC" class="headerlink" title="CFB-MAC"></a>CFB-MAC</h4><p>基于DES的消息认证码:CFB-MAC</p><img loading="lazy" src="/posts/d83c07b3/2020-08-13-16-20-25.png" width height="250"><h3 id="OMAC"><a href="#OMAC" class="headerlink" title="OMAC"></a>OMAC</h3><ul><li>One-Key MAC </li><li>单钥MAC（OMAC）是一个由块状密码构建的消息认证码，很像CBC-MAC算法</li><li>CMAC是OMAC1</li></ul><h4 id="CMAC"><a href="#CMAC" class="headerlink" title="CMAC"></a>CMAC</h4><ul><li>daa改进</li><li>3des和aes都能用</li></ul><img loading="lazy" src="/posts/d83c07b3/11.png" width="500"><ul><li>MSBs(X)是取位串X最左边的s位</li><li>L = E(K , $0^n$)</li><li>K1 = L • x</li><li>K2 = L • $x^2$ = (L • x) • x</li><li>乘法（•）在域GF($2^n$)内进行</li></ul><h3 id="CCM"><a href="#CCM" class="headerlink" title="CCM"></a>CCM</h3><ul><li> counter with CBC-MAC</li></ul><img loading="lazy" src="/posts/d83c07b3/12.png" width="550"><h3 id="GCM"><a href="#GCM" class="headerlink" title="GCM"></a>GCM</h3><p>运用了两个函数<br>Galois/Counter Mode (GCM)</p><ul><li>GHASH – a keyed hash function</li><li>GCTR –  CTR mode with incremented counter</li></ul><img loading="lazy" src="/posts/d83c07b3/13.png" width="550"><img loading="lazy" src="/posts/d83c07b3/14.png" width="500"><img loading="lazy" src="/posts/d83c07b3/15.png" width="500"><h3 id="CCM-vs-GCM"><a href="#CCM-vs-GCM" class="headerlink" title="CCM vs GCM"></a>CCM vs GCM</h3><ul><li>CCM: Message authentication (via CBC-MAC) is done on the plaintext not the ciphertext. (This is generally not a desireable feature.) </li><li>GCM: Message authentication (via GMAC/GHASH) is done on the ciphertext.</li><li>对于大多数需要验证加密的应用来说，<strong>GCM应该被认为比CCM更有优势</strong>。由于发生了认证，GCM不容易受到比特翻转和其他攻击的影响，而这些攻击可以针对计数器模式或其他流模式</li></ul><h2 id="MAC-vs-HASH-VS-Digital-signature"><a href="#MAC-vs-HASH-VS-Digital-signature" class="headerlink" title="MAC vs HASH VS Digital signature"></a>MAC vs HASH VS Digital signature</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cryptographic primitive | Hash |    MAC    | Digital</span><br><span class="line">Security Goal           |      |           | signature</span><br><span class="line">------------------------+------+-----------+-------------</span><br><span class="line">Integrity               |  Yes |    Yes    |   Yes</span><br><span class="line">Authentication          |  No  |    Yes    |   Yes</span><br><span class="line">Non-repudiation         |  No  |    No     |   Yes</span><br><span class="line">------------------------+------+-----------+-------------</span><br><span class="line">Kind of keys            | none | symmetric | asymmetric</span><br><span class="line">                        |      |    keys   |    keys</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Cryptography/">Cryptography</category>
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/d83c07b3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码学备忘录-前置知识</title>
      <link>https://hejueyun.github.io/posts/af185d1f/</link>
      <guid>https://hejueyun.github.io/posts/af185d1f/</guid>
      <pubDate>Wed, 19 Jan 2022 23:05:49 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;sec-cyber-vs-infovcs-net&quot;&gt;&lt;a href=&quot;#sec-cyber-vs-infovcs-net&quot; class=&quot;headerlink&quot; title=&quot;sec: cyber vs infovcs net&quot;&gt;&lt;/a&gt;sec: cyber vs infovcs net&lt;/h2&gt;&lt;p&gt;cyber &amp;gt;= info + net&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;info: info c.i.a&lt;ul&gt;
&lt;li&gt;confidentiality&lt;/li&gt;
&lt;li&gt;Integrity&lt;ul&gt;
&lt;li&gt;Auth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Availablity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;攻击的主要形式&quot;&gt;&lt;a href=&quot;#攻击的主要形式&quot; class=&quot;headerlink&quot; title=&quot;攻击的主要形式&quot;&gt;&lt;/a&gt;攻击的主要形式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;拦截Interception&lt;ul&gt;
&lt;li&gt;中断(Interruption)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传递大量”废纸”&lt;ul&gt;
&lt;li&gt;拒绝服务攻击Dos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偷看&lt;ul&gt;
&lt;li&gt;窃听 Eavesdropping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;篡改/删节Tampering&lt;/li&gt;
&lt;li&gt;伪装/冒充身份 Masquerade&lt;/li&gt;
&lt;li&gt;复印后再次传递&lt;ul&gt;
&lt;li&gt;重放 Replay&lt;ul&gt;
&lt;li&gt;攻击信息实时性/真实性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否认发送/接收 deny&lt;/li&gt;
&lt;li&gt;阻断访问式攻击denial-of-access attack&lt;ul&gt;
&lt;li&gt;勒索软件 ransomware (e.g. &lt;strong&gt;WannaCry&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Active-and-passive-attacks&quot;&gt;&lt;a href=&quot;#Active-and-passive-attacks&quot; class=&quot;headerlink&quot; title=&quot;Active and passive attacks&quot;&gt;&lt;/a&gt;Active and passive attacks&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sr. No.&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Active Attack&lt;/th&gt;
&lt;th&gt;Passive Attack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Modification&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;In Active Attack, information is modified.&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;In Passive Attack, information remain unchanged.&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Dangerous For&lt;/td&gt;
&lt;td&gt;Active Attack is dangerous for Integrity as well as Availability.&lt;/td&gt;
&lt;td&gt;Passive Attack is dangerous for Confidentiality.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Attention&lt;/td&gt;
&lt;td&gt;Attention is to be paid on detection.&lt;/td&gt;
&lt;td&gt;Attention is to be paid on prevention.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Impact on System&lt;/td&gt;
&lt;td&gt;In Active Attack, system is damaged.&lt;/td&gt;
&lt;td&gt;In Passive Attack, system has no impact.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Victim&lt;/td&gt;
&lt;td&gt;Victim gets informed in active attack.&lt;/td&gt;
&lt;td&gt;Victim does not get informed in passive attack.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;System Resources&lt;/td&gt;
&lt;td&gt;System Resources can be changed in active attack.&lt;/td&gt;
&lt;td&gt;System Resources are not changed in passive attack.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Property&lt;/td&gt;
&lt;td&gt;integrity &amp;amp;&amp;amp; availability&lt;/td&gt;
&lt;td&gt;confidentiality&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;被动攻击&lt;blockquote&gt;
&lt;p&gt;在未经用户同意和认可的情况下，将信息或数据文件泄露给系统攻击者，&lt;strong&gt;但不对数据信息做任何修改&lt;/strong&gt;。威胁信息&lt;strong&gt;机密性&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;主动攻击&lt;blockquote&gt;
&lt;p&gt;旨在篡改系统信息、改变系统状态等，威胁信息的&lt;strong&gt;可用性和真实性&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Security-Services&quot;&gt;&lt;a href=&quot;#Security-Services&quot; class=&quot;headerlink&quot; title=&quot;Security Services&quot;&gt;&lt;/a&gt;Security Services&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="sec-cyber-vs-infovcs-net"><a href="#sec-cyber-vs-infovcs-net" class="headerlink" title="sec: cyber vs infovcs net"></a>sec: cyber vs infovcs net</h2><p>cyber &gt;= info + net</p><ul><li>info: info c.i.a<ul><li>confidentiality</li><li>Integrity<ul><li>Auth</li></ul></li><li>Availablity</li></ul></li></ul><h2 id="攻击的主要形式"><a href="#攻击的主要形式" class="headerlink" title="攻击的主要形式"></a>攻击的主要形式</h2><ul><li>拦截Interception<ul><li>中断(Interruption)</li></ul></li><li>传递大量”废纸”<ul><li>拒绝服务攻击Dos</li></ul></li><li>偷看<ul><li>窃听 Eavesdropping</li></ul></li><li>篡改/删节Tampering</li><li>伪装/冒充身份 Masquerade</li><li>复印后再次传递<ul><li>重放 Replay<ul><li>攻击信息实时性/真实性</li></ul></li></ul></li><li>否认发送/接收 deny</li><li>阻断访问式攻击denial-of-access attack<ul><li>勒索软件 ransomware (e.g. <strong>WannaCry</strong>)</li></ul></li></ul><hr><h3 id="Active-and-passive-attacks"><a href="#Active-and-passive-attacks" class="headerlink" title="Active and passive attacks"></a>Active and passive attacks</h3><table><thead><tr><th>Sr. No.</th><th>Key</th><th>Active Attack</th><th>Passive Attack</th></tr></thead><tbody><tr><td>1</td><td>Modification</td><td><strong>In Active Attack, information is modified.</strong></td><td><strong>In Passive Attack, information remain unchanged.</strong></td></tr><tr><td>2</td><td>Dangerous For</td><td>Active Attack is dangerous for Integrity as well as Availability.</td><td>Passive Attack is dangerous for Confidentiality.</td></tr><tr><td>3</td><td>Attention</td><td>Attention is to be paid on detection.</td><td>Attention is to be paid on prevention.</td></tr><tr><td>4</td><td>Impact on System</td><td>In Active Attack, system is damaged.</td><td>In Passive Attack, system has no impact.</td></tr><tr><td>5</td><td>Victim</td><td>Victim gets informed in active attack.</td><td>Victim does not get informed in passive attack.</td></tr><tr><td>6</td><td>System Resources</td><td>System Resources can be changed in active attack.</td><td>System Resources are not changed in passive attack.</td></tr><tr><td>7</td><td>Property</td><td>integrity &amp;&amp; availability</td><td>confidentiality</td></tr></tbody></table><ul><li>被动攻击<blockquote><p>在未经用户同意和认可的情况下，将信息或数据文件泄露给系统攻击者，<strong>但不对数据信息做任何修改</strong>。威胁信息<strong>机密性</strong>。</p></blockquote></li><li>主动攻击<blockquote><p>旨在篡改系统信息、改变系统状态等，威胁信息的<strong>可用性和真实性</strong>。</p></blockquote></li></ul><h3 id="Security-Services"><a href="#Security-Services" class="headerlink" title="Security Services"></a>Security Services</h3><ol><li>Authentication</li><li>Access Control</li><li>Data Confidentiality</li><li>Data Integrity</li><li>Nonrepudiation</li><li>Available Service</li></ol><h2 id="信安基本属性"><a href="#信安基本属性" class="headerlink" title="信安基本属性"></a>信安基本属性</h2><img loading="lazy" src="/posts/af185d1f/2020-08-06-15-54-55.png" width height="250"><ul><li>机密性(<strong>Confidentiality</strong>)<ul><li>通过<strong>访问控制</strong>阻止非授权用户获得机密信息</li><li>通过<strong>加密变换</strong>阻止非授权用户获知信息内容</li></ul></li><li>完整性(<strong>Integrity</strong>)<ul><li>完整性是指信息未经授权不能进行篡改的特征，维护信息的一致性</li><li>通过<strong>访问控制</strong>阻止篡改行为</li><li>通过<strong>消息摘要算法</strong>检验信息是否被篡改</li></ul></li><li>可用性(<strong>Availablity</strong>)</li><li>认证性(<strong>Authentication</strong>)<ul><li>确保一个消息的来源或消息本身被正确地标识，同时确保该标识没有被伪造</li><li>认证分为<strong>消息认证</strong>和<strong>实体认证</strong></li></ul></li><li>不可否认性(Non-Repudiation)<ul><li>不可否认性是指能保障用户无法在事后否认曾经对信息进行的生成、签发、接收等行为</li><li>通过<strong>数字签名</strong>提供抗否认服务</li></ul></li></ul><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">• plaintext - oriigiinall message</span><br><span class="line">• ciphertext - coded message</span><br><span class="line">• cipher 密码算法- allgoritthm for transfformiing pllaiinttextt tto ciipherttextt</span><br><span class="line">• key - inffo used in ciipher known onlly to sender//receiiver</span><br><span class="line">• encipher (encrypt) - converttiing pllaiinttextt tto ciipherttextt</span><br><span class="line">• decipher (decrypt) - recoveriing ciipherttextt ffrom pllaiinttextt</span><br><span class="line">• cryptography - study off encryption principles//methods</span><br><span class="line">• cryptanalysis (codebreaking) 密码分析(破译)- sttudy off priinciiplles//</span><br><span class="line">metthods off deciipheriing ciipherttextt wiithout knowiing key</span><br><span class="line">• cryptology - ffiielld off botth crypttography and crypttanallysiis</span><br></pre></td></tr></table></figure><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><img loading="lazy" src="/posts/af185d1f/2020-08-06-16-38-17.png" width height="250"><ul><li>图片有误</li></ul><h3 id="绝对安全-vs-相对安全"><a href="#绝对安全-vs-相对安全" class="headerlink" title="绝对安全 vs 相对安全"></a>绝对安全 vs 相对安全</h3><ul><li>unconditional security<ul><li>管有多少计算能力或时间可以使用都无法破解密码</li></ul></li><li>computational security<ul><li>考虑到有限的计算资源，一定时间内无法被破译</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Cryptography/">Cryptography</category>
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/af185d1f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码学备忘录-伪随机数</title>
      <link>https://hejueyun.github.io/posts/f6b1e424/</link>
      <guid>https://hejueyun.github.io/posts/f6b1e424/</guid>
      <pubDate>Wed, 19 Jan 2022 19:13:56 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;pseudorandom-number-generation&quot;&gt;&lt;a href=&quot;#pseudorandom-number-generation&quot; class=&quot;headerlink&quot; title=&quot;pseudorandom number generation&quot;&gt;&lt;/a&gt;pseudorandom number generation&lt;/h2&gt;&lt;h3 id=&quot;随机数的作用&quot;&gt;&lt;a href=&quot;#随机数的作用&quot; class=&quot;headerlink&quot; title=&quot;随机数的作用&quot;&gt;&lt;/a&gt;随机数的作用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;防止重放攻击&lt;/li&gt;
&lt;li&gt;keystream for a one-time pad（一次性密码的密钥流）&lt;/li&gt;
&lt;li&gt;public key generation 生成公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;伪随机数和随机数区别&quot;&gt;&lt;a href=&quot;#伪随机数和随机数区别&quot; class=&quot;headerlink&quot; title=&quot;伪随机数和随机数区别&quot;&gt;&lt;/a&gt;伪随机数和随机数区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;deterministic algorithm&lt;/li&gt;
&lt;li&gt;seed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;种类&quot;&gt;&lt;a href=&quot;#种类&quot; class=&quot;headerlink&quot; title=&quot;种类&quot;&gt;&lt;/a&gt;种类&lt;/h3&gt;&lt;h4 id=&quot;1-Linear-Congruential-Generator-线性同余生成器&quot;&gt;&lt;a href=&quot;#1-Linear-Congruential-Generator-线性同余生成器&quot; class=&quot;headerlink&quot; title=&quot;1. Linear Congruential Generator 线性同余生成器&quot;&gt;&lt;/a&gt;1. Linear Congruential Generator 线性同余生成器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;$x_{n+1}=(aX_n+c)\bmod{m}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在周期&lt;/li&gt;
&lt;li&gt;32bit计算&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="pseudorandom-number-generation"><a href="#pseudorandom-number-generation" class="headerlink" title="pseudorandom number generation"></a>pseudorandom number generation</h2><h3 id="随机数的作用"><a href="#随机数的作用" class="headerlink" title="随机数的作用"></a>随机数的作用</h3><ul><li>防止重放攻击</li><li>keystream for a one-time pad（一次性密码的密钥流）</li><li>public key generation 生成公钥</li></ul><h3 id="伪随机数和随机数区别"><a href="#伪随机数和随机数区别" class="headerlink" title="伪随机数和随机数区别"></a>伪随机数和随机数区别</h3><ul><li>deterministic algorithm</li><li>seed</li></ul><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><h4 id="1-Linear-Congruential-Generator-线性同余生成器"><a href="#1-Linear-Congruential-Generator-线性同余生成器" class="headerlink" title="1. Linear Congruential Generator 线性同余生成器"></a>1. Linear Congruential Generator 线性同余生成器</h4><ul><li>$x_{n+1}=(aX_n+c)\bmod{m}$</li></ul><p>特点</p><ul><li>存在周期</li><li>32bit计算</li></ul><h4 id="2-Blum-Blum-Shub-B-B-S-算法"><a href="#2-Blum-Blum-Shub-B-B-S-算法" class="headerlink" title="2. Blum Blum Shub (B.B.S.) 算法"></a>2. Blum Blum Shub (B.B.S.) 算法</h4><ul><li>$x_0=seed^2\bmod{n}$</li><li>$LOOP x_i == x_{i-i}^2\bmod{n}$</li><li>$b_i=x_i\bmod{2}$<ul><li>p,q is prime</li><li>p,q mod 3 == 4</li></ul></li></ul><p>特点</p><ul><li>based on public key algorithms</li><li>安全性基于分解n的困难性(同rsa)</li></ul><h4 id="3-Using-Block-Ciphers-as-PRNG-运用分组（对称）加密算法作为生成器"><a href="#3-Using-Block-Ciphers-as-PRNG-运用分组（对称）加密算法作为生成器" class="headerlink" title="3. Using Block Ciphers as PRNG 运用分组（对称）加密算法作为生成器"></a>3. Using Block Ciphers as PRNG 运用分组（对称）加密算法作为生成器</h4><ul><li>CRT</li><li>OFB</li><li>CBC-MAC</li></ul><p><strong>e.g. ANSI X9.17 PRGN</strong></p><ul><li>date and time(DTi)</li><li>uses 2-key (K1,K2) triple DES</li><li>feeds back between rounds (Vi)</li></ul><img loading="lazy" src="/posts/f6b1e424/1.png" width="500"><h4 id="4-运用非对称加密算法作为生成器"><a href="#4-运用非对称加密算法作为生成器" class="headerlink" title="4. 运用非对称加密算法作为生成器"></a>4. 运用非对称加密算法作为生成器</h4><ul><li>总体上慢，因此只应用于生成短伪随机数</li><li>PRNG based on RSA</li></ul><img loading="lazy" src="/posts/f6b1e424/5.png" width="500"><ul><li>PRNG based on ECC</li></ul><h4 id="5-运用哈希和MAC"><a href="#5-运用哈希和MAC" class="headerlink" title="5. 运用哈希和MAC"></a>5. 运用哈希和MAC</h4><ul><li>PRNG using a Hash Function</li></ul><img loading="lazy" src="/posts/f6b1e424/6.png" width="500"><ul><li>PRNG using a MAC</li></ul><img loading="lazy" src="/posts/f6b1e424/7.png" width="500"><h2 id="Stream-Ciphers"><a href="#Stream-Ciphers" class="headerlink" title="Stream Ciphers"></a>Stream Ciphers</h2><ul><li>是一种对称加密算法<ul><li>加密和解密双方使用相同伪随机加密数据流（pseudo-random stream）作为密钥</li></ul></li><li>该算法解决了对称加密完善保密性（<strong>perfect secrecy</strong>）的实际操作困难<ul><li>具有该性质的密文不应该透露任何明文的信息</li><li><strong>完善保密性要求密钥长度不短于明文长度</strong>，故而实际操作存在困难，改由较短数据流通过特定算法得到密钥流</li></ul></li></ul><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>一种严重的错误即反复使用同一密码本对不同明文进行加密。攻击者可利用这种方式对密文进行解密。用p表示明文，C表示密文，k表示种子，PRG表示密钥流生成算法，则：</p><ul><li>C1 = p1 xor PRG (k)</li><li>C2 = p2 xor PRG (k)<br>攻击者监听到此段消息（包含两段相同密钥流加密的密文）后，即可利用：</li><li>C1 xor C2得到p1 xor p2<br>足量的冗余（此处表示p1，p2）则可破解明文。 </li></ul><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><img loading="lazy" src="/posts/f6b1e424/2.jpg" width="550"><ul><li>Key-scheduling algorithm (KSA)<ul><li>临时向量 T</li><li>状态向量 S</li><li>初始密钥 K<ul><li>注意和最终生成的密钥流t区别开</li></ul></li></ul></li></ul><img loading="lazy" src="/posts/f6b1e424/3.png" width="450"><ul><li>RC4 Encryption </li></ul><img loading="lazy" src="/posts/f6b1e424/4.png" width="450"><ul><li>注意直到最后一步$C_i$之前，都只是在生成伪随机序列(<strong>密钥流</strong>)<ul><li>S的每个元素每256次迭代至少与另一个元素互换一次</li><li>PRGA(Pseudo-random generation algorithm)</li></ul></li><li>最后一步异或才算是C=M+K</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>result is very non-linear</li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>these days, RC4 is known to be biased (unequal numbers of 0s and 1s in the keystream)</li><li>永远不应该重复使用密码本</li></ul><h2 id="true-random-numbers"><a href="#true-random-numbers" class="headerlink" title="true random numbers"></a>true random numbers</h2><ul><li>best source is natural randomness in real world 最好的来源是现实世界中的自然随机性</li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Cryptography/">Cryptography</category>
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/f6b1e424/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>密码学备忘录-复习总纲</title>
      <link>https://hejueyun.github.io/posts/8b9f706b/</link>
      <guid>https://hejueyun.github.io/posts/8b9f706b/</guid>
      <pubDate>Wed, 12 Jan 2022 19:00:15 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;mode-of-operation&quot;&gt;&lt;a href=&quot;#mode-of-operation&quot; class=&quot;headerlink&quot; title=&quot;mode of operation&quot;&gt;&lt;/a&gt;mode of operation&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Workflow&lt;/th&gt;
&lt;th&gt;Advantages&lt;/th&gt;
&lt;th&gt;Limitations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ECB&lt;/td&gt;
&lt;td&gt;Electronic Codebook&lt;/td&gt;
&lt;td&gt;电码本&lt;/td&gt;
&lt;td&gt;$C_i=E_k(M_i)$&lt;/td&gt;
&lt;td&gt;简单、主要用于少量分组的传输。&lt;strong&gt;没有明密文错误传播&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;当明文分组重复时，密文也重复，易实现&lt;strong&gt;统计分析&lt;/strong&gt;攻击&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td&gt;Cipher block chaining&lt;/td&gt;
&lt;td&gt;密文分组链接&lt;/td&gt;
&lt;td&gt;$C_i=E_k(M_i \bigoplus{C_{i-1}})$&lt;br&gt; $C_0=IV$&lt;/td&gt;
&lt;td&gt;CBC没有明文错误传播，密文错误传播小&lt;/td&gt;
&lt;td&gt;需要初始化和保护IV（原因），前面的分组会对后面的产生影响&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CFB&lt;/td&gt;
&lt;td&gt;Ciphertext feedback&lt;/td&gt;
&lt;td&gt;密文反馈&lt;/td&gt;
&lt;td&gt;$C_i=M_i \bigoplus{E_k(C_{i-1}})$&lt;br&gt; $C_0=IV$&lt;/td&gt;
&lt;td&gt;可作为随机数生成器&lt;/td&gt;
&lt;td&gt;在错误发生后，错误会在几个区块内传播（但不是无限期地传播）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OFB&lt;/td&gt;
&lt;td&gt;Output feedback&lt;/td&gt;
&lt;td&gt;输出反馈&lt;/td&gt;
&lt;td&gt;$O_i=E_k(O_{i-1})$&lt;br&gt; $C_i=M_i\bigoplus O_{i-1}$&lt;br&gt; $O_0=IV$&lt;/td&gt;
&lt;td&gt;可作为随机数生成器，密文1bit错误只会导致对应的1bit出错&lt;/td&gt;
&lt;td&gt;接收者和发送者必须保持同步&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CTR&lt;/td&gt;
&lt;td&gt;Galois/Counter&lt;/td&gt;
&lt;td&gt;计数器&lt;/td&gt;
&lt;td&gt;$O_i=E_k(i)$&lt;br&gt; $C_i=M_i\bigoplus O_{i-1}$&lt;/td&gt;
&lt;td&gt;速度快&lt;/td&gt;
&lt;td&gt;对每一分组必须用不同的$K$和计数$i$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES-XTS&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;$T$ is tweak, $H$ is a hash function&lt;br&gt; $C=H(T)\bigoplus{E(K,H(T)\bigoplus{M})}$&lt;/td&gt;
&lt;td&gt;高效&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;Symmetric-Algorithm&quot;&gt;&lt;a href=&quot;#Symmetric-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Symmetric Algorithm&quot;&gt;&lt;/a&gt;Symmetric Algorithm&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;DES&lt;/th&gt;
&lt;th&gt;AES&lt;/th&gt;
&lt;th&gt;3DES&lt;/th&gt;
&lt;th&gt;RC4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Basic&lt;/td&gt;
&lt;td&gt;In DES the data block is divided into &lt;strong&gt;two halves&lt;/strong&gt;.&lt;/td&gt;
&lt;td&gt;In AES the entire data block is processed &lt;strong&gt;as a single matrix&lt;/strong&gt;.&lt;/td&gt;
&lt;td&gt;EEE/EDE&lt;/td&gt;
&lt;td&gt;RC4生成一个伪随机的比特流（一个密钥流）。这些比特流可以通过与明文比特&lt;strong&gt;异或&lt;/strong&gt;来进行加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Principle&lt;/td&gt;
&lt;td&gt;DES work on &lt;strong&gt;Feistel&lt;/strong&gt; Cipher structure.&lt;/td&gt;
&lt;td&gt;AES works on &lt;strong&gt;Substitution and Permutation&lt;/strong&gt; Principle.&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;PRNG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Plaintext&lt;/td&gt;
&lt;td&gt;明文按64位进行分组，以&lt;strong&gt;比特&lt;/strong&gt;为单位&lt;/td&gt;
&lt;td&gt;Plaintext can be of 128,192, or 256，以&lt;strong&gt;字节&lt;/strong&gt;为单位 bits&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;以&lt;strong&gt;字节&lt;/strong&gt;为单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key size&lt;/td&gt;
&lt;td&gt;密钥长64位，有效密钥长度56（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1&lt;/td&gt;
&lt;td&gt;密钥长度则可以是128，192或256比特&lt;/td&gt;
&lt;td&gt;EEE的有效密钥长度为&lt;strong&gt;168&lt;/strong&gt;位（56x3），但由于中途相遇攻击，它的有效安全性仅为112位&lt;/td&gt;
&lt;td&gt;40–2048 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rounds&lt;/td&gt;
&lt;td&gt;16 rounds&lt;/td&gt;
&lt;td&gt;10 rounds for 128-bit algo&lt;br&gt;&lt;br&gt;12 rounds for 192-bit algo&lt;br&gt;&lt;br&gt;14 rounds for 256-bit algo&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rounds Names&lt;/td&gt;
&lt;td&gt;Expansion Permutation, Xor, S-box, P-box, Xor and Swap.&lt;/td&gt;
&lt;td&gt;Subbytes, Shiftrows, Mix columns, Addroundkeys.&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;KSA(s-box)/Encryption(PRNG)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Security&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;1.&lt;/code&gt;&lt;/strong&gt; S盒提供了DES的核心安全性—如果没有S盒，密码会是线性的，很容易破解 &lt;strong&gt;&lt;code&gt;2.&lt;/code&gt;&lt;/strong&gt; S盒，P置换和E扩张各自满足了混淆扩散原则 &lt;code&gt;3.&lt;/code&gt; Avalanche Effect &lt;code&gt;4.&lt;/code&gt; Timing Attacks &amp;amp;&amp;amp; Cryptanalysis&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.&lt;/code&gt; SubBytes提供了非线性代换保证安全性&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;RC4安全性主要取决于于初始密钥的保密性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speed&lt;/td&gt;
&lt;td&gt;DES is comparatively slower.&lt;/td&gt;
&lt;td&gt;AES is faster.&lt;/td&gt;
&lt;td&gt;慢中慢&lt;/td&gt;
&lt;td&gt;7 cycles per byte on original Pentium&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;DES&quot;&gt;&lt;a href=&quot;#DES&quot; class=&quot;headerlink&quot; title=&quot;DES&quot;&gt;&lt;/a&gt;DES&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Steps&lt;/th&gt;
&lt;th&gt;Changes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Expansion Permutation&lt;/td&gt;
&lt;td&gt;$R_i$ is expanded by using the expansion permutation,&lt;/td&gt;
&lt;td&gt;32-&amp;gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key mixing&lt;/td&gt;
&lt;td&gt;$R_i=R_i\bigoplus{Subkey_i}$&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S-box Substitution&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.&lt;/code&gt;$R_i$is divided into eight &lt;strong&gt;6-bit pieces&lt;/strong&gt; before processing by the S-boxes &lt;code&gt;2.&lt;/code&gt;8个S-boxes中的每一个都根据一个非线性转换，&lt;strong&gt;以查找表的形式&lt;/strong&gt;，将其6个输入位替换为4个输出位&lt;/td&gt;
&lt;td&gt;48-&amp;gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P-box Permutation&lt;/td&gt;
&lt;td&gt;根据&lt;strong&gt;映射规则表&lt;/strong&gt;，把输入的每位映射到新的输出位&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XOR and Swap&lt;/td&gt;
&lt;td&gt;$R_{i+1}=L_i\bigoplus{R_{i}}$&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key schedule&lt;/td&gt;
&lt;td&gt;PC1\PC2（permutation chosen）&lt;/td&gt;
&lt;td&gt;64-&amp;gt;56-&amp;gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;AES&quot;&gt;&lt;a href=&quot;#AES&quot; class=&quot;headerlink&quot; title=&quot;AES&quot;&gt;&lt;/a&gt;AES&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Steps&lt;/th&gt;
&lt;th&gt;length&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SubBytes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;矩阵中各字节被固定的8位查找表中对应的特定字节所替换，输入的高4-bit对应的值作为行标，低4-bit对应的值作为列标，$S(b_{i,j})=S(a_{i,j})$&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ShiftRows&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;矩阵中每一列的各个字节循环向左方位移，且位移量则随着列数递增而递增（第一行保持不变，第二行循环左移8比特，第三行循环左移16比特，第四行循环左移24比特）&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MixColumns&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;linear transformation 矩阵乘法&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AddRoundKey&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$b_{i,j}=K_{i,j}\bigoplus{a_{i,j}}$&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key expansion&lt;/td&gt;
&lt;td&gt;若j%4=0,则w[j]=w[j-4]⊕g(w[j-1]),否则w[j]=w[j-4]⊕w[j-1]&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;Assymetric-Algorithm&quot;&gt;&lt;a href=&quot;#Assymetric-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Assymetric Algorithm&quot;&gt;&lt;/a&gt;Assymetric Algorithm&lt;/h2&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/8b9f706b/3.png&quot; width=&quot;600&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="mode-of-operation"><a href="#mode-of-operation" class="headerlink" title="mode of operation"></a>mode of operation</h2><table><thead><tr><th></th><th></th><th></th><th>Workflow</th><th>Advantages</th><th>Limitations</th></tr></thead><tbody><tr><td>ECB</td><td>Electronic Codebook</td><td>电码本</td><td>$C_i=E_k(M_i)$</td><td>简单、主要用于少量分组的传输。<strong>没有明密文错误传播</strong></td><td>当明文分组重复时，密文也重复，易实现<strong>统计分析</strong>攻击</td></tr><tr><td>CBC</td><td>Cipher block chaining</td><td>密文分组链接</td><td>$C_i=E_k(M_i \bigoplus{C_{i-1}})$<br> $C_0=IV$</td><td>CBC没有明文错误传播，密文错误传播小</td><td>需要初始化和保护IV（原因），前面的分组会对后面的产生影响</td></tr><tr><td>CFB</td><td>Ciphertext feedback</td><td>密文反馈</td><td>$C_i=M_i \bigoplus{E_k(C_{i-1}})$<br> $C_0=IV$</td><td>可作为随机数生成器</td><td>在错误发生后，错误会在几个区块内传播（但不是无限期地传播）。</td></tr><tr><td>OFB</td><td>Output feedback</td><td>输出反馈</td><td>$O_i=E_k(O_{i-1})$<br> $C_i=M_i\bigoplus O_{i-1}$<br> $O_0=IV$</td><td>可作为随机数生成器，密文1bit错误只会导致对应的1bit出错</td><td>接收者和发送者必须保持同步</td></tr><tr><td>CTR</td><td>Galois/Counter</td><td>计数器</td><td>$O_i=E_k(i)$<br> $C_i=M_i\bigoplus O_{i-1}$</td><td>速度快</td><td>对每一分组必须用不同的$K$和计数$i$</td></tr><tr><td>AES-XTS</td><td>-</td><td>-</td><td>$T$ is tweak, $H$ is a hash function<br> $C=H(T)\bigoplus{E(K,H(T)\bigoplus{M})}$</td><td>高效</td><td></td></tr></tbody></table><h2 id="Symmetric-Algorithm"><a href="#Symmetric-Algorithm" class="headerlink" title="Symmetric Algorithm"></a>Symmetric Algorithm</h2><table><thead><tr><th></th><th>DES</th><th>AES</th><th>3DES</th><th>RC4</th></tr></thead><tbody><tr><td>Basic</td><td>In DES the data block is divided into <strong>two halves</strong>.</td><td>In AES the entire data block is processed <strong>as a single matrix</strong>.</td><td>EEE/EDE</td><td>RC4生成一个伪随机的比特流（一个密钥流）。这些比特流可以通过与明文比特<strong>异或</strong>来进行加密</td></tr><tr><td>Principle</td><td>DES work on <strong>Feistel</strong> Cipher structure.</td><td>AES works on <strong>Substitution and Permutation</strong> Principle.</td><td>-</td><td>PRNG</td></tr><tr><td>Plaintext</td><td>明文按64位进行分组，以<strong>比特</strong>为单位</td><td>Plaintext can be of 128,192, or 256，以<strong>字节</strong>为单位 bits</td><td>-</td><td>以<strong>字节</strong>为单位</td></tr><tr><td>Key size</td><td>密钥长64位，有效密钥长度56（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1</td><td>密钥长度则可以是128，192或256比特</td><td>EEE的有效密钥长度为<strong>168</strong>位（56x3），但由于中途相遇攻击，它的有效安全性仅为112位</td><td>40–2048 bits</td></tr><tr><td>Rounds</td><td>16 rounds</td><td>10 rounds for 128-bit algo<br><br>12 rounds for 192-bit algo<br><br>14 rounds for 256-bit algo</td><td>-</td><td>1</td></tr><tr><td>Rounds Names</td><td>Expansion Permutation, Xor, S-box, P-box, Xor and Swap.</td><td>Subbytes, Shiftrows, Mix columns, Addroundkeys.</td><td>-</td><td>KSA(s-box)/Encryption(PRNG)</td></tr><tr><td>Security</td><td><strong><code>1.</code></strong> S盒提供了DES的核心安全性—如果没有S盒，密码会是线性的，很容易破解 <strong><code>2.</code></strong> S盒，P置换和E扩张各自满足了混淆扩散原则 <code>3.</code> Avalanche Effect <code>4.</code> Timing Attacks &amp;&amp; Cryptanalysis</td><td><code>1.</code> SubBytes提供了非线性代换保证安全性</td><td>-</td><td>RC4安全性主要取决于于初始密钥的保密性</td></tr><tr><td>Speed</td><td>DES is comparatively slower.</td><td>AES is faster.</td><td>慢中慢</td><td>7 cycles per byte on original Pentium</td></tr></tbody></table><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><table><thead><tr><th></th><th>Steps</th><th>Changes</th></tr></thead><tbody><tr><td>Expansion Permutation</td><td>$R_i$ is expanded by using the expansion permutation,</td><td>32-&gt;48</td></tr><tr><td>Key mixing</td><td>$R_i=R_i\bigoplus{Subkey_i}$</td><td>48</td></tr><tr><td>S-box Substitution</td><td><code>1.</code>$R_i$is divided into eight <strong>6-bit pieces</strong> before processing by the S-boxes <code>2.</code>8个S-boxes中的每一个都根据一个非线性转换，<strong>以查找表的形式</strong>，将其6个输入位替换为4个输出位</td><td>48-&gt;32</td></tr><tr><td>P-box Permutation</td><td>根据<strong>映射规则表</strong>，把输入的每位映射到新的输出位</td><td>32</td></tr><tr><td>XOR and Swap</td><td>$R_{i+1}=L_i\bigoplus{R_{i}}$</td><td>32</td></tr><tr><td>Key schedule</td><td>PC1\PC2（permutation chosen）</td><td>64-&gt;56-&gt;48</td></tr></tbody></table><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><table><thead><tr><th></th><th>Steps</th><th>length</th></tr></thead><tbody><tr><td><strong>SubBytes</strong></td><td>矩阵中各字节被固定的8位查找表中对应的特定字节所替换，输入的高4-bit对应的值作为行标，低4-bit对应的值作为列标，$S(b_{i,j})=S(a_{i,j})$</td><td>128</td></tr><tr><td><strong>ShiftRows</strong></td><td>矩阵中每一列的各个字节循环向左方位移，且位移量则随着列数递增而递增（第一行保持不变，第二行循环左移8比特，第三行循环左移16比特，第四行循环左移24比特）</td><td>128</td></tr><tr><td><strong>MixColumns</strong></td><td>linear transformation 矩阵乘法</td><td>128</td></tr><tr><td><strong>AddRoundKey</strong></td><td>$b_{i,j}=K_{i,j}\bigoplus{a_{i,j}}$</td><td>128</td></tr><tr><td>Key expansion</td><td>若j%4=0,则w[j]=w[j-4]⊕g(w[j-1]),否则w[j]=w[j-4]⊕w[j-1]</td><td>128</td></tr></tbody></table><h2 id="Assymetric-Algorithm"><a href="#Assymetric-Algorithm" class="headerlink" title="Assymetric Algorithm"></a>Assymetric Algorithm</h2><img loading="lazy" src="/posts/8b9f706b/3.png" width="600"><table><thead><tr><th></th><th>Difficulty</th><th>Pre-share</th><th>Pub Key</th><th>Pri Key</th><th>Encrypt</th><th>Decrypt</th></tr></thead><tbody><tr><td>RSA</td><td>elies on the practical difficulty of factoring the product of two large prime numbers</td><td>-</td><td>{n,e}</td><td>{n,d}</td><td>$C=M^e\bmod{n}$</td><td>$M=C^d\bmod{n}$</td></tr><tr><td>Diffie-Hellman</td><td>the difficulty of a certain problem in G related to computing discrete logarithms(<strong>DLP</strong>).</td><td>公共原根p/公共质数q in GF(p)</td><td>-</td><td>A,B</td><td>y=q^A mod p<br>传递$y_a$/$y_b$</td><td>k=$q^{AB}\bmod{p}$为会话密钥</td></tr><tr><td>ElGamal</td><td>the difficulty of a certain problem in G related to computing discrete logarithms(<strong>DLP</strong>).</td><td>公共原根p/公共质数q in GF(p)</td><td>p,q,$y_a$/$y_b$</td><td>A,B</td><td>$R=q^r$<br>$S=u*Y_b^r$<br>传递(R,S)</td><td>${S}/{R^B}={u*Y_b^r}/{q^{rB}}<br>=u=x$</td></tr><tr><td>ECC</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>ECDH</td><td>-finding the discrete logarithm of a random elliptic curve element with respect to a publicly known base point is infeasible <br> <strong>“elliptic curve discrete logarithm problem” (ECDLP)</strong>,比一般的DLP难</td><td>椭圆的公共参数（Common parameters of the ellipse）</td><td>公钥是点 H，H = dG.<br>$H_A$,$H_B$</td><td>私钥是一个范围在 {1,…,n−1} 中的随机整数 d，其中 n 是子群的阶<br>$d_A$,$d_B$</td><td>传递$H_A$,$H_B$</td><td>$S=d_AH_B$<br>$=d_B(d_AG)$<br>$=d_BH_A$</td></tr><tr><td>EC ElGamal</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h2 id="Key-Exchange-and-Distribution"><a href="#Key-Exchange-and-Distribution" class="headerlink" title="Key Exchange and Distribution"></a>Key Exchange and Distribution</h2><h3 id="Exchange-Asymmetric"><a href="#Exchange-Asymmetric" class="headerlink" title="Exchange(Asymmetric)"></a>Exchange(Asymmetric)</h3><ul><li>dh</li><li>ecdh</li></ul><h3 id="Distribution-Quantum"><a href="#Distribution-Quantum" class="headerlink" title="Distribution(Quantum)"></a>Distribution(Quantum)</h3><ul><li>BB84</li><li>B92</li><li>E91</li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><img loading="lazy" src="/posts/8b9f706b/1.png" width="600"><hr><img loading="lazy" src="/posts/8b9f706b/2.png" width="650"><h3 id="MAC-vs-HASH-VS-Digital-signature"><a href="#MAC-vs-HASH-VS-Digital-signature" class="headerlink" title="MAC vs HASH VS Digital signature"></a>MAC vs HASH VS Digital signature</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cryptographic primitive | Hash |    MAC    | Digital</span><br><span class="line">Security Goal           |      |           | signature</span><br><span class="line">------------------------+------+-----------+-------------</span><br><span class="line">Integrity               |  Yes |    Yes    |   Yes</span><br><span class="line">Authentication          |  No  |    Yes    |   Yes</span><br><span class="line">Non-repudiation         |  No  |    No     |   Yes</span><br><span class="line">------------------------+------+-----------+-------------</span><br><span class="line">Kind of keys            | none | symmetric | asymmetric</span><br><span class="line">                        |      |    keys   |    keys</span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="group-vs-ring-vs-field"><a href="#group-vs-ring-vs-field" class="headerlink" title="group vs ring vs field"></a>group vs ring vs field</h3><img loading="lazy" src="/posts/8b9f706b/4.PNG" width="700">]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Cryptography/">Cryptography</category>
      
      
      <category domain="https://hejueyun.github.io/tags/Note/">Note</category>
      
      
      <comments>https://hejueyun.github.io/posts/8b9f706b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>实验：靶场渗透测试</title>
      <link>https://hejueyun.github.io/posts/d8c3738e/</link>
      <guid>https://hejueyun.github.io/posts/d8c3738e/</guid>
      <pubDate>Sun, 02 Jan 2022 14:06:17 GMT</pubDate>
      
      <description>&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;b837fca8ba0f65d891514e5dd70693f3332395bf01b17d1ed0a5d4608600339a&quot;&gt;&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="b837fca8ba0f65d891514e5dd70693f3332395bf01b17d1ed0a5d4608600339a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Network-Security/">Network Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/d8c3738e/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HTTPS-PKI笔记</title>
      <link>https://hejueyun.github.io/posts/d4e10e6c/</link>
      <guid>https://hejueyun.github.io/posts/d4e10e6c/</guid>
      <pubDate>Wed, 29 Dec 2021 16:43:09 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;机密性：对称加密&lt;/li&gt;
&lt;li&gt;完整型：消息验证码（MAC）&lt;/li&gt;
&lt;li&gt;可用性：数字签名（DSA）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DH密钥协商算法&quot;&gt;&lt;a href=&quot;#DH密钥协商算法&quot; class=&quot;headerlink&quot; title=&quot;DH密钥协商算法&quot;&gt;&lt;/a&gt;DH密钥协商算法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通讯双方任何一方无法独自计算出一个会话密钥，通讯双方各自保留一部分关键信息，再讲另外一部分信息告诉对方，双方有了全部信息才能计算出相同的会话秘钥&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ECC算法和DH结合使用，用于密钥磋商，这个密钥交换算法称为ECDH。交换双方可以在不共享任何秘密的情况下协商出一个密钥&lt;/p&gt;
&lt;p&gt;由于 ECDH 密钥交换协议不验证公钥发送者的身份，因此无法阻止中间人攻击。如果监听者 Mallory 截获了 Alice 的公钥，就可以替换为他自己的公钥，并将其发送给 Bob。Mallory 还可以截获 Bob 的公钥，替换为他自己的公钥，并将其发送给 Alice。这样，Mallory 就可以轻松地对 Alice 与 Bob 之间发送的任何消息进行解密。他可以更改消息，用他自己的密钥对消息重新加密，然后将消息发送给接收者。&lt;/p&gt;
&lt;p&gt;为了解决此问题，Alice 和 Bob 可以在交换公钥之前使用数字签名对公钥进行签名。有两种方法可以实现此目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用安全的媒体（例如语音通信或可信载运商）在双方之间传输数字签名密钥。&lt;/li&gt;
&lt;li&gt;使用公共证书颁发机构 (CA) 向双方提供可信数字签名密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>机密性：对称加密</li><li>完整型：消息验证码（MAC）</li><li>可用性：数字签名（DSA）</li></ul><h3 id="DH密钥协商算法"><a href="#DH密钥协商算法" class="headerlink" title="DH密钥协商算法"></a>DH密钥协商算法</h3><blockquote><p>通讯双方任何一方无法独自计算出一个会话密钥，通讯双方各自保留一部分关键信息，再讲另外一部分信息告诉对方，双方有了全部信息才能计算出相同的会话秘钥</p><hr><p>ECC算法和DH结合使用，用于密钥磋商，这个密钥交换算法称为ECDH。交换双方可以在不共享任何秘密的情况下协商出一个密钥</p><p>由于 ECDH 密钥交换协议不验证公钥发送者的身份，因此无法阻止中间人攻击。如果监听者 Mallory 截获了 Alice 的公钥，就可以替换为他自己的公钥，并将其发送给 Bob。Mallory 还可以截获 Bob 的公钥，替换为他自己的公钥，并将其发送给 Alice。这样，Mallory 就可以轻松地对 Alice 与 Bob 之间发送的任何消息进行解密。他可以更改消息，用他自己的密钥对消息重新加密，然后将消息发送给接收者。</p><p>为了解决此问题，Alice 和 Bob 可以在交换公钥之前使用数字签名对公钥进行签名。有两种方法可以实现此目的：</p><ul><li>用安全的媒体（例如语音通信或可信载运商）在双方之间传输数字签名密钥。</li><li>使用公共证书颁发机构 (CA) 向双方提供可信数字签名密钥。</li></ul></blockquote><span id="more"></span><h3 id="PKI-Public-Key-Infrastructure，公钥基础设施"><a href="#PKI-Public-Key-Infrastructure，公钥基础设施" class="headerlink" title="PKI(Public Key Infrastructure，公钥基础设施)"></a>PKI(Public Key Infrastructure，公钥基础设施)</h3><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><blockquote><p>To enable the validation of, and to give legal meaning to digital signatures.</p><ul><li>To allows mutual authentication using public-key technology.</li><li>Does not dictate the use of a specific public-key cryptographic algorithm, nor does it define a specific hash algorithm</li></ul><p><strong>实现数字签名的验证，并赋予数字签名以法律意义</strong>。</p><ul><li>允许使用公钥技术进行相互认证。</li><li>不规定使用特定的公钥加密算法，也不定义特定的哈希算法。</li></ul></blockquote><p>安全性来源</p><ul><li>法律</li><li>自身私钥安全</li></ul><h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><img loading="lazy" src="/posts/d4e10e6c/2.png" width="500"><ul><li>证书标准规范X.509<ul><li>版本号(Version Number）</li><li>序列号（Serial Number）：由CA维护的为它所发的每个证书分配的一的列号，用来追踪和撤销证书。</li><li>签名算法（Signature Algorithm）</li><li>颁发者（Issuer）</li><li>主体(Subject) : 证书拥有者的标识信息（Distinguished Name），如：<code>&quot;C=CN，ST=Beijing, L=Beijing, CN=person.org.example.com”</code>；<ul><li>域名</li><li>公司信息</li></ul></li><li>主体的公钥信息(SubJect Public Key Info）<ul><li>Issuer Unique Identifier</li><li>主体公钥（Subject Unique Identifier）：公钥的内容</li><li>Ext:<ul><li>公钥算法 (Public Key Algorithm) …</li></ul></li></ul></li><li>CA’s Signature</li></ul></li><li>X.509 <strong>BASE64编码</strong>(PEM格式)，后缀为：.pem .cer .crt<ul><li>PEM：Privacy Enhanced Mail</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">asdasdasdasd</span><br><span class="line">...</span><br><span class="line">asdasdasd</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><ul><li>SSL证书通用名（CN）通配符<blockquote><p>SSL通配符证书是在一个单一的证书中，在通用名（域名）中包含一个“<code>*</code>”通配符字段。这使得该证书可以保护无限数量的多个子域名（主机）。例如，一个通配符证书<code>*</code>. <code>domain.com ，可用于www.domain.com ， mail.domain.com ，pay.domain.com …</code></p></blockquote></li></ul><h4 id="CA-Certificate-Of-Authority-认证中心"><a href="#CA-Certificate-Of-Authority-认证中心" class="headerlink" title="CA(Certificate Of Authority,认证中心)"></a>CA(Certificate Of Authority,认证中心)</h4><blockquote><p>所谓的CA，通俗来说就是担保人，互联网上所有身份的担保人。 <strong>trusted party</strong>.</p><p>比如说Google需要向用户证明自己是Google，那么Google就需要找到一家靠谱的CA，请工作人员核对各项手续和身份证明，然后为Google签发一张数字证书（Certificate）。<strong>在证书上,记载着Google的所有身份信息，和一个CA签下的数字签名（Signature）</strong>。</p><p>而CA的私钥（Private Key），是用来签名的一段二进制数据，通俗来说就是CA手里的那根签字笔。一旦这根签字笔外泄出去，那么攻击者就能够随心所欲地签发任何证书，伪装成Google、微软、中国银行等任何一家公司/机构，直接颠覆整个互联网的信用体系。用户将无法分辨网线对面到底是银行还是黑客，只能任人宰割，这可以说是不亚于“互联网崩溃”级别的大地震。</p></blockquote><p>工作内容：</p><ul><li>CA’s signature provides secure binding of the public key with its rightful owner’s identity.</li></ul><img loading="lazy" src="/posts/d4e10e6c/1.png" width="500"><h4 id="RA"><a href="#RA" class="headerlink" title="RA"></a>RA</h4><blockquote><p>RA扮演的角色相当于是一个防火墙或者说签证官，所有的申请都要先交给RA。审核通过之后，申请才会被上呈到CA手里等待确认。在CA和RA之间，存在一条双向认证的保密信道。只有手握RA私钥的人，才会被当做RA来对待，才有资格向上提交申请。这就保证了CA的通信接口不会直接对外暴露，减少了防守方的工作压力</p></blockquote><h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><blockquote><p>如果不面对公众服务，仅面对小部分的内网服务，那是没问题的，没必要去买证书</p><p>在客户机上安装用于签发证书的CA到可信区域即可</p></blockquote><ul><li>通过openssl生成证书</li></ul><h3 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h3><p>根证书</p><blockquote><p>根证书是CA认证中心给自己颁发的证书,是信任链的起始点。安装根证书意味着对这个CA认证中心的信任</p></blockquote><p>中间证书</p><blockquote><p>证书颁发机构（CA）不会直接从根目录颁发服务器证书（即SSL证书），因为这种行为是存在不安全因素，因为一旦发生错误颁发或者需要撤销root,则使用root签名的每个证书都会被撤销信任。</p><p>因此，为了避免这种风险发生，CA机构一般会引用<strong>中间根</strong>。<strong>CA机构使用其私钥对中间根进行签名，使浏览器信任中间根。然后CA机构使用中间根证书的私钥来签署用户申请的SSL证书</strong>。这种中间根的形式可以重复多次，即使用中间根签署另一个中间件，然后CA机构通过中间件签署SSL证书</p></blockquote><p>证书链(Certificate Chain)</p><blockquote><p>信任锚证书CA 环节可以对中间证书签名；中间证书的所有者可以用自己的私钥对另一个证书签名</p><p>Web 浏览器已预先配置了一组浏览器自动信任的根 CA 证书。来自其他证书授权机构的所有证书都必须附带证书链，以检验这些证书的有效性</p><hr><p>Starting from the top: Root CA issues certificates to sub CAs, which issues certificates to sub-sub CAs, and …., finally down to the end users. This sequence of certificates forms a Chain of Trust or Certificate Chain. 本质上就是不停的发证书</p></blockquote><ul><li>Alice’s Certificate Chain</li></ul><img loading="lazy" src="/posts/d4e10e6c/1.png" width="500"><p>查看浏览器受“信任的根证书颁发机构”列表</p><img loading="lazy" src="/posts/d4e10e6c/2020-09-13-16-15-59.png" width="500"><h3 id="撤销（Revocation）"><a href="#撤销（Revocation）" class="headerlink" title="撤销（Revocation）"></a>撤销（Revocation）</h3><p>原因</p><ul><li>The user’s private key is believed to have been compromised（泄露）.</li><li>The CA’s private key is believed to have been compromised.</li><li>The user should no longer be certified by this CA.</li><li>The user no longer needs this certificate.</li><li>etc</li></ul><p>防止抵赖和否认（protection against repudiation, or false denial）</p><p>证书吊销列表(CRL)</p><blockquote><p>证书吊销列表 (Certificate Revocation List ，简称： CRL) 是 PKI 系统中的一个结构化数据文件，该文件包含了证书颁发机构 (CA) 已经吊销的证书的序列号及其吊销日期。</p><p>CA系统生成CRL以后，<strong>放到LDAP服务器中或Web服务器的合适位置</strong>，供用户查询或下载</p></blockquote><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><img loading="lazy" src="/posts/d4e10e6c/2020-09-13-17-29-48.png" width="500"><ul><li>LDPA：Lightweight Directory Access Protocol（轻量目录访问协议）</li></ul><h4 id="证书申请过程"><a href="#证书申请过程" class="headerlink" title="证书申请过程"></a>证书申请过程</h4><ul><li>用户申请<ul><li>公钥和自己的身份信息 =&gt; 安全服务器</li><li>安全服务器 =&gt; RA</li></ul></li><li>RA审核<ul><li>如果RA同意用户申请证书的请求，则<strong>对证书申请信息做数字签名</strong>；否则拒绝用户的申请</li></ul></li><li>CA发行证书<ul><li>用户申请和RA签名 =&gt; CA</li><li><strong>CA对RA数字签名做认证，如果验证通过，则同意用户请求，颁发证书</strong>，然后将证书输出。如果验证不通过，则拒绝证书申请</li></ul></li><li>RA转发证书<ul><li>首先将证书输出到LDAP服务器以提供目录浏览</li><li>知用户证书发行成功，告知证书序列号，到指定的网址去下载证书</li></ul></li><li>用户证书获取<ul><li>用户使用证书序列号去指定网址下载自己的数字证书，<strong>只有持有与申请时提交的公钥配对的私钥才能下载成功</strong></li></ul></li></ul><h4 id="证书验证过程"><a href="#证书验证过程" class="headerlink" title="证书验证过程"></a>证书验证过程</h4><blockquote><p>接收方收到消息证书后，使用CA公钥对数字签名解密生成消息摘要，对<strong>证书内容</strong>进行hash生成摘要，两份摘要进行比对可证明证书内容的完整性与真实性（具体还要看日期、找LDAP服务器验证CRl等等等）</p><ul><li>使用CA私钥进行签名和公钥解密，可以证明证书确实是由CA发布的（CA的公钥一般来说由浏览器开发商内置在浏览器的内部）</li><li>两份摘要的对比结果，可以证明证书内容是否在传输过程中被改动</li></ul></blockquote><p>X.509 - Authentication</p><h4 id="证书撤销过程"><a href="#证书撤销过程" class="headerlink" title="证书撤销过程"></a>证书撤销过程</h4><ul><li>用户申请：用户向RA发送一封签名加密邮件，申请撤销证书。</li><li>RA审核：注册机构同意证书撤销，并对申请签名。</li><li>CA更新CRL：CA验证证书撤销请求的RA签名，如果正确，则同意申请，并更新CRL，并输出。</li><li>RA转发CRL：注册中心收到CRL，以<strong>多种方式将CRL公布（包括LDAP服务器）</strong>。</li><li>用户告知：<strong>用户访问LDAP服务器，下载或浏览CRL</strong>。</li></ul><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">method</span>&gt;</span><span class="tag">&lt;<span class="name">request-URL</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">headers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entity-body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><h4 id="证书验证阶段"><a href="#证书验证阶段" class="headerlink" title="证书验证阶段"></a>证书验证阶段</h4><ul><li>浏览器发起 HTTPS 请求<ul><li>支持的加密以及版本</li></ul></li><li>服务端返回 HTTPS 证书</li><li>客户端验证证书是否合法（根ca），如果不合法则提示告警</li></ul><h4 id="数据传输阶段"><a href="#数据传输阶段" class="headerlink" title="数据传输阶段"></a>数据传输阶段</h4><ul><li><p>当证书验证合法后，在本地生成随机数</p></li><li><p>通过证书公钥加密随机数，并把加密后的随机数传输到服务端</p></li><li><p>服务端通过私钥对随机数进行解密</p></li><li><p><strong>服务端通过客户端传入的随机数构造对称加密算法，对返回结果内容进行加密后传输</strong></p><ul><li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送</li><li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验</li></ul></li><li><p><strong>四次握手后；用”会话密钥”加密内容</strong></p></li></ul><img loading="lazy" src="/posts/d4e10e6c/2020-09-16-18-26-16.png" width="500"><h2 id="哪些没加密"><a href="#哪些没加密" class="headerlink" title="哪些没加密"></a>哪些没加密</h2><ul><li>只有<strong>ip</strong>和<strong>端口</strong>不加密，其他的都加密了<ul><li>domain（域）暴露，path（目录）不暴露</li></ul></li></ul><blockquote><p>While HTTPS encrypts the entire HTTP request and response, the DNS resolution and connection setup can reveal other information, such as the full domain or subdomain and the originating IP address, as shown above.</p><p>Additionally, attackers can still analyze encrypted HTTPS traffic for “side channel” information. This can include the time spent on site, or the relative size of user input.</p><p>IP地址和目标域名在通信过程中未加密。 甚至加密的流量也可以间接显示某些信息，例如在网站上花费的时间，所请求的资源或提交的信息的大小</p></blockquote><img loading="lazy" src="/posts/d4e10e6c/2020-09-15-09-53-39.png" width="500"><h3 id="http攻击"><a href="#http攻击" class="headerlink" title="http攻击"></a>http攻击</h3><h3 id="HTTPS中间人攻击"><a href="#HTTPS中间人攻击" class="headerlink" title="HTTPS中间人攻击"></a>HTTPS中间人攻击</h3><ul><li>没有对证书校验<ul><li>身份伪造</li></ul></li><li>没有对主机名验证<ul><li>身份伪造</li></ul></li><li>CA被攻击导致私钥泄露<ul><li>中间人攻击（也就是身份伪造）</li></ul></li></ul><blockquote><p>证书的作用不只是HTTPS加密。可以用于伪造VPN认证、文档、邮件、数字签名，借此实现潜入公司内网等目的。</p><p>为了获得SSL加密通信的内容，中间人需要获得加密所使用的会话密钥。中间人采用的方法是，装成目标网站，向客户端出示一个伪造的同名服务器数字证书。为了这个伪造的证书通过客户端的检验，中间人必须让签发这个伪证书的CA的根证书进入客户端的受信任列表</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/cheidou123/article/details/94776328">【深入浅出HTTPS】_屎蛋的铲屎官-CSDN博客</a></li><li><a href="https://www.zhihu.com/question/22260090/answer/648910720">CA 机构是如何保护自己私钥的？ - Gh0u1L5的回答 - 知乎</a></li><li><a href="https://www.jianshu.com/p/c65fa3af1c01">PKI/CA工作原理及架构 - 简书</a></li><li><a href="https://blog.csdn.net/lk2684753/article/details/100160856">数字证书及CA详解_lk2684753的博客-CSDN博客</a></li><li><a href="https://https.cio.gov/">The HTTPS-Only Standard - The HTTPS-Only Standard</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Computer-Network/">Computer Network</category>
      
      <category domain="https://hejueyun.github.io/categories/Computer-Network/Notes/">Notes</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/d4e10e6c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>本博客稳定性测试页面</title>
      <link>https://hejueyun.github.io/posts/b1ca3577/</link>
      <guid>https://hejueyun.github.io/posts/b1ca3577/</guid>
      <pubDate>Wed, 29 Dec 2021 16:32:33 GMT</pubDate>
      
      <description>&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;f376526bc682189fcb639674ee428dda5b347b200ee9d68a0ad991e01461f088&quot;&gt;bd25ed9264b080267271e137e33d0ce1adc3c6b2bac6ceb0572e33f68e974c79015ef5ffac1835e449e5dcc1120ec29b92f0b5827b2b44302df6f2416c1e63ff931f0229b07b75c8caa05f5ffc98982cbd82654cc5f066bb1d97acfdeb26aae0a5901870376baa4ab1eebc7ac764c3e530512cc3bd0a314c7f9e7351cf69a2ac0b5b48d0e8de5acfd0f01fe8ab98fa01d338fae42e03b0c763264e1754a5e7760fe6c23f9bbd5d0252bd5fc36becaa0886eb58b0c6872cdeb5c9df5b39f9b99a1ecf40111f169e4a68ef51f2eb99893a4ec27e8d228b22d3f98da1b33a07074aee5cf225b9476765c20365265e6b19119071483adeef958473309638ff67fee70b05dbf1db7e3ded7fd8205c1792e942c8a6d7f7d46c10b69b84d594d0761d9d0a5e490fccb21655981542f4ece143a49533465951a31d6022b4f0bc0dad9d6b71c5f010ab314591c3c015835de1c011b53cabc77ab80f6f6541024070ffd08aee4849602514d513421b8242828d67b5818e39df3fef64293c06f1dc9d10d869c4b259e5c5e19bfe93b9ee5dc5ef1c17c17c88778182574055b9e4424c3a8e2b61b8355aa504e6331ced54b0eb0ae973938e2cc7438842e3a8abc48b855d4a463a2f1a16e286e708090198c9dabc261da527c42f94ce37471c61acfc88e1c65970730a3fbb8ff70b04da01ab483b64263bdd10556efaf508e012344b878cba85f4411015463d6577723bf768a0d6f8b21bc9eba969193b2ace1b7769328f4bd2cea94e9d39a004dacbaf361ee4c9a7716a3acea0dfde56593308995524d2395e4e2cb65b44f2a5f8f1d47a40d8cfb5837cbce680daf24687bd59b02861a0e58fb0ef4428f70d4bed114d8ec95bc6ae9c5d6b63467d34ea86a4ff2e8d90f2f1ce4c7ab09b08049f854a41d33d108d3e042365e9cddc5c777dfe70d7c2dfcb6bbeaec9f43b440f884cd9c980a8ac2405eb82e2791ab21a3dfa824cf4d5730f63bce88adf4380853e182802c33d3876c3a6038ef950cf1095830bed15a8b8f6f1f39786d6a7af80fac25b4b00c47c80b7d695d69fce87dd471109bb8fe5eac7652f83a4c7ede3a95230d563a35ff70d7d95d61f744e0aedeb829b0d0950a9a8cfb0b109d551c0fe8f068be0d11686aefa15ce584628b0bca0c4e2b1dd74f8714d107ab90a3ede46275a5a843c3574b4641ea198157e7be771f540cf52084b05c0e774c07db32535a922b871357805b1d9cca53e06f41acf2f598c4bcc30a5ae0590f1603118a11f3a804247723d3a6756a54b008060dc77585589df8fafe009caef71a33477cb56f437847cccb2bdb69827f6fe540649396f14d86222026998390c34d324fd3bb488a506cc7f0b527f1599b47b7e7d5e55422c0055baf3f21771658c8a331ee5073bea675a599e821d99626cfe581a9324e603b03d06842f18e25fb22f47a22763fd36610ff3f35717b1981e0a5caefa71668a7e1de91f23942b105cade05dec2704aeffdaaaaf7c0e0a63f6dc1f3d31793ed9b5240279c0e0a838643aaf5866ec96a7f3bcbd568df1fa558523728099e067cb420c315d8dd8f3e7&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="f376526bc682189fcb639674ee428dda5b347b200ee9d68a0ad991e01461f088">bd25ed9264b080267271e137e33d0ce1adc3c6b2bac6ceb0572e33f68e974c79015ef5ffac1835e449e5dcc1120ec29b92f0b5827b2b44302df6f2416c1e63ff931f0229b07b75c8caa05f5ffc98982cbd82654cc5f066bb1d97acfdeb26aae0a5901870376baa4ab1eebc7ac764c3e530512cc3bd0a314c7f9e7351cf69a2ac0b5b48d0e8de5acfd0f01fe8ab98fa01d338fae42e03b0c763264e1754a5e7760fe6c23f9bbd5d0252bd5fc36becaa0886eb58b0c6872cdeb5c9df5b39f9b99a1ecf40111f169e4a68ef51f2eb99893a4ec27e8d228b22d3f98da1b33a07074aee5cf225b9476765c20365265e6b19119071483adeef958473309638ff67fee70b05dbf1db7e3ded7fd8205c1792e942c8a6d7f7d46c10b69b84d594d0761d9d0a5e490fccb21655981542f4ece143a49533465951a31d6022b4f0bc0dad9d6b71c5f010ab314591c3c015835de1c011b53cabc77ab80f6f6541024070ffd08aee4849602514d513421b8242828d67b5818e39df3fef64293c06f1dc9d10d869c4b259e5c5e19bfe93b9ee5dc5ef1c17c17c88778182574055b9e4424c3a8e2b61b8355aa504e6331ced54b0eb0ae973938e2cc7438842e3a8abc48b855d4a463a2f1a16e286e708090198c9dabc261da527c42f94ce37471c61acfc88e1c65970730a3fbb8ff70b04da01ab483b64263bdd10556efaf508e012344b878cba85f4411015463d6577723bf768a0d6f8b21bc9eba969193b2ace1b7769328f4bd2cea94e9d39a004dacbaf361ee4c9a7716a3acea0dfde56593308995524d2395e4e2cb65b44f2a5f8f1d47a40d8cfb5837cbce680daf24687bd59b02861a0e58fb0ef4428f70d4bed114d8ec95bc6ae9c5d6b63467d34ea86a4ff2e8d90f2f1ce4c7ab09b08049f854a41d33d108d3e042365e9cddc5c777dfe70d7c2dfcb6bbeaec9f43b440f884cd9c980a8ac2405eb82e2791ab21a3dfa824cf4d5730f63bce88adf4380853e182802c33d3876c3a6038ef950cf1095830bed15a8b8f6f1f39786d6a7af80fac25b4b00c47c80b7d695d69fce87dd471109bb8fe5eac7652f83a4c7ede3a95230d563a35ff70d7d95d61f744e0aedeb829b0d0950a9a8cfb0b109d551c0fe8f068be0d11686aefa15ce584628b0bca0c4e2b1dd74f8714d107ab90a3ede46275a5a843c3574b4641ea198157e7be771f540cf52084b05c0e774c07db32535a922b871357805b1d9cca53e06f41acf2f598c4bcc30a5ae0590f1603118a11f3a804247723d3a6756a54b008060dc77585589df8fafe009caef71a33477cb56f437847cccb2bdb69827f6fe540649396f14d86222026998390c34d324fd3bb488a506cc7f0b527f1599b47b7e7d5e55422c0055baf3f21771658c8a331ee5073bea675a599e821d99626cfe581a9324e603b03d06842f18e25fb22f47a22763fd36610ff3f35717b1981e0a5caefa71668a7e1de91f23942b105cade05dec2704aeffdaaaaf7c0e0a63f6dc1f3d31793ed9b5240279c0e0a838643aaf5866ec96a7f3bcbd568df1fa558523728099e067cb420c315d8dd8f3e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/b1ca3577/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>身份隐私保护协议系统设计</title>
      <link>https://hejueyun.github.io/posts/b3344f54/</link>
      <guid>https://hejueyun.github.io/posts/b3344f54/</guid>
      <pubDate>Mon, 27 Dec 2021 23:06:15 GMT</pubDate>
      
      <description>

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;./1.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;


</description>
      
      
      
      <content:encoded><![CDATA[<div class="row">    <embed src="./1.pdf" width="100%" height="550" type="application/pdf"></div>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Network-Security/">Network Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/b3344f54/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于后Asoul时代的胡思乱想</title>
      <link>https://hejueyun.github.io/posts/a1f1fb0f/</link>
      <guid>https://hejueyun.github.io/posts/a1f1fb0f/</guid>
      <pubDate>Sat, 25 Dec 2021 23:06:15 GMT</pubDate>
      
      <description>&lt;p&gt;鲁迅曾经发问：娜拉走后怎样？如今Au们要问：Asoul走后怎样？&lt;/p&gt;
&lt;p&gt;鲁迅将《玩偶之家》的女性主义解构，娜拉在“后娜拉时代”得到现实主义的重新审视。而足够幸运的话，Asoul的名字也会在一篇文化与传播的论文中出现，届时，五位姑娘的形象也会在“后Asoul时代”下被重读。&lt;/p&gt;
&lt;p&gt;为此，我们不妨大胆假设，设想自己是后ASoul时代的一名传播学子，想要把自己的经历写成关于后Asoul的时代的一篇论文。&lt;/p&gt;
&lt;h2 id=&quot;作为Asoul文化的独特&quot;&gt;&lt;a href=&quot;#作为Asoul文化的独特&quot; class=&quot;headerlink&quot; title=&quot;作为Asoul文化的独特&quot;&gt;&lt;/a&gt;作为Asoul文化的独特&lt;/h2&gt;&lt;p&gt;万事开头难，第一道关卡赫然摆在你面前：如何解释它的研究意义——换句话说，如何挖掘Asoul其作为文化的价值？为此，你开始溯源Asoul，去挖掘沾满泥泞的文化之根。&lt;/p&gt;
&lt;p&gt;Asoul是怎样的一种文化？偶像(粉丝)文化。这是显然的，但你想走得更深，因为你注意到了它身体里流淌的ACG血液。同人社团，二创游戏与画作……Asoul仿佛让你想起了东方Project。事实上，在同人的话语体系下，Asoul与东方并没什么差别。&lt;/p&gt;
&lt;p&gt;一股绿得发青的血脉突然吸引了你的注意，那是属于污秽与躁动的抽象文化。在汇聚了红牌楼、孙笑川、吉普赛、伐木工与动物园等众多支流后，抽象这条大河继续浩浩汤汤地奔涌过神奈川，淌过了冲浪TV，奔向了China_irl；而其中，一条小支流却静悄悄地偏离了河道，最终流到了Asoul。远道而来的嬉皮士们带着他们独有的风气，挑战公序良俗，嘲讽落伍文化；万向天引、链接诈骗成了他们的拿手好戏，辱骂、钓鱼和小作文是消解他们与偶像之间不平等的独门绝技。&lt;/p&gt;
&lt;p&gt;而当几种文化汇聚到Asoul时，属于Asoul文化的文化诞生了。各家各取所长，组织纪律严明的粉丝文化影响了三和大神的抽象，抽象打破规则的精神则进一步影响了同人创作。可以作为对比的是，作为抽象文化鼎盛、百校联盟时期的带学日报，其后继者魂报不过是Asoul创作中最不起眼的一个。 &lt;/p&gt;
&lt;center&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/a1f1fb0f/daixue.jpg&quot; width=&quot;500&quot;&gt;&lt;/center&gt;
&lt;center&gt;死于铁拳的带学日报&lt;/center&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>鲁迅曾经发问：娜拉走后怎样？如今Au们要问：Asoul走后怎样？</p><p>鲁迅将《玩偶之家》的女性主义解构，娜拉在“后娜拉时代”得到现实主义的重新审视。而足够幸运的话，Asoul的名字也会在一篇文化与传播的论文中出现，届时，五位姑娘的形象也会在“后Asoul时代”下被重读。</p><p>为此，我们不妨大胆假设，设想自己是后ASoul时代的一名传播学子，想要把自己的经历写成关于后Asoul的时代的一篇论文。</p><h2 id="作为Asoul文化的独特"><a href="#作为Asoul文化的独特" class="headerlink" title="作为Asoul文化的独特"></a>作为Asoul文化的独特</h2><p>万事开头难，第一道关卡赫然摆在你面前：如何解释它的研究意义——换句话说，如何挖掘Asoul其作为文化的价值？为此，你开始溯源Asoul，去挖掘沾满泥泞的文化之根。</p><p>Asoul是怎样的一种文化？偶像(粉丝)文化。这是显然的，但你想走得更深，因为你注意到了它身体里流淌的ACG血液。同人社团，二创游戏与画作……Asoul仿佛让你想起了东方Project。事实上，在同人的话语体系下，Asoul与东方并没什么差别。</p><p>一股绿得发青的血脉突然吸引了你的注意，那是属于污秽与躁动的抽象文化。在汇聚了红牌楼、孙笑川、吉普赛、伐木工与动物园等众多支流后，抽象这条大河继续浩浩汤汤地奔涌过神奈川，淌过了冲浪TV，奔向了China_irl；而其中，一条小支流却静悄悄地偏离了河道，最终流到了Asoul。远道而来的嬉皮士们带着他们独有的风气，挑战公序良俗，嘲讽落伍文化；万向天引、链接诈骗成了他们的拿手好戏，辱骂、钓鱼和小作文是消解他们与偶像之间不平等的独门绝技。</p><p>而当几种文化汇聚到Asoul时，属于Asoul文化的文化诞生了。各家各取所长，组织纪律严明的粉丝文化影响了三和大神的抽象，抽象打破规则的精神则进一步影响了同人创作。可以作为对比的是，作为抽象文化鼎盛、百校联盟时期的带学日报，其后继者魂报不过是Asoul创作中最不起眼的一个。 </p><center><img loading="lazy" src="/posts/a1f1fb0f/daixue.jpg" width="500"></center><center>死于铁拳的带学日报</center><hr><center><img loading="lazy" src="/posts/a1f1fb0f/hunbao.jpg" width="500"></center><center>一个魂周报，后改版为魂报</center><h2 id="作为Asoul文化的价值"><a href="#作为Asoul文化的价值" class="headerlink" title="作为Asoul文化的价值"></a>作为Asoul文化的价值</h2><p>Asoul确实是独特的，它融合了偶像、同人和抽象三股血脉。但独特仅是价值的一种，等待着Asoul的是作为整体的价值评估。为此，你将Asoul分割为本体和同人，并分别评估了他们的价值。然而，你最终得到了一个意料之外的结果：无论是asoul本身还是其同人的价值，远远不及你预期的那般乐观。这似乎是一个可以被循环论证所解释的结果。偶像们并不突出的素质，压缩了同人创作者的想象空间；而刻板的同人创作，则限制了偶像可以拓展的潜景。</p><p>作为对比案例，我们考察著名的香党圣经retake。依托于eva本体的深度与影响，这部诞生于2005年的“最强同人”至今仍被传播与讨论，并激发出更为广泛的创作。而依托于此，eva文化的叙事和生命力同时得到补全与延续。百年之后，retake仍然会被观赏，eva仍然会被当做20世纪末先锋文化的代表被研究，而Asoul的录播和二创作品们则沦为尘埃，被无情地扫进互联网的回收站。这场悲剧的根源在于，Asoul企划始终没能脱离消费产品的定位，无奈而被迫背负起媚俗的原罪；至始至终，它都是一个被工业社会流水线产出的可复制品和可替代品。这样的文娱消费，放20年前是金庸小说，放十年前是电子网游，而到现在轮到了虚拟直播。这确实是令Au难以接受的，但从本质上看，成功的Asoul与已经死去的歌姬，并没有什么差别。</p><center><img loading="lazy" src="/posts/a1f1fb0f/kitsch.jpg" width="500"></center><center>格林伯格：前卫与刻奇</center><h2 id="作为Asoul文化的重读"><a href="#作为Asoul文化的重读" class="headerlink" title="作为Asoul文化的重读"></a>作为Asoul文化的重读</h2><p>最终，你开始了属于你的“二创”。通过重读的方法，你开始赋予Asoul崭新的内涵。</p><p>首先，你想到了在符号学的重读。沿着索绪尔和罗兰巴特的老路，你首先阐述“麦克风”这一能指是如何在多层神话系统下的演变出不同的所指。“虚拟”的字眼令你浮想联翩，带着鲍德里亚的思考，你开始探讨表征与现实的疏离……“这有些老套”，你或许会寻思。但这也让你的研究有了起步……</p><p>那么，能否通过马克思主义进行重读？从油画中的裸体，到权力映射的制服，再到偶像披着的3D虚拟皮肤，女性在男性凝视下受到了怎样的压迫？从芒果台的综艺到虚拟综艺，从央视的虚拟主播再到Asoul，Asoul的出现是否代表着年轻人对话语规训反抗？你的思维开始活络了起来……</p><p>反向思考，或许asoul本不应引发这场文化的狂欢，那它诞生的根本原因是什么呢？是领跑效应，还是历史发展的进程？你开始念起了诗……</p><p>作为展望，你开始思考Asoul对元宇宙中的影响……</p><p>……</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写到这，你终于松下一口气，可以开始肆意地舞文弄墨，撰写感恩戴德的辞令。最重要的，你首先感谢了自己，感谢自己没有受“多看as少看au”的蛊惑，不然，你将失去对大量事件的参与、跟踪和记录。接着，你感谢了切片员们，正因他们的努力，使你不必费时观看没有快进键的直播。然后，你感谢了一批前卫的创作者，感谢用色情艺术消解偶像灵晕的HMP老师，感谢制作小品《查成分》的赶上老师，感谢创作歌曲《草莓与狼》的信陵，感谢参与游戏《枝江往事》的秃头云，以及枝网查重的开发者们——他们的创作为你提供了丰富的研究样本，他们的实践将是Asoul文化最高水平的代表。最后，你会感谢Asoul的五位姑娘，她们的事迹将是你余生不断回味的工业糖精。</p>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/essay/">雜文</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/a1f1fb0f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Wireless Network Security</title>
      <link>https://hejueyun.github.io/posts/6eddbcac/</link>
      <guid>https://hejueyun.github.io/posts/6eddbcac/</guid>
      <pubDate>Mon, 13 Dec 2021 22:45:25 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;background&quot;&gt;&lt;a href=&quot;#background&quot; class=&quot;headerlink&quot; title=&quot;background&quot;&gt;&lt;/a&gt;background&lt;/h2&gt;&lt;h3 id=&quot;Categories-of-wireless-networks&quot;&gt;&lt;a href=&quot;#Categories-of-wireless-networks&quot; class=&quot;headerlink&quot; title=&quot;Categories of wireless networks&quot;&gt;&lt;/a&gt;Categories of wireless networks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Wireless Personal Area Network (WPAN)&lt;ul&gt;
&lt;li&gt;Bluetooth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wireless Local Area Network (WLAN)（Wi-Fi）&lt;ul&gt;
&lt;li&gt;IEEE 802.11a/b/g/n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wireless Wide Area Network (WWAN)&lt;ul&gt;
&lt;li&gt;Mobile phone networks (5G/4G/3G/GPRS/CDMA)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;IEEE802-11-WLAN&quot;&gt;&lt;a href=&quot;#IEEE802-11-WLAN&quot; class=&quot;headerlink&quot; title=&quot;IEEE802.11 (WLAN)&quot;&gt;&lt;/a&gt;IEEE802.11 (WLAN)&lt;/h3&gt;&lt;h4 id=&quot;Infrastructure-mode&quot;&gt;&lt;a href=&quot;#Infrastructure-mode&quot; class=&quot;headerlink&quot; title=&quot;Infrastructure mode&quot;&gt;&lt;/a&gt;Infrastructure mode&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务集（Service set）&lt;blockquote&gt;
&lt;p&gt;是无线局域网中的一个术语，用以描述802.11无线网络的构成单位（一组互相有联系的无线设备），使用服务集标识符（SSID）作为识别。可以分为独立基本服务集（IBSS）、基本服务集（BSS）和扩展服务集（ESS）三类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;BSS (Basic Service Set or cell)&lt;ul&gt;
&lt;li&gt;an AP (Access Point（接入点）, or base station（基站）) + wireless stations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ESS (Extended Service Set)&lt;ul&gt;
&lt;li&gt;two or more BSSes interconnected by a Distributed System (a cable, a wired network, or another WLAN).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All communications are via APs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SSID：Service Set Identifier&lt;ul&gt;
&lt;li&gt;基本服务集标识符（BSSID），表示的是AP的数据链路层的&lt;strong&gt;MAC地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;扩展服务集定标识符（ESSID），一个最长32字节区分大小写的字符串,表示&lt;strong&gt;无线网络的名称&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/6eddbcac/SSID_ESS.svg&quot; width=&quot;600px&quot;&gt;

&lt;h4 id=&quot;Ad-hoc-mode-对等拓扑模式&quot;&gt;&lt;a href=&quot;#Ad-hoc-mode-对等拓扑模式&quot; class=&quot;headerlink&quot; title=&quot;Ad hoc mode(对等拓扑模式)&quot;&gt;&lt;/a&gt;Ad hoc mode(对等拓扑模式)&lt;/h4&gt;&lt;p&gt;也就是独立基本服务集（IBSS）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used when no pre-defined infrastructure – stations/clients &lt;strong&gt;communicate directly without any AP&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><h3 id="Categories-of-wireless-networks"><a href="#Categories-of-wireless-networks" class="headerlink" title="Categories of wireless networks"></a>Categories of wireless networks</h3><ul><li>Wireless Personal Area Network (WPAN)<ul><li>Bluetooth</li></ul></li><li>Wireless Local Area Network (WLAN)（Wi-Fi）<ul><li>IEEE 802.11a/b/g/n</li></ul></li><li>Wireless Wide Area Network (WWAN)<ul><li>Mobile phone networks (5G/4G/3G/GPRS/CDMA)</li></ul></li></ul><h3 id="IEEE802-11-WLAN"><a href="#IEEE802-11-WLAN" class="headerlink" title="IEEE802.11 (WLAN)"></a>IEEE802.11 (WLAN)</h3><h4 id="Infrastructure-mode"><a href="#Infrastructure-mode" class="headerlink" title="Infrastructure mode"></a>Infrastructure mode</h4><ul><li>服务集（Service set）<blockquote><p>是无线局域网中的一个术语，用以描述802.11无线网络的构成单位（一组互相有联系的无线设备），使用服务集标识符（SSID）作为识别。可以分为独立基本服务集（IBSS）、基本服务集（BSS）和扩展服务集（ESS）三类</p></blockquote></li><li>BSS (Basic Service Set or cell)<ul><li>an AP (Access Point（接入点）, or base station（基站）) + wireless stations.</li></ul></li><li>ESS (Extended Service Set)<ul><li>two or more BSSes interconnected by a Distributed System (a cable, a wired network, or another WLAN).</li></ul></li><li><strong>All communications are via APs</strong></li><li>SSID：Service Set Identifier<ul><li>基本服务集标识符（BSSID），表示的是AP的数据链路层的<strong>MAC地址</strong></li><li>扩展服务集定标识符（ESSID），一个最长32字节区分大小写的字符串,表示<strong>无线网络的名称</strong></li></ul></li></ul><img loading="lazy" src="/posts/6eddbcac/SSID_ESS.svg" width="600px"><h4 id="Ad-hoc-mode-对等拓扑模式"><a href="#Ad-hoc-mode-对等拓扑模式" class="headerlink" title="Ad hoc mode(对等拓扑模式)"></a>Ad hoc mode(对等拓扑模式)</h4><p>也就是独立基本服务集（IBSS）</p><ul><li>Used when no pre-defined infrastructure – stations/clients <strong>communicate directly without any AP</strong></li></ul><img loading="lazy" src="/posts/6eddbcac/1.png" width="500px"><h3 id="Security-threats"><a href="#Security-threats" class="headerlink" title="Security threats"></a>Security threats</h3><blockquote><p>WLANs use radio signal, making them more vulnerable to both passive and active attacks than their wired counterparts</p></blockquote><ul><li>Monitor or eavesdrop channels</li><li>Impersonate a legitimate AP</li><li>Man-in-the-middle</li><li>Denial of Service (DoS) attack</li></ul><h2 id="Original-802-11-Security"><a href="#Original-802-11-Security" class="headerlink" title="Original 802.11 Security"></a>Original 802.11 Security</h2><h3 id="Wired-Equivalent-Privacy-WEP"><a href="#Wired-Equivalent-Privacy-WEP" class="headerlink" title="Wired Equivalent Privacy (WEP)"></a>Wired Equivalent Privacy (WEP)</h3><p>有线等效加密</p><ul><li>The first WLAN security specification</li><li>又称无线加密协议（Wireless Encryption Protocol）</li><li>标准的64比特WEP使用40比特的钥匙接上24位的初向量（initialization vector，IV）成为RC4用的钥匙</li><li>2003年被淘汰<blockquote><p>因为RC4是流加密的一种，同一个钥匙绝不能使用二次，所以使用（虽然是用明文发送的）IV的目的就是要避免重复；然而24位的IV并没有长到足以担保在忙碌的网络上不会重复，而且IV的使用方式也使其可能遭受到关连式钥匙攻击。</p></blockquote></li></ul><h3 id="Station-to-AP-Authentication"><a href="#Station-to-AP-Authentication" class="headerlink" title="Station-to-AP Authentication"></a>Station-to-AP Authentication</h3><p>Open System Authentication (Using Service Set Identifier (SSID))</p><ul><li>Each client can connect to AP by just supplying the correct SSID</li></ul><img loading="lazy" src="/posts/6eddbcac/2.png" width="500px"><p>PSK (pre-shared/WEP key) Authentication（预分享密钥认证）</p><ol><li>Client requests association with AP (Association Request【**关联请求(帧)**】)</li><li>AP returns a Challenge, n, a random number, also called <strong>nonce</strong>.</li><li>Client encrypts n using the <strong>pre-set WEP key (WKey)</strong> and sends it back</li><li>AP compares decrypted challenge with transmitted one to accept/reject<blockquote><p>Client is accepted if <code>&#123;n xor RC4(WKey)&#125; xor RC4(WKey’)=n’</code>; where <code>WKey’</code> is <code>AP’</code>s copy of the WEP key; <code>n’</code> is <code>AP’</code>s copy of the challenge</p></blockquote></li><li>The authN is vulnerable to interception and replay attacks, provided <strong>WKey</strong> is reused<ol><li>lack of key management</li></ol></li></ol><p>MAC Address Filtering</p><ul><li>Each AP maintains a list of MAC addresses that are allowed to connect to it</li><li>MAC address authentication was not part of the 802.11 standard, but many vendors, e.g. Cisco, used it to augment the shared key authN.</li></ul><img loading="lazy" src="/posts/6eddbcac/3.png" width="500px"><h3 id="Confidentiality-and-integrity"><a href="#Confidentiality-and-integrity" class="headerlink" title="Confidentiality and integrity"></a>Confidentiality and integrity</h3><ul><li>WEP also provides confidentiality and integrity protections of data<br>streams sent between a wireless station/client and AP.<ul><li>Confidentiality is provided by using RC4 based stream cipher (plaintext XORed with keystream from RC4)</li><li>Integrity is provided by using Integrity Check Value (ICV) (CRC-32, which is a 32-bit Cyclic Redundancy Check value).</li></ul></li><li>WEP Encryption<ul><li><code>C=M xor RC4(IV||WKey)</code>，<code>M=Plaintext||ICV</code></li></ul></li><li>Decryption<ul><li><code>C xor RC4(IV||WKey) = M</code></li><li>Verifying ICV<ul><li>Compute fresh ICV’ based on M received and compare</li></ul></li></ul></li></ul><p><strong>Weaknesses</strong></p><ul><li>No key establishment/distribution mechanism</li><li>Use WKey (master and static key) directly<blockquote><p>From security point of view, the use of master keys should be minimised, <strong>i.e. they should only be used to generate other temporary keys</strong></p></blockquote></li><li>Small key size<ul><li>WKey is a 40-bit or 104-bit value; easier to crack(破解) by brute force</li></ul></li><li>Short IV<ul><li>Security of stream ciphers relies on <strong>never repeating keystream</strong></li><li>Input for generating keystream is (IV||WKey), where WKey is static and shared among stations and IV space is small</li></ul></li><li>Vulnerable to passive attacks<ul><li>Attacker collects traffic on the channel, say C1 and C2.</li><li>If these two messages are generated <strong>using the same key and same IV</strong>, then as <code>C1=(M1xor RC4(IV||WKey))</code> and <code>C2=(M2 xor RC4(IV|| WKey))</code>, <code>C1 xor C2 = (M1 xor M2)</code>.</li><li>Whenever a byte in (M1xor M2) is zero, M1 and M2 have the same content/value.(i.e. white space)</li></ul></li><li>Vulnerable to active attacks<ul><li>If attacker knows a plaintext and ciphertext pair, {C, M}<ul><li><strong>Keystream</strong> for IV values are known</li><li>Attacker can create correctly encrypted messages.</li></ul></li></ul></li><li>Weak ICV algorithm<ul><li>CRC-32 is linear in xor</li><li>Integrity protection for <strong>source/destination addresses</strong> is not provided</li></ul></li><li>No anti-replay protection</li><li>One-way authentication only</li></ul><blockquote><p><strong>WEP has failed in three security goals – station authentication, data confidentiality and integrity</strong></p></blockquote><h2 id="IEEE-802-11i-standard-2004"><a href="#IEEE-802-11i-standard-2004" class="headerlink" title="IEEE 802.11i standard (2004)"></a>IEEE 802.11i standard (2004)</h2><p>Authentication service</p><ul><li>IEEE 802.11<strong>i</strong> utilizes IEEE 802.1<strong>X</strong> standard for its authentication and key establishment services<br>Confidentiality and integrity services</li><li>WPA<ul><li><strong>TKIP</strong></li><li>Implemented a <strong>subset</strong> of IEEE 802.11i.</li><li>Targeted on legacy (then) equipment, i.e. only requiring firmware/software update (no hardware update required).</li></ul></li><li>WPA2 <ul><li><strong>Full</strong> implementation of IEEE 802.11i using <strong>CCMP</strong>.</li></ul></li></ul><h3 id="WPA-WiFi-Protected-Access"><a href="#WPA-WiFi-Protected-Access" class="headerlink" title="WPA (WiFi Protected Access)"></a>WPA (WiFi Protected Access)</h3><p>TKIP</p><ul><li>临时密钥完整性协议（Temporal Key Integrity Protocol） </li><li>用以在<strong>不需要升级硬件</strong>（Only require software and firmware upgrade.）的基础上替代有线等效加密（WEP）协议。由于WEP协议的薄弱造成了数据链路层安全被完全跳过，且由于已经应用的大量按照WEP要求制造的网络硬件急需更新更可靠的安全协议，在此背景下临时密钥完整性协议应运而生</li><li>2012年起已不再视为安全，且即将废弃</li></ul><p>WPA</p><ul><li>机密性：<ul><li>it still uses RC4, but with a base key size of 128-bits and IV of 48-bits (<strong>doubled</strong> the IV size used in WEP)</li><li>it uses the <strong>base key</strong>, sender’s <strong>MAC address</strong> and <strong>IV</strong> (sequence number) to compute the per-packet key</li></ul></li><li>完整性：<ul><li>it uses a more secure (non-linear) algorithm and a separate key (Michael key) for MIC (Message Integrity Code)</li></ul></li><li>实现<ul><li>TKIP使用<strong>密钥混合</strong>功能。该功能混合了根密钥（Root Secret key）和初始化向量，而后再通过RC4初始化。在WEP中初始化向量基本上被直接连在根密钥上而后直接通过RC4，从而造成了RC4为基础的WEP可以被轻而易举的使用相关密钥攻击而破解</li></ul></li></ul><img loading="lazy" src="/posts/6eddbcac/4.png" width="500px"><ul><li>TKIP is a front-end wrapping up（包装） the WEP encryption function.</li></ul><h3 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a>WPA2</h3><p>CCMP</p><ul><li>计数器模式密码块链消息完整码协议（Counter Cipher Mode with Block Chaining Message Authentication Code Protocol）</li><li>Use a single key to provide confidentiality and integrity.(用同一个密钥K)</li><li>Encryption<ul><li>Uses Advanced Encryption System (AES) with 128-bit key and 128-bit block size.</li><li>Integrity check value is not encrypted</li></ul></li><li>Confidentiality<ul><li>AES in Counter-Mode </li></ul></li><li>Authentication/Integrity<ul><li>AES in CBC-Mode, i.e. CBC-MAC</li></ul></li><li>Use 48-bits IV as a sequence number for anti-replay detection</li></ul><p>WPA2</p><ul><li>WAP2 does not have the restraint（限制） of having to support the already-deployed WEP hardware</li></ul><img loading="lazy" src="/posts/6eddbcac/5.png" width="600px"><h2 id="IEEE-802-1X-Authentication-Standard"><a href="#IEEE-802-1X-Authentication-Standard" class="headerlink" title="IEEE 802.1X Authentication Standard"></a>IEEE 802.1X Authentication Standard</h2><p><em>X要大写</em></p><ul><li>defines port-based access control (“port” meaning a single point of attachment to the LAN infrastructure</li><li>Extensible Authentication Protocol (EAP) over LAN (EAPoL Protocol)</li><li>It makes use of a separate authentication server, e.g. RADIUS, to perform authentication</li></ul><img loading="lazy" src="/posts/6eddbcac/6.png" width="600px"><ul><li>申请者STA（Supplicant）\验证者（Authenticator）(<strong>aka the wireless access point, router or switch</strong>)\证服务器（Authentication server）<ul><li>等于说连ap要经过认证，然后IEEE 802.1X就是要额外考虑与认证服务器的传输安全</li></ul></li></ul><h3 id="EAP"><a href="#EAP" class="headerlink" title="EAP"></a>EAP</h3><p>可扩展身份验证协议(Extensible Authentication Protocol)</p><ul><li>interoperability(互通性)<ul><li>EAP means choices – supports the use of many authN methods.</li><li>No guarantee that STA and AP will always support the same authenN method</li></ul></li><li>types<ul><li>Lightweight EAP (LEAP)</li><li>EAP-TLS<blockquote><p>Creates a TLS session within EAP, between the Supplicant and the Authentication Server, both entities need valid (x509) certificates, and support mutual authentication </p><p>Drawbacks:</p><ul><li>User’s identity is passed in cleartext and in the certificate</li><li>Needs client certificate in order to authenticate client</li></ul></blockquote></li><li>EAP-TTLS<ul><li>TTLS与TLS最大的区别是TTLS不需要客户端认证的协议</li></ul></li><li>Protected EAP (PEAP)<blockquote><p>(EAP-TTLS and PEAP) With this method, the main idea is to first establish an encrypted SSL/TLS tunnel using server-side PK certificates, and then user delivers the user’s identity to, and performs authentication with, the server inside the tunnel thus protecting against eavesdropping</p></blockquote></li><li><em>总的说来就是在AP（也就是验证者）和认证服务器之间的信道是TSL加密的，而AP与用户之间的加密是WPA/WPA2负责的，不要搞混淆了</em></li></ul></li></ul><img loading="lazy" src="/posts/6eddbcac/7.png" width="600px"><h2 id="WAP-Key-Hierarchy"><a href="#WAP-Key-Hierarchy" class="headerlink" title="WAP Key Hierarchy"></a>WAP Key Hierarchy</h2><ul><li>无线应用协议(Wireless Application Protocol)</li></ul><img loading="lazy" src="/posts/6eddbcac/8.png" width="600px"><ul><li>MK (Master Key) </li><li>PMK (Pairwise Master Key) 成对主密钥</li><li>PTK (Pairwise Transient Key)  成对传输密码<ul><li><strong>TKIP/CCMP</strong></li><li>EAPOL-Key Confirmation Key (EAP Over Lan-KCK)</li><li>EAPOL-Key Encryption Key (KEK).</li></ul></li><li>Group Temporal Key (GTK)<ul><li>to secure multicast/broadcast data traffic</li></ul></li></ul><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><ul><li>实验:无线网络嗅探基础</li><li>Scapy扫描及隐藏SSID扫描</li><li>实验：WPA/WPA2 PSK破解</li><li>密码学备忘录-分组密码</li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/6eddbcac/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A-Soul事件杂记</title>
      <link>https://hejueyun.github.io/posts/f247d9b5/</link>
      <guid>https://hejueyun.github.io/posts/f247d9b5/</guid>
      <pubDate>Sun, 12 Dec 2021 19:52:47 GMT</pubDate>
      
      <description>&lt;div class=&quot;hbe hbe-container&quot; id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;Authenticaiton Failed.&quot; data-whm=&quot;Authentication Error.&quot;&gt;
  &lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;44572bc07f761f3bf85b8fdeb45ac96428429afa5a0e67db4098a235414b9289&quot;&gt;d0a85b87d15f1a8b510d453efbe23a816a2bae31f869971c2996f375ce4102c5782e0ffdb18777aec83df1c73724b4e2f5e4366745b6a9ad03f0f1d24ba7ce76cd3d061d7e36c83f1f02eb32bbeb13777482be53cb11ed76911431885ec423f3211960926b6478689b597fba074bea67165120024d3baf204052b0fd094684d8470829b494c5fd7c37c26a98fe0124bef218b29d728c9e5ba89a3eacb5e22ed9da771f58eb1edbfb431cc81b82e82c1315b1c5c8ff454a2efa2b9dc58964bcd145f0e8c2899f65bcdfa1a54348853fae69be0a43a33b9d46cf247ecd28d5c792acf09c10a371194225e38f4a669f9133adc5beb902ccabed7720831c8fa43afe90045437f633e6f49a692285fa52367352ccd68cf92c4cf00d88d3733e46e96fbd4a912a002dc679acdf1f457f7bef23ffdc2653cc6d383cc0ff2c8b281fbbc7e9fd779d80c72c6009d86285bcca52e7f0219aa94da1536161f6909a5a8557d0db5a81e2492fb4e3bb8da086552021816398ed6a80f0658af5866b1fcbe4d4a1f1776886e1838e01db96c399796f2bb515f5d644d100c220c17dbc63673025633e03b6ce2ee8e58d755c4baf4b89a77cfe1cd28763828bc5ca3ab68613127d7de54ba4841f6b938c2d36f8e1ba21af9fe9dd643d24405cfd451cea7fb7687bb4666b5bcd17ceb90ca2a8c937676e2396d81900865ac2f79c99a260d5ce13a0ba7df7f20f7930bb467df3f0f5f2689a8537ef5ee0f09cc068ee2c92f789f084ea406347f57ccf131474b0a5f2eb5b799231f16241e0ed8a965a7e2300d13fde57cfa30e10a0e0ef74055f77718e8a90f1e3568ae26c4206036b6ca8e34dd9fc645127865780bc5bdea72edcf4034763e00051999dc9fd8df484992774c2c8ea859744119e00a9f7c48430f1f59c8a778902236751c1d83e97605d05ad81fcad28cea6ea4541f0d5d540ac17ebca34b21e6b43dbc284a8bce70283f7c4919b454164a02d9508c13c01a81ec9b623ec5fccfb5a995c39047c89fe30d46db9f3d92297e931eb011384c3ea434cb87613d36b65f19201a4f80f088a75ff2b3b20ebb31436ab80318bb0ef6a22ae7ae11f9235d1d066295960c7fbdda95f6ebd23137ab73667217b7d044f8548269a7055f6e6cab6c904087d024ac93bdb3b568b39205fb94bdc01f3e934ec12ff58433144e60790f27808cd34302b9368513374087868060a927b1d677a8b488bf4be4c5f85fa3eb9c194f3ced825e03fddab04fca040bf8202ce4daaecfb0230472a9de803608964f4b30af14c36eb794a526d5315d5b125d45512cc6db84aed63bbcff0b8a465c372793a5d38ef19bd0b5645fb052aa8dc6e0203bf90f50f2b9c2130c49969dda03d1f920e7daa47f47594ccf06b819fe8e1cd7b0e2b2ad5ac3f5d189476a62dc727380c181c36969b855f3a77f986869cd508244580c8dd3359e74c0efc44742017359a38775d6db85f54bfbd00646ffbd98450ea48ff39ebf91be1fd6b2fdf4f4eb3785b26a49edc9e69f91f66eb2f081ad93f4d14f1c0347947d65f7ee135d015a080f0cea3e25c6c0a8136aa15f4f9df267ba7065f2ad57c9c92a4329a973462be08167a2270fa0760910765681e15db9088288dd17c2d034499ded62456be3b7273c8e62300a9545975d8ffd4618a9a32e4dceaca5006272b0d5a5b755816347fdf232cc987edd6a83c86d7eecdad51ca3f0d22810bfda2c69a8f790f7a9e8318b4de4dce9b5eb5fe578f9499565c92ea02a108ee2df085df38bdca9e94dbfd2057c0e7c5ab2c8eda05d6fae34ad6ec117d3c098e96d6941dfb8ce12e85da569ec54223dac78a14932b8fec494e2f396e80b5a1a10c76eed16b40b50d63f8d5edacd55d1abb35db8fe3a827496f70b39c3823ace1666837e02bc2e4567a4f0ec4d2ed7fb38f2ab681ff1e3c65cda4bf3d536d07e122d65605197a572b6f6c021aecd9677a4b67904fa6ce5bb5285035da897223cbc59c85a9a89278a3947fa88fbcff22070c643032c921e3abcdcc40970c5d01f862f049bd4122bf9af4a0f98bea7bb2940df425f0da61f92432b309a555de43e4b20bd2e3a78edb5b6c6c5dd7d41af2c944e2bbffafa86d08d993e77b12e0ee7815319f69cf0186a42ffe796590c46ed4877ec4b53dc59e25850eb55f116738553de1eaa7737e9ba1ce2c8363e080e67092d4c7d54a7845e749393d415e7be18e1e6d34484a62a06b099e2952d96f508b666cf2686ca7d5002b809cfc1c41b93c84ff0bc24c1b40ac626315ddab1d3f05c96cd9f1d007b3d75a1073683e0db90061716cfb0583db5d32c636b51655af468ebf66b1fb0a579e90af80e4b87847843cc0f0c3ba720359eb994687805744962c5f3b49d135cc2e2c3369d6d10734eba3c3357c614f22278cea1c25a2ef389623d02c2adf81362270547106c4b230949ee45677125cea0693d56f16864d60c286f17392babb1fe6e524b727a40ceed87643e535be73ba6a97b5e77d9ae55771381acc65ba0e006f2c5e1963ecc96a5b64c4880512957b9f2842d6859e9f4de30a2bf53dac7d71205695a7602731899a573e26fb6b25ec396f31a9c888cb56462882551fd2687a7552eeb22b3671d5e86bec1994ca270339fb626ab4167485746b9f333afdd335957e1ccd7dae79946fe41371180492133058d0ecac74870cd84fa231d550d26c8520de640b8f4862dd4a06419b618b75060847dbc8142851ee5c379c9f5219a96190ec72561e6dba6f83b5dc512fd4643a657d413016c055989c4d5fc581591cde7cd92b2ac3f58484aa6b9fa8aa601a0081fc54eca5ca7d8c76ec3329476638cdc63229e151c4be6d5ca62d5cb59bfd42d2f019d976a4fb3f1597cc1df9637fbfe2c1e8358c16bb3070cd7f9c236187bb81115b6dff4ca2fe08ecc7556519e7b5534963a37c003cae3a14899dada86d75eb3c912a79da91d8d63c3f69e7dc3f495bfa8bc05e946f6b7a5e3544089c4f66d976fc6eb55f29b85964365e797249e7382d6b36e799ac77bedb6b5a5a29158728cd21c52bb24a5cbc2ad8cb7832f804942a3f72d11c1a649173d66eddec98a883c469793f1af3cd887ffa3db9ed03881cc8b793b6cf24086ad1b9ef7f3915c40b66e275bd199b361d02e1255c852057c79459a13a04adab8a0449ed5c6927dcb96eda2e27a2b07baccc222ab0231b87e31f621e20499663aa58142481bcfc605ea15f243c1d693606e234aba0f9e8efe0bfa6d7dc8f7347a62355dedb7875c905e031ddb69ebf977d8b39e3836e0d0ab0cfff64baec96a5ffeff0e7934466e4c0f9ab976c555196da94641374b9bc87f5de5d40b2a5b8b1d76010698da1feea8de3c63993dd3c7dd8afdd609ff496e5884aec2e133a4f85f1720bce5e5e989cfe13fdbc24cfddc79b28c51288642bea650af2d63cfc59163b75f044744502dc8d3f868908b19a4804e51423b47da84bce5975e9f0b63d2ee78215470657d978c5f978142535ae2b0aafebaea0b88690c8dce01c85e54f6baa2d218787bd0e18f575e7c8603e88d9989e3638bee87d37439f61b695ffd98bb282907c99b31577f563beb31817cd66fd0adefa057749671d1e28ed46f01d2787cabd09ad152b7251117a9c761cbc9001a225ca6ecbdaa8528f42225666a3b841a4e190466d32f94a3eb2f0669be4898ce9b0e2ba803db4c3f02fbf7964f1948281edb1ee6a361304c3da0bfca95c50a4cd8c9c7849c18627588ec41f93b7b1b85e76ac252feaf74315a0ce98343b299e7cc2747a4a279c9fcb45c09e3d892646c5a6aa90a74e9a726c09017133cfb6572999c0cb55f40b3fdfbcc98f5cfc84e0cb4aeea65690732b61d35316069bcfd95801b6b0f9fec984a0e097786a6d59d7486f24245f2784d95f2254f5478d1a87eafffbb6970bd403b93c9cf322f97e25632efacf8151&lt;/script&gt;
  &lt;div class=&quot;hbe hbe-content&quot;&gt;
    &lt;div class=&quot;hbe hbe-input hbe-input-default&quot;&gt;
      &lt;input class=&quot;hbe hbe-input-field hbe-input-field-default&quot; type=&quot;password&quot; id=&quot;hbePass&quot;&gt;
      &lt;label class=&quot;hbe hbe-input-label hbe-input-label-default&quot; for=&quot;hbePass&quot;&gt;
        &lt;span class=&quot;hbe hbe-input-label-content hbe-input-label-content-default&quot;&gt;Password Required.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&quot;/lib/hbe.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;/css/hbe.style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Authenticaiton Failed." data-whm="Authentication Error.">  <script id="hbeData" type="hbeData" data-hmacdigest="44572bc07f761f3bf85b8fdeb45ac96428429afa5a0e67db4098a235414b9289">d0a85b87d15f1a8b510d453efbe23a816a2bae31f869971c2996f375ce4102c5782e0ffdb18777aec83df1c73724b4e2f5e4366745b6a9ad03f0f1d24ba7ce76cd3d061d7e36c83f1f02eb32bbeb13777482be53cb11ed76911431885ec423f3211960926b6478689b597fba074bea67165120024d3baf204052b0fd094684d8470829b494c5fd7c37c26a98fe0124bef218b29d728c9e5ba89a3eacb5e22ed9da771f58eb1edbfb431cc81b82e82c1315b1c5c8ff454a2efa2b9dc58964bcd145f0e8c2899f65bcdfa1a54348853fae69be0a43a33b9d46cf247ecd28d5c792acf09c10a371194225e38f4a669f9133adc5beb902ccabed7720831c8fa43afe90045437f633e6f49a692285fa52367352ccd68cf92c4cf00d88d3733e46e96fbd4a912a002dc679acdf1f457f7bef23ffdc2653cc6d383cc0ff2c8b281fbbc7e9fd779d80c72c6009d86285bcca52e7f0219aa94da1536161f6909a5a8557d0db5a81e2492fb4e3bb8da086552021816398ed6a80f0658af5866b1fcbe4d4a1f1776886e1838e01db96c399796f2bb515f5d644d100c220c17dbc63673025633e03b6ce2ee8e58d755c4baf4b89a77cfe1cd28763828bc5ca3ab68613127d7de54ba4841f6b938c2d36f8e1ba21af9fe9dd643d24405cfd451cea7fb7687bb4666b5bcd17ceb90ca2a8c937676e2396d81900865ac2f79c99a260d5ce13a0ba7df7f20f7930bb467df3f0f5f2689a8537ef5ee0f09cc068ee2c92f789f084ea406347f57ccf131474b0a5f2eb5b799231f16241e0ed8a965a7e2300d13fde57cfa30e10a0e0ef74055f77718e8a90f1e3568ae26c4206036b6ca8e34dd9fc645127865780bc5bdea72edcf4034763e00051999dc9fd8df484992774c2c8ea859744119e00a9f7c48430f1f59c8a778902236751c1d83e97605d05ad81fcad28cea6ea4541f0d5d540ac17ebca34b21e6b43dbc284a8bce70283f7c4919b454164a02d9508c13c01a81ec9b623ec5fccfb5a995c39047c89fe30d46db9f3d92297e931eb011384c3ea434cb87613d36b65f19201a4f80f088a75ff2b3b20ebb31436ab80318bb0ef6a22ae7ae11f9235d1d066295960c7fbdda95f6ebd23137ab73667217b7d044f8548269a7055f6e6cab6c904087d024ac93bdb3b568b39205fb94bdc01f3e934ec12ff58433144e60790f27808cd34302b9368513374087868060a927b1d677a8b488bf4be4c5f85fa3eb9c194f3ced825e03fddab04fca040bf8202ce4daaecfb0230472a9de803608964f4b30af14c36eb794a526d5315d5b125d45512cc6db84aed63bbcff0b8a465c372793a5d38ef19bd0b5645fb052aa8dc6e0203bf90f50f2b9c2130c49969dda03d1f920e7daa47f47594ccf06b819fe8e1cd7b0e2b2ad5ac3f5d189476a62dc727380c181c36969b855f3a77f986869cd508244580c8dd3359e74c0efc44742017359a38775d6db85f54bfbd00646ffbd98450ea48ff39ebf91be1fd6b2fdf4f4eb3785b26a49edc9e69f91f66eb2f081ad93f4d14f1c0347947d65f7ee135d015a080f0cea3e25c6c0a8136aa15f4f9df267ba7065f2ad57c9c92a4329a973462be08167a2270fa0760910765681e15db9088288dd17c2d034499ded62456be3b7273c8e62300a9545975d8ffd4618a9a32e4dceaca5006272b0d5a5b755816347fdf232cc987edd6a83c86d7eecdad51ca3f0d22810bfda2c69a8f790f7a9e8318b4de4dce9b5eb5fe578f9499565c92ea02a108ee2df085df38bdca9e94dbfd2057c0e7c5ab2c8eda05d6fae34ad6ec117d3c098e96d6941dfb8ce12e85da569ec54223dac78a14932b8fec494e2f396e80b5a1a10c76eed16b40b50d63f8d5edacd55d1abb35db8fe3a827496f70b39c3823ace1666837e02bc2e4567a4f0ec4d2ed7fb38f2ab681ff1e3c65cda4bf3d536d07e122d65605197a572b6f6c021aecd9677a4b67904fa6ce5bb5285035da897223cbc59c85a9a89278a3947fa88fbcff22070c643032c921e3abcdcc40970c5d01f862f049bd4122bf9af4a0f98bea7bb2940df425f0da61f92432b309a555de43e4b20bd2e3a78edb5b6c6c5dd7d41af2c944e2bbffafa86d08d993e77b12e0ee7815319f69cf0186a42ffe796590c46ed4877ec4b53dc59e25850eb55f116738553de1eaa7737e9ba1ce2c8363e080e67092d4c7d54a7845e749393d415e7be18e1e6d34484a62a06b099e2952d96f508b666cf2686ca7d5002b809cfc1c41b93c84ff0bc24c1b40ac626315ddab1d3f05c96cd9f1d007b3d75a1073683e0db90061716cfb0583db5d32c636b51655af468ebf66b1fb0a579e90af80e4b87847843cc0f0c3ba720359eb994687805744962c5f3b49d135cc2e2c3369d6d10734eba3c3357c614f22278cea1c25a2ef389623d02c2adf81362270547106c4b230949ee45677125cea0693d56f16864d60c286f17392babb1fe6e524b727a40ceed87643e535be73ba6a97b5e77d9ae55771381acc65ba0e006f2c5e1963ecc96a5b64c4880512957b9f2842d6859e9f4de30a2bf53dac7d71205695a7602731899a573e26fb6b25ec396f31a9c888cb56462882551fd2687a7552eeb22b3671d5e86bec1994ca270339fb626ab4167485746b9f333afdd335957e1ccd7dae79946fe41371180492133058d0ecac74870cd84fa231d550d26c8520de640b8f4862dd4a06419b618b75060847dbc8142851ee5c379c9f5219a96190ec72561e6dba6f83b5dc512fd4643a657d413016c055989c4d5fc581591cde7cd92b2ac3f58484aa6b9fa8aa601a0081fc54eca5ca7d8c76ec3329476638cdc63229e151c4be6d5ca62d5cb59bfd42d2f019d976a4fb3f1597cc1df9637fbfe2c1e8358c16bb3070cd7f9c236187bb81115b6dff4ca2fe08ecc7556519e7b5534963a37c003cae3a14899dada86d75eb3c912a79da91d8d63c3f69e7dc3f495bfa8bc05e946f6b7a5e3544089c4f66d976fc6eb55f29b85964365e797249e7382d6b36e799ac77bedb6b5a5a29158728cd21c52bb24a5cbc2ad8cb7832f804942a3f72d11c1a649173d66eddec98a883c469793f1af3cd887ffa3db9ed03881cc8b793b6cf24086ad1b9ef7f3915c40b66e275bd199b361d02e1255c852057c79459a13a04adab8a0449ed5c6927dcb96eda2e27a2b07baccc222ab0231b87e31f621e20499663aa58142481bcfc605ea15f243c1d693606e234aba0f9e8efe0bfa6d7dc8f7347a62355dedb7875c905e031ddb69ebf977d8b39e3836e0d0ab0cfff64baec96a5ffeff0e7934466e4c0f9ab976c555196da94641374b9bc87f5de5d40b2a5b8b1d76010698da1feea8de3c63993dd3c7dd8afdd609ff496e5884aec2e133a4f85f1720bce5e5e989cfe13fdbc24cfddc79b28c51288642bea650af2d63cfc59163b75f044744502dc8d3f868908b19a4804e51423b47da84bce5975e9f0b63d2ee78215470657d978c5f978142535ae2b0aafebaea0b88690c8dce01c85e54f6baa2d218787bd0e18f575e7c8603e88d9989e3638bee87d37439f61b695ffd98bb282907c99b31577f563beb31817cd66fd0adefa057749671d1e28ed46f01d2787cabd09ad152b7251117a9c761cbc9001a225ca6ecbdaa8528f42225666a3b841a4e190466d32f94a3eb2f0669be4898ce9b0e2ba803db4c3f02fbf7964f1948281edb1ee6a361304c3da0bfca95c50a4cd8c9c7849c18627588ec41f93b7b1b85e76ac252feaf74315a0ce98343b299e7cc2747a4a279c9fcb45c09e3d892646c5a6aa90a74e9a726c09017133cfb6572999c0cb55f40b3fdfbcc98f5cfc84e0cb4aeea65690732b61d35316069bcfd95801b6b0f9fec984a0e097786a6d59d7486f24245f2784d95f2254f5478d1a87eafffbb6970bd403b93c9cf322f97e25632efacf8151</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Password Required.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/essay/">雜文</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/f247d9b5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSL</title>
      <link>https://hejueyun.github.io/posts/7f474ad7/</link>
      <guid>https://hejueyun.github.io/posts/7f474ad7/</guid>
      <pubDate>Mon, 06 Dec 2021 10:59:42 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;threats&quot;&gt;&lt;a href=&quot;#threats&quot; class=&quot;headerlink&quot; title=&quot;threats&quot;&gt;&lt;/a&gt;threats&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;On-line &lt;strong&gt;identity theft&lt;/strong&gt; by which credentials or any other valuable information are obtained&lt;ul&gt;
&lt;li&gt;Spoofing/phishing attacks&lt;ul&gt;
&lt;li&gt;tricking users onto the fake website&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS-based attacks&lt;ul&gt;
&lt;li&gt;altering the DomainName-IP address mappings in the DNS server or the entries in a desktop’s Hosts file to direct users to a fraudulent server (also referred to as &lt;strong&gt;pharming&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyloggers&lt;ul&gt;
&lt;li&gt;e.g. a browser helper object that detects changes to URL and logs information when a URL is at a designated credential collection site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Web-Traffic-Security-Requirements&quot;&gt;&lt;a href=&quot;#Web-Traffic-Security-Requirements&quot; class=&quot;headerlink&quot; title=&quot;Web Traffic Security Requirements&quot;&gt;&lt;/a&gt;Web Traffic Security Requirements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Authentication&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;Web authN&lt;/strong&gt; methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorisation&lt;ul&gt;
&lt;li&gt;done by &lt;strong&gt;authorisation decision engine&lt;/strong&gt; in the  web container&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confidentiality and Integrity&lt;ul&gt;
&lt;li&gt;using &lt;strong&gt;SSL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Web-authN&quot;&gt;&lt;a href=&quot;#Web-authN&quot; class=&quot;headerlink&quot; title=&quot;Web authN&quot;&gt;&lt;/a&gt;Web authN&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HTTP basic authentication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With/without SSL.&lt;/li&gt;
&lt;li&gt;Username/password are collected via a browser dialog box, and sent to the web server in the HTTP Authentication Header.&lt;br&gt;&lt;strong&gt;Digest(摘要) authentication scheme&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Password is transmitted as an MD5 digest.&lt;/li&gt;
&lt;li&gt;No need to use confidentiality protection.&lt;br&gt;&lt;strong&gt;Form-based authentication&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;With/without SSL.&lt;/li&gt;
&lt;li&gt;Username/password along &lt;strong&gt;with other data&lt;/strong&gt;(区别于basic，可收集更多可用于身份认证信息) are collected via a web application provided login page, and sent to the web server as part of the form data.&lt;br&gt;&lt;strong&gt;Certificate-based authentication&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Must use SSL.&lt;/li&gt;
&lt;li&gt;Can support both client and server authN.&lt;/li&gt;
&lt;/ul&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/7f474ad7/1.jpg&quot; width=&quot;450px&quot;&gt;

&lt;h2 id=&quot;SSL-Secure-Sockets-Layer-安全套接层&quot;&gt;&lt;a href=&quot;#SSL-Secure-Sockets-Layer-安全套接层&quot; class=&quot;headerlink&quot; title=&quot;SSL(Secure Sockets Layer, 安全套接层)&quot;&gt;&lt;/a&gt;SSL(Secure Sockets Layer, 安全套接层)&lt;/h2&gt;&lt;h3 id=&quot;ports&quot;&gt;&lt;a href=&quot;#ports&quot; class=&quot;headerlink&quot; title=&quot;ports&quot;&gt;&lt;/a&gt;ports&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="threats"><a href="#threats" class="headerlink" title="threats"></a>threats</h2><ul><li>On-line <strong>identity theft</strong> by which credentials or any other valuable information are obtained<ul><li>Spoofing/phishing attacks<ul><li>tricking users onto the fake website</li></ul></li><li>DNS-based attacks<ul><li>altering the DomainName-IP address mappings in the DNS server or the entries in a desktop’s Hosts file to direct users to a fraudulent server (also referred to as <strong>pharming</strong>).</li></ul></li><li>Keyloggers<ul><li>e.g. a browser helper object that detects changes to URL and logs information when a URL is at a designated credential collection site.</li></ul></li></ul></li></ul><h2 id="Web-Traffic-Security-Requirements"><a href="#Web-Traffic-Security-Requirements" class="headerlink" title="Web Traffic Security Requirements"></a>Web Traffic Security Requirements</h2><ul><li>Authentication<ul><li>Using <strong>Web authN</strong> methods</li></ul></li><li>Authorisation<ul><li>done by <strong>authorisation decision engine</strong> in the  web container</li></ul></li><li>Confidentiality and Integrity<ul><li>using <strong>SSL</strong></li></ul></li></ul><h3 id="Web-authN"><a href="#Web-authN" class="headerlink" title="Web authN"></a>Web authN</h3><p><strong>HTTP basic authentication</strong></p><ul><li>With/without SSL.</li><li>Username/password are collected via a browser dialog box, and sent to the web server in the HTTP Authentication Header.<br><strong>Digest(摘要) authentication scheme</strong></li><li>Password is transmitted as an MD5 digest.</li><li>No need to use confidentiality protection.<br><strong>Form-based authentication</strong></li><li>With/without SSL.</li><li>Username/password along <strong>with other data</strong>(区别于basic，可收集更多可用于身份认证信息) are collected via a web application provided login page, and sent to the web server as part of the form data.<br><strong>Certificate-based authentication</strong></li><li>Must use SSL.</li><li>Can support both client and server authN.</li></ul><img loading="lazy" src="/posts/7f474ad7/1.jpg" width="450px"><h2 id="SSL-Secure-Sockets-Layer-安全套接层"><a href="#SSL-Secure-Sockets-Layer-安全套接层" class="headerlink" title="SSL(Secure Sockets Layer, 安全套接层)"></a>SSL(Secure Sockets Layer, 安全套接层)</h2><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><ul><li>Https<ul><li>443/tcp</li><li>http protocol over ssl/tls</li></ul></li></ul><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><ul><li>SSL Handshake Protocol<ul><li>negotiation of security algorithms and parameters</li><li>key exchange</li><li>server authentication and optionally client authentication</li></ul></li><li>SSL Change Cipher Spec Protoc<ul><li>a single message that indicates <strong>the end of the SSL handshake</strong></li></ul></li></ul><img loading="lazy" src="/posts/7f474ad7/2.png" width="500px"><blockquote><ul><li>an SSL session is an association between a client and a server</li><li>the session state includes <strong>security algorithms</strong> and <strong>parameters</strong></li><li>a session may include multiple secure connections between the same client and server</li><li>connections of the same session share the session state</li><li><strong>sessions are used to avoid expensive negotiation of new security parameters for each connection</strong></li></ul></blockquote><img loading="lazy" src="/posts/7f474ad7/5.jpg" width="500px"><h3 id="SSL-Record-protocol"><a href="#SSL-Record-protocol" class="headerlink" title="SSL Record protocol"></a>SSL Record protocol</h3><img loading="lazy" src="/posts/7f474ad7/3.jpg" width="500px"><ul><li>Content Type (8 bits)<ul><li>Application_data </li><li>Handshake </li><li>Change_cipher_spec <ul><li>indicates a change in the encryption and authentication of records</li></ul></li><li>Alert</li></ul></li><li>Major Version (8 bits)</li><li>Minor Version (8 bits)<ul><li>the length in bytes of plaintext fragment (or compressed fragment if compression is used).  </li></ul></li></ul><h3 id="SSL-ChangeCipherSpec-protocol"><a href="#SSL-ChangeCipherSpec-protocol" class="headerlink" title="SSL ChangeCipherSpec protocol"></a>SSL ChangeCipherSpec protocol</h3><ul><li>it causes a pending state to be the current state</li><li>1 byte</li></ul><h3 id="SSL-Alert-protocol"><a href="#SSL-Alert-protocol" class="headerlink" title="SSL Alert protocol"></a>SSL Alert protocol</h3><ul><li>Errors are signalled via Alert Protocol</li><li>it is used to convey SSL-related alerts to the peer entity.</li><li>2 bytes</li></ul><h3 id="SSL-Handshake-Protocol"><a href="#SSL-Handshake-Protocol" class="headerlink" title="SSL Handshake Protocol"></a>SSL Handshake Protocol</h3><ul><li>negotiate a common cipher suite;</li><li>authenticate the server;</li><li>(optionally) authenticate the client;</li><li>establish cryptographic keys;</li></ul><img loading="lazy" src="/posts/7f474ad7/4.jpg" width="500px"><ul><li>Type (1 byte)</li><li>Length (3 bytes)</li><li>Content (≥ 0 bytes)</li></ul><h4 id="Client-hello-message"><a href="#Client-hello-message" class="headerlink" title="Client hello message"></a>Client hello message</h4><p>– client_version</p><ul><li>the highest version supported by the client<br>– client_random</li><li>current time (4 bytes) + pseudo random bytes (28 bytes)<br>– session_id</li><li>empty if the client wants to create a new session, or</li><li>the session ID of an old session within which the client wants to create the new connection<br>– cipher_suites</li><li>list of cryptographic options supported by the client ordered by preference</li><li>a cipher suite contains the specification of the<br>– <code>key exchange method</code>(Key establishment algorithms), the <code>encryption</code>(Symmetric encryption algorithms) and the <code>MAC algorithm</code><br>– the <code>algorithms implicitly specify the hash_size, IV_size, and key_material parameters</code> (part of the Cipher Spec of the session state)</li><li><code>KeyExchange_with_SymmetricEncryption_hash</code><ul><li>exmaple: <code>SSL_RSA_with</code>_<code>3DES_EDE</code>_<code>CBC</code>_<code>SHA</code><br>– compression_methods</li></ul></li><li>list of compression methods supported by the client</li></ul><h4 id="Server-hello-message"><a href="#Server-hello-message" class="headerlink" title="Server hello message"></a>Server hello message</h4><ul><li>server_version</li><li>server_random</li><li>session_id<ul><li>session ID chosen by the server</li></ul></li><li>cipher_suite<ul><li>single cipher suite <strong>selected by the server from the list given by the client</strong></li></ul></li><li>compression_method</li></ul><h4 id="Supported-key-exchange-methods"><a href="#Supported-key-exchange-methods" class="headerlink" title="Supported key exchange methods"></a>Supported key exchange methods</h4><p>With regard to the exchange of <code>pre_master_secret</code>(<strong>not</strong> <code>master_key</code>), the following methods are supported</p><ul><li>RSA<ul><li>client generates a 48-byte pre_master_secret and encrypts it with server�s public key</li></ul></li><li>fixed Diffie-Hellman</li><li>ephemeral Diffie-Hellman</li><li>anonymous Diffie-Hellman</li><li>…</li></ul><h3 id="Server-authentication-vs-Client-authentication"><a href="#Server-authentication-vs-Client-authentication" class="headerlink" title="Server authentication vs Client authentication"></a>Server authentication vs Client authentication</h3><p>certificate</p><ul><li>S: required for every key exchange method except for anonymous DH</li><li>C: sent only if requested by the serve</li></ul><h3 id="pre-master-key-vs-maste-key"><a href="#pre-master-key-vs-maste-key" class="headerlink" title="pre master key vs maste key"></a>pre master key vs maste key</h3><p>Simplified SSLv3/TLS</p><img loading="lazy" src="/posts/7f474ad7/7.jpg" width="500px"><p><code>pre-master secret</code></p><ul><li>The point of a premaster secret is to provide greater consistency between TLS cipher suites</li><li>In the figure above, the premaster secret is <strong>S</strong>(in message 3). In this case, it is randomly generated.<br><code>master secret</code></li><li>In the figure above, the master secret is <strong>K</strong>. Shown on the sides, it is a function of the pre-master secret and the two random values sent in the first two messages.<br><code>shared secret / session key</code></li><li>This is what is referred to in the last step of the figure. The session key is referred to as “keys derived from K”. Many keys are actually derived from K. This could be the encryption key, integrity protection keys (for say HMAC), IVs for the ciphers, etc. And, it is usually a different set for each direction.</li></ul><img loading="lazy" src="/posts/7f474ad7/8.png" width="500px"><h3 id="Server-Authentication"><a href="#Server-Authentication" class="headerlink" title="Server Authentication"></a>Server Authentication</h3><ul><li>Server sends client its digital certificate (or certificate chain)</li><li>Client<ul><li>verifies the certificate, extracts its RSA public key</li><li>generates a 48-bytes pre_master_secret, encrypts it using this public key and sends the ciphertext to the server</li><li>Client and server independently compute the key block - MAC keys, encryption keys, IVs - from the pre_master_secret (+ another two random numbers)</li></ul></li></ul><h3 id="Data-transfer"><a href="#Data-transfer" class="headerlink" title="Data transfer"></a>Data transfer</h3><img loading="lazy" src="/posts/7f474ad7/9.jpg" width="500px"><ul><li>the data is broken and transmitted as a series of protected records.<ul><li>Everything can be protected excepts the fact that a particular browser is talking to a particular server</li></ul></li><li>Data transfer is done by using the <strong>Record protocol</strong></li><li>It is used to exchange application layer (e.g. SSL Handshake Protocol or HTTP) data</li><li>At sending side, application messages are<ul><li>fragmented into blocks (called records);</li><li>(optionally) compressed;</li><li>appended by a MAC;</li><li>then encrypted;</li><li>appended with the SSL Record Header and transmitted.</li></ul></li><li>At receiving side, records are<ul><li>received and decrypted;</li><li>MAC is verified;</li><li>decompressed and reassembled; and</li><li>delivered to the application protocol</li></ul></li></ul><h3 id="Session-states"><a href="#Session-states" class="headerlink" title="Session states"></a>Session states</h3><table><thead><tr><th>Session identifier</th><th>Arbitrary(<a href>任意</a>) byte sequence chosen by server to identify the session state</th></tr></thead><tbody><tr><td>Peer certificate</td><td>X509.v3 certificate of the peer (may be null)</td></tr><tr><td>Compression method</td><td>Algorithm used to compress data prior to encryption</td></tr><tr><td>Cipher spec</td><td>Specifies bulk data encryption (null, DES, AES, etc) and hash algorithms used for encryption and MAC calculation; other attributes, eg. hash_size, may also be included</td></tr><tr><td>Master secret</td><td>48 byte secret shared between the client and server</td></tr><tr><td>IsResumable</td><td>Indicates whether the session can be used to initiate new connections</td></tr></tbody></table><h3 id="Connection-state"><a href="#Connection-state" class="headerlink" title="Connection state"></a>Connection state</h3><table><thead><tr><th>server and client random</th><th>random byte sequences chosen by the server and the client for every connection</th></tr></thead><tbody><tr><td>server write MAC secret</td><td>secret key used in MAC operations on data sent by the server</td></tr><tr><td>client write MAC secret</td><td>secret key used in MAC operations on data sent by the client</td></tr><tr><td>server write key</td><td>secret encryption key for data encrypted by the server</td></tr><tr><td>client write key</td><td>secret encryption key for data encrypted by the client</td></tr><tr><td>initialization vectors</td><td>an IV is maintained for each encryption key if CBC mode is used. initialized by the SSL Handshake Protocol. final ciphertext block from each record is used as IV with the following record</td></tr><tr><td>sending and receiving sequence numbers</td><td>sequence numbers are 64 bits long. reset to zero after each Change Cipher Spec message</td></tr></tbody></table><h2 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h2><p>Eavesdropping</p><ul><li>all application data is encrypted with a short term connection key<ul><li>even if connection keys are compromised the master secret remains intact</li></ul></li><li>different keys are used in each connection and in each direction of the connection<br>Traffic analysis</li><li><strong>SSL doesn’t attempt to protect against traffic analysis</strong></li><li>if SSL is used to protect HTTP traffic, then an attacker<ul><li>can learn the length of a requested URL</li><li>can learn the length of the HTML data returned</li><li>could find out which URL was requested with high probability</li></ul></li><li>Replay attacks<ul><li>SSL protects against replay attacks by including an implicit（隐式的） sequence number in the MAC computation</li></ul></li><li>Padding oracle attack (reminder)<ul><li>SSL uses a HMAC-like MAC</li><li>CBC encryption with padding in SSL/TLS<ul><li>if the last byte is n, then verify if the last n+1 bytes are all n</li></ul></li><li>更多可参考: 加密算法与随机数</li></ul></li><li>Key-exchange algorithm rollback</li></ul><img loading="lazy" src="/posts/7f474ad7/6.jpg" width="500px"><ul><li>a fix:<ul><li>hash all messages exchanged before the server_key_exchange<br>message</li><li>include the hash in the signature in server_key_exchange message</li></ul></li></ul><h2 id="Identification-vs-Verification-vs-Authentication"><a href="#Identification-vs-Verification-vs-Authentication" class="headerlink" title="Identification vs Verification vs Authentication"></a>Identification vs Verification vs Authentication</h2><blockquote><ul><li>Identification: I claim to be someone.</li><li>Verification: You verify that I am that person by validating my official ID documents. You pair <strong>my</strong> valid ID with one of <strong>my</strong> biometrics. </li><li>Authentication: I access your platform and you compare <strong>my</strong> current, live identity to the biometrics of me <strong>you already have</strong> on file.</li></ul></blockquote><h2 id="TSL-vs-SSL"><a href="#TSL-vs-SSL" class="headerlink" title="TSL vs SSL"></a>TSL vs SSL</h2><p>version number<br>– for TLS 1.1 the version number is 3.2<br>cipher suites<br>– TLS doesn’t support Fortezza key exchange and Fortezza encryption<br>padding<br>– variable length padding is allowed (max 255 padding bytes)<br>MAC<br>– TLS uses the latest version of HMAC<br>– the MAC covers the version field of the record header too<br>certificate_verify message<br>– in SSL, the hash contains the master_secret<br>– in TLS, the hash is computed only over the handshake messages<br>more alert codes</p><h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><ul><li>网络小知识-1</li><li>加密算法与随机数</li><li><a href="http://www.hit.bme.hu/~buttyan/courses/BMEVIHIM132/2010/10_ssl-tls.pdf">Secure Socket Layer (SSL) - BME-HIT</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/7f474ad7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>防火墙</title>
      <link>https://hejueyun.github.io/posts/9c75190f/</link>
      <guid>https://hejueyun.github.io/posts/9c75190f/</guid>
      <pubDate>Sun, 05 Dec 2021 22:58:57 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;network access policy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default-deny principle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data Formats&lt;/p&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/9c75190f/1.png&quot; width=&quot;500px&quot;&gt;

&lt;p&gt;Network attacks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port scanning&lt;/li&gt;
&lt;li&gt;IP spoofing &lt;/li&gt;
&lt;li&gt;Packet sniffing&lt;blockquote&gt;
&lt;p&gt;Normally, NIC only picks up packets destined to this MAC address. But, if the NIC card is set to promiscuous mode(混杂模式), then all the packets on the channel will be picked up&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;DoS (Denial of Service) attacks&lt;ul&gt;
&lt;li&gt;smurf attack (大量icmp echo Request, ping)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Stateless-Firewall-无状态防火墙&quot;&gt;&lt;a href=&quot;#Stateless-Firewall-无状态防火墙&quot; class=&quot;headerlink&quot; title=&quot;Stateless Firewall(无状态防火墙)&quot;&gt;&lt;/a&gt;Stateless Firewall(无状态防火墙)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Filtering rules (network access policy) are defined based on source/dest addresses, source/dest ports, and &lt;strong&gt;TCP flags&lt;/strong&gt; (SYN/ACK).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img loading=&quot;lazy&quot; src=&quot;/posts/9c75190f/2.png&quot; width=&quot;500px&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>network access policy</p><ul><li>default-deny principle</li></ul><p>Data Formats</p><img loading="lazy" src="/posts/9c75190f/1.png" width="500px"><p>Network attacks</p><ul><li>Port scanning</li><li>IP spoofing </li><li>Packet sniffing<blockquote><p>Normally, NIC only picks up packets destined to this MAC address. But, if the NIC card is set to promiscuous mode(混杂模式), then all the packets on the channel will be picked up</p></blockquote></li><li>DoS (Denial of Service) attacks<ul><li>smurf attack (大量icmp echo Request, ping)</li></ul></li></ul><h2 id="Stateless-Firewall-无状态防火墙"><a href="#Stateless-Firewall-无状态防火墙" class="headerlink" title="Stateless Firewall(无状态防火墙)"></a>Stateless Firewall(无状态防火墙)</h2><blockquote><p>Filtering rules (network access policy) are defined based on source/dest addresses, source/dest ports, and <strong>TCP flags</strong> (SYN/ACK).</p></blockquote><img loading="lazy" src="/posts/9c75190f/2.png" width="500px"><h2 id="Stateful-Dynamic-Packet-Filtering-Firewalls-状态防火墙"><a href="#Stateful-Dynamic-Packet-Filtering-Firewalls-状态防火墙" class="headerlink" title="Stateful (Dynamic Packet Filtering) Firewalls (状态防火墙)"></a>Stateful (Dynamic Packet Filtering) Firewalls (状态防火墙)</h2><blockquote><p>Stateful firewalls filter packets based on the full context of a session</p></blockquote><img loading="lazy" src="/posts/9c75190f/3.png" width="500px"><h3 id="Stateless-vs-Stateful"><a href="#Stateless-vs-Stateful" class="headerlink" title="Stateless vs Stateful"></a>Stateless vs Stateful</h3><blockquote><ul><li>stateful firewalls are more vulnerable to DDoS (Distributed Denial of Service) attacks due to the intense computational and storage resources they require</li><li> Stateless firewalls offer higher throughput and lower cost, but a lower level of security</li></ul></blockquote><h2 id="NAT-Network-Address-Translation"><a href="#NAT-Network-Address-Translation" class="headerlink" title="NAT (Network Address Translation)"></a>NAT (Network Address Translation)</h2><blockquote><ul><li>Network Address Translation (NAT) simply rewrites Source and/or Dest addresses.</li><li>Port Address Translation (PAT) allows multiple hosts to share a single IP address via port mapping</li><li>PAT can be considered as a subset of NAT, and NAT is often used generically to mean all forms of NAT/PAT.</li><li>By using NAT, multiple hosts can share a single (or limited) IP address space </li></ul></blockquote><p><img loading="lazy" src="/posts/9c75190f/4.gif"></p><h2 id="Firewall-Complications-Problems"><a href="#Firewall-Complications-Problems" class="headerlink" title="Firewall Complications/ Problems"></a>Firewall Complications/ Problems</h2><ul><li>IP Fragmentation DoS attack<blockquote><p><strong>Reassembly (defragmentation)</strong> can only take place when all fragments are in. UDP/ICMP-based fragmentation attacks usually submit fake fragments that cannot be defragmented. <strong>Temporary storage</strong> of the fragments takes up memory and, in the worst-case scenario, may exhaust the available memory resources.</p><hr><ul><li>In other words, the 110 ICMP packet is broken into 5 fragments, with total lengths of 40, 40, 40, 40 and 30 bytes respectively (the ICMP data is broken into lengths of 12, 20, 20, 20, and 10 bytes each).</li><li>From 2nd Fragment onwards, each fragment contains an IP header BUT no ICMP header.This type of fragments can easily sneak through a stateless firewall. For example, for a stateless packet filter that blocks inbound ICMP echo request, upon seeing the first fragment, it will drop it, whereas the rest of the fragments will creep through successfully.</li></ul></blockquote><ul><li>可以通过：Create a list containing the Identifier (SA/DA/PROT/ID) of this fragment (zero-offset packet) + filtering decision， 但会导致<strong>Overlapping Fragment attack</strong></li></ul></li><li>Overlapping Fragment attack<blockquote><p>A TCP-based fragmentation attack (also known as teardrop), however, is usually directed against the defragmentation mechanisms of the target systems or security components. Overlapping packets are sent that, in extreme cases, may lead to the target system freezing up, depending on the operating system.</p><p> Overlapping fragments may also be used in an attempt to bypass Intrusion Detection Systems. In this exploit, part of an attack is sent in fragments along with additional random data; future fragments may overwrite the random data with the remainder of the attack. If the completed packet is not properly reassembled at the IDS, the attack will go undetected</p></blockquote></li></ul><img loading="lazy" src="/posts/9c75190f/5.png" width="500px"><ul><li>DF bit is set to 0 (meaning “May Fragment”)</li><li>MF bit is set to 0 (meaning “Last Fragment”)</li></ul><h3 id="Countermeasure-–-Proxy-Firewall"><a href="#Countermeasure-–-Proxy-Firewall" class="headerlink" title="Countermeasure – Proxy Firewall"></a>Countermeasure – Proxy Firewall</h3><blockquote><p>A proxy firewall, also called “application-level gateway”, filter traffic at the application layer; it performs deeper packet inspections than the network layer firewalls.</p><ul><li>With a proxy-aware router, client’s request is intercepted(拦截) and directed to a proxy server</li><li>在接收到HTTP请求后，代理服务器代表用户打开一个到目标Web服务器的新的HTTP连接(只有当请求与服务器上配置的安全策略匹配时才完成此步骤);代理还将响应转发回用户</li></ul></blockquote><h4 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h4><p>Pros</p><ul><li>可以执行更严格的安全策略。</li><li>可以更有效地执行数据记录。</li><li>允许网络缓存来提高连接性能。</li></ul><p>Cons</p><ul><li>如果没有缓存和适当的缓存管理，会对用户感知的性能产生重大影响。</li><li>当添加新的应用程序时，需要为应用网关开发新的代理服务器。</li><li>因为所有的请求都是通过代理服务器传输的，所以它可能是一个<strong>单点故障</strong>。</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><strong>Screening router</strong>(筛选路由器)</p><ul><li>router和filter一体化</li><li>low cost</li></ul><p><strong>Dual-homed Host</strong>(双宿主)</p><blockquote><p>To use a dual-homed host as a firewall, the routing function is disabled – this is the fundamental difference between this architecture and the screening router.</p><p>Hosts on internal net can not talk directly to the hosts on the Internet, and vice versa; they must do so via proxy.</p><p>Two ways to communicate with the Internet: proxying, or direct log into the Dual-homed host.</p></blockquote><ul><li>耗费更大、单点故障</li></ul><p><strong>Screened/Bastion Host</strong>(堡垒主机)</p><img loading="lazy" src="/posts/9c75190f/6.png" width="500px"><ul><li>筛选路由器的配置使得堡垒主机是内部网络上唯一在互联网上可见的系统（堡垒机的意义就在于托管需要被外网可见的服务）</li><li>two levels of protection<ul><li>primary security: provided by screening router</li><li>secondary security: provided by proxying via Bastion Host</li></ul></li></ul><p><strong>Screened Subnet</strong></p><blockquote><p>It adds an extra layer of security to the screened host architecture by adding a perimeter network that further isolates the internal network from the Internet</p></blockquote><img loading="lazy" src="/posts/9c75190f/7.png" width="500px"><ul><li>Perimeter network(边缘网络)<ul><li>如果有人闯入周界网络上的堡垒主机，他们将只能窥探周界网络上的流量，内部网络上的流量受到保护</li></ul></li><li>An exterior filtering router is to protect both perimeter/internal nets from<br>the Interne<ul><li>Intrusion detection and auditing should be incorporated at network perimeter points</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>strengths</p><ul><li>控制访问</li><li>保护隐私</li><li>审计流量与数据<br>drawbacks</li><li>无法保护内部恶意人士or内部主机跳板</li><li>不正确or不全面的配置将导致不安全</li></ul><h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><ul><li>信安小知识-8</li><li>iptables实验</li></ul>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/9c75190f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>模糊测试笔记</title>
      <link>https://hejueyun.github.io/posts/e6591ea9/</link>
      <guid>https://hejueyun.github.io/posts/e6591ea9/</guid>
      <pubDate>Thu, 25 Nov 2021 23:01:03 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;In the academic world, fuzzing can be most closely related to boundary value analysis (BVA), where you look at the range of known good values for a particular input and create test values that straddle the boundary cases of known good and bad values.&lt;/p&gt;
&lt;p&gt;It is typically an &lt;strong&gt;automated&lt;/strong&gt; or &lt;strong&gt;semiautomated&lt;/strong&gt; process that involves repeatedly manipulating and supplying data to target software for processing. All fuzzers fall into one of two categories: &lt;strong&gt;mutation-based fuzzers&lt;/strong&gt;(变异测试), which apply mutations on existing data samples to create test cases, and &lt;strong&gt;generation-based fuzzers&lt;/strong&gt;(生成测试), which create test cases from scratch by modeling the target protocol(协议) Or file format(文件格式). &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;边界值分析（boundary-value-analysi）&quot;&gt;&lt;a href=&quot;#边界值分析（boundary-value-analysi）&quot; class=&quot;headerlink&quot; title=&quot;边界值分析（boundary value analysi）&quot;&gt;&lt;/a&gt;边界值分析（boundary value analysi）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;BVA is another Black Box Test Design Technique, which is used to find the errors at boundaries of input domain (tests the behavior of a program at the input boundaries) rather than finding those errors in the centre of input. So, the basic idea in boundary value testing is to select input variable values at their: minimum, just above the minimum, just below the minimum, a nominal value, just below the maximum, maximum and just above the maximum. &lt;/p&gt;
&lt;p&gt;That is, for each range, there are two boundaries, the &lt;strong&gt;lower boundary&lt;/strong&gt; (start of the range) and the &lt;strong&gt;upper boundary&lt;/strong&gt; (end of the range) and the boundaries are the beginning and end of each &lt;strong&gt;valid partition&lt;/strong&gt;. We should design test cases which exercise the program functionality at the boundaries, and with values just inside and outside the boundaries. Boundary value analysis is also a part of stress and negative testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suppose, if the input is a set of values between A and B, then design test cases for A, A+1, A-1 and B, B+1, B-1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;阶段（FUZZING-PHASES）&quot;&gt;&lt;a href=&quot;#阶段（FUZZING-PHASES）&quot; class=&quot;headerlink&quot; title=&quot;阶段（FUZZING PHASES）&quot;&gt;&lt;/a&gt;阶段（FUZZING PHASES）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Identify target&lt;ol&gt;
&lt;li&gt;确定目标先于选择模糊测试工具&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Identify inputs&lt;ol&gt;
&lt;li&gt;Virtually all exploitable vulnerabilities are caused by applications accepting user input and processing that data without first sanitizing it or applying validation routines. Enumerating &lt;strong&gt;input vectors&lt;/strong&gt;（枚举输入向量） is pivotal to the success of fuzzing.&lt;/li&gt;
&lt;li&gt;Anything sent from the client to the target should be considered an input vector. That includes &lt;strong&gt;headers, filenames, environment variables, registry keys&lt;/strong&gt;, and so on. All should be considered input vectors and are therefore potential fuzz variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Generate fuzzed data &lt;strong&gt;（automation）&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;设计输入的值？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Execute fuzzed data &lt;strong&gt;（automation）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Monitor for exceptions（异常）&lt;/li&gt;
&lt;li&gt;Determine exploitability&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;LIMITATIONS-AND-EXPECTATIONS&quot;&gt;&lt;a href=&quot;#LIMITATIONS-AND-EXPECTATIONS&quot; class=&quot;headerlink&quot; title=&quot;LIMITATIONS AND EXPECTATIONS&quot;&gt;&lt;/a&gt;LIMITATIONS AND EXPECTATIONS&lt;/h3&gt;&lt;p&gt;we present several classes of vulnerabilities that typically go &lt;strong&gt;undiscovered&lt;/strong&gt; by a fuzzer&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ACCESS CONTROL FLAWS(缺陷)&lt;ol&gt;
&lt;li&gt;fuzzer does not have an understanding of the logic of the program. There is no way for the fuzzer to know that the admin area should not be accessible to a regular user.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;POOR DESIGN LOGIC&lt;ol&gt;
&lt;li&gt;从超出程序设计预期的的地方产生的攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BACKDOORS&lt;ol&gt;
&lt;li&gt;For a fuzzer, with limited or no information about the structure of a target application, a backdoor is seen no differently than any other target logic, such as a login screen. &lt;strong&gt;Both are simply input vectors receiving authentication credentials.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;输入密码时，恶意字符可以被fuzzer发现，但硬编码密码（hard-core password）则不行&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;MEMORY CORRUPTION&lt;ol&gt;
&lt;li&gt;Consider, for example, a format string vulnerability that could go undetected without attaching with a debugger to the target process.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;MULTISTAGE VULNERABILITIES&lt;ol&gt;
&lt;li&gt;Complex attacks Often involve leveraging several vulnerabilities in succession to compromise a machine. Fuzzing might be useful for identifying the individual flaws but will not generally be valuable for chaining together a series of minor(&lt;code&gt;/ˈmʌɪnə/&lt;/code&gt;) vulnerabilities or otherwise uninteresting events to identity a multivector attack.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>In the academic world, fuzzing can be most closely related to boundary value analysis (BVA), where you look at the range of known good values for a particular input and create test values that straddle the boundary cases of known good and bad values.</p><p>It is typically an <strong>automated</strong> or <strong>semiautomated</strong> process that involves repeatedly manipulating and supplying data to target software for processing. All fuzzers fall into one of two categories: <strong>mutation-based fuzzers</strong>(变异测试), which apply mutations on existing data samples to create test cases, and <strong>generation-based fuzzers</strong>(生成测试), which create test cases from scratch by modeling the target protocol(协议) Or file format(文件格式). </p></blockquote><h3 id="边界值分析（boundary-value-analysi）"><a href="#边界值分析（boundary-value-analysi）" class="headerlink" title="边界值分析（boundary value analysi）"></a>边界值分析（boundary value analysi）</h3><blockquote><p>BVA is another Black Box Test Design Technique, which is used to find the errors at boundaries of input domain (tests the behavior of a program at the input boundaries) rather than finding those errors in the centre of input. So, the basic idea in boundary value testing is to select input variable values at their: minimum, just above the minimum, just below the minimum, a nominal value, just below the maximum, maximum and just above the maximum. </p><p>That is, for each range, there are two boundaries, the <strong>lower boundary</strong> (start of the range) and the <strong>upper boundary</strong> (end of the range) and the boundaries are the beginning and end of each <strong>valid partition</strong>. We should design test cases which exercise the program functionality at the boundaries, and with values just inside and outside the boundaries. Boundary value analysis is also a part of stress and negative testing.</p><ul><li>Suppose, if the input is a set of values between A and B, then design test cases for A, A+1, A-1 and B, B+1, B-1.</li></ul></blockquote><h2 id="阶段（FUZZING-PHASES）"><a href="#阶段（FUZZING-PHASES）" class="headerlink" title="阶段（FUZZING PHASES）"></a>阶段（FUZZING PHASES）</h2><ol><li>Identify target<ol><li>确定目标先于选择模糊测试工具</li></ol></li><li>Identify inputs<ol><li>Virtually all exploitable vulnerabilities are caused by applications accepting user input and processing that data without first sanitizing it or applying validation routines. Enumerating <strong>input vectors</strong>（枚举输入向量） is pivotal to the success of fuzzing.</li><li>Anything sent from the client to the target should be considered an input vector. That includes <strong>headers, filenames, environment variables, registry keys</strong>, and so on. All should be considered input vectors and are therefore potential fuzz variables.</li></ol></li><li>Generate fuzzed data <strong>（automation）</strong><ol><li>设计输入的值？</li></ol></li><li>Execute fuzzed data <strong>（automation）</strong></li><li>Monitor for exceptions（异常）</li><li>Determine exploitability</li></ol><h3 id="LIMITATIONS-AND-EXPECTATIONS"><a href="#LIMITATIONS-AND-EXPECTATIONS" class="headerlink" title="LIMITATIONS AND EXPECTATIONS"></a>LIMITATIONS AND EXPECTATIONS</h3><p>we present several classes of vulnerabilities that typically go <strong>undiscovered</strong> by a fuzzer</p><ol><li>ACCESS CONTROL FLAWS(缺陷)<ol><li>fuzzer does not have an understanding of the logic of the program. There is no way for the fuzzer to know that the admin area should not be accessible to a regular user.</li></ol></li><li>POOR DESIGN LOGIC<ol><li>从超出程序设计预期的的地方产生的攻击</li></ol></li><li>BACKDOORS<ol><li>For a fuzzer, with limited or no information about the structure of a target application, a backdoor is seen no differently than any other target logic, such as a login screen. <strong>Both are simply input vectors receiving authentication credentials.</strong></li><li>输入密码时，恶意字符可以被fuzzer发现，但硬编码密码（hard-core password）则不行</li></ol></li><li>MEMORY CORRUPTION<ol><li>Consider, for example, a format string vulnerability that could go undetected without attaching with a debugger to the target process.</li></ol></li><li>MULTISTAGE VULNERABILITIES<ol><li>Complex attacks Often involve leveraging several vulnerabilities in succession to compromise a machine. Fuzzing might be useful for identifying the individual flaws but will not generally be valuable for chaining together a series of minor(<code>/ˈmʌɪnə/</code>) vulnerabilities or otherwise uninteresting events to identity a multivector attack.</li></ol></li></ol>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Security/">Security</category>
      
      <category domain="https://hejueyun.github.io/categories/Security/Software-Security/">Software Security</category>
      
      
      <category domain="https://hejueyun.github.io/tags/sec/">sec</category>
      
      
      <comments>https://hejueyun.github.io/posts/e6591ea9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>敏捷与测试驱动开发</title>
      <link>https://hejueyun.github.io/posts/55dff0b9/</link>
      <guid>https://hejueyun.github.io/posts/55dff0b9/</guid>
      <pubDate>Sat, 13 Nov 2021 21:06:44 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Agile-Manifesto（敏捷宣言）&quot;&gt;&lt;a href=&quot;#Agile-Manifesto（敏捷宣言）&quot; class=&quot;headerlink&quot; title=&quot;Agile Manifesto（敏捷宣言）&quot;&gt;&lt;/a&gt;Agile Manifesto（敏捷宣言）&lt;/h2&gt;&lt;h3 id=&quot;4-values&quot;&gt;&lt;a href=&quot;#4-values&quot; class=&quot;headerlink&quot; title=&quot;4 values&quot;&gt;&lt;/a&gt;4 values&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Individuals and interactions over processes and tools（个体和互动高于流程和工具）&lt;/li&gt;
&lt;li&gt;Working software over comprehensive documentation（工作的软件高于详尽的文档）&lt;/li&gt;
&lt;li&gt;Customer collaboration over contract negotiation（客户合作高于合同谈判）&lt;/li&gt;
&lt;li&gt;Responding to change over following a plan（响应变化高于遵循计划）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;12-principles&quot;&gt;&lt;a href=&quot;#12-principles&quot; class=&quot;headerlink&quot; title=&quot;12 principles&quot;&gt;&lt;/a&gt;12 principles&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software(我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意)&lt;ul&gt;
&lt;li&gt;与传统的产品开发方法不同的是，敏捷原则鼓励尽量缩短从构思到发布的时间。尽快将产品送到客户手中。成功地做到这一点，意味着产品经理能够迅速将最小可行产品（minimum viable product, MVP）推出，并利用它来获得真正客户的反馈。这些反馈会被反馈到产品开发过程中，并被用来指导未来的发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage(欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化)&lt;/li&gt;
&lt;li&gt;Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.(经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期)&lt;/li&gt;
&lt;li&gt;Business people and developers must work together daily throughout the project(业务人员和开发人员必须相互合作，项目中的每一天都不例外)&lt;/li&gt;
&lt;li&gt;Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done(激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标)&lt;/li&gt;
&lt;li&gt;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.(不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈)&lt;/li&gt;
&lt;li&gt;Working software is the primary measure of progress(可工作的软件是进度的首要度量标准)&lt;ul&gt;
&lt;li&gt;完美的、详细的文档对于工作中的软件来说是次要的。这种心态促使我们迅速将产品推向市场，而不是让文档或 “不完美就不算完成 “的心态成为一个瓶颈。衡量成功的最终标准是一个客户喜爱的工作产品。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely(敏敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同维持其步调稳定延续)&lt;/li&gt;
&lt;li&gt;Continuous attention to technical excellence and good design enhances agility.(坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强)&lt;/li&gt;
&lt;li&gt;Simplicity–the art of maximizing the amount of work not done–is essential.(以简洁为本，它是极力减少不必要工作量的艺术)&lt;/li&gt;
&lt;li&gt;The best architectures, requirements, and designs emerge from self-organizing teams(最好的架构、需求和设计出自自组织团队)&lt;/li&gt;
&lt;li&gt;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. (团队定期地反思如何能提高成效，并依此调整自身的举动)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Test-driven development is a practice commonly used by agile development teams, but it is not a core principle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;YAGNI”-You-Ain’t-Gonna-Need-It&quot;&gt;&lt;a href=&quot;#YAGNI”-You-Ain’t-Gonna-Need-It&quot; class=&quot;headerlink&quot; title=&quot;YAGNI” (You Ain’t Gonna Need It)&quot;&gt;&lt;/a&gt;YAGNI” (You Ain’t Gonna Need It)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The YAGNI principle is about maximising work not done. It states that a feature should only be implemented when it is clear that it is required, and d&lt;strong&gt;evelopers should not implement something on their assumption that it will be&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Agile-development&quot;&gt;&lt;a href=&quot;#Agile-development&quot; class=&quot;headerlink&quot; title=&quot;Agile development&quot;&gt;&lt;/a&gt;Agile development&lt;/h2&gt;&lt;img loading=&quot;lazy&quot; src=&quot;/posts/55dff0b9/6.png&quot; width=&quot;500px&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Agile-Manifesto（敏捷宣言）"><a href="#Agile-Manifesto（敏捷宣言）" class="headerlink" title="Agile Manifesto（敏捷宣言）"></a>Agile Manifesto（敏捷宣言）</h2><h3 id="4-values"><a href="#4-values" class="headerlink" title="4 values"></a>4 values</h3><ul><li>Individuals and interactions over processes and tools（个体和互动高于流程和工具）</li><li>Working software over comprehensive documentation（工作的软件高于详尽的文档）</li><li>Customer collaboration over contract negotiation（客户合作高于合同谈判）</li><li>Responding to change over following a plan（响应变化高于遵循计划）</li></ul><h3 id="12-principles"><a href="#12-principles" class="headerlink" title="12 principles"></a>12 principles</h3><ul><li>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software(我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意)<ul><li>与传统的产品开发方法不同的是，敏捷原则鼓励尽量缩短从构思到发布的时间。尽快将产品送到客户手中。成功地做到这一点，意味着产品经理能够迅速将最小可行产品（minimum viable product, MVP）推出，并利用它来获得真正客户的反馈。这些反馈会被反馈到产品开发过程中，并被用来指导未来的发布</li></ul></li><li>Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage(欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化)</li><li>Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.(经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期)</li><li>Business people and developers must work together daily throughout the project(业务人员和开发人员必须相互合作，项目中的每一天都不例外)</li><li>Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done(激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标)</li><li>The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.(不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈)</li><li>Working software is the primary measure of progress(可工作的软件是进度的首要度量标准)<ul><li>完美的、详细的文档对于工作中的软件来说是次要的。这种心态促使我们迅速将产品推向市场，而不是让文档或 “不完美就不算完成 “的心态成为一个瓶颈。衡量成功的最终标准是一个客户喜爱的工作产品。</li></ul></li><li>Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely(敏敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同维持其步调稳定延续)</li><li>Continuous attention to technical excellence and good design enhances agility.(坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强)</li><li>Simplicity–the art of maximizing the amount of work not done–is essential.(以简洁为本，它是极力减少不必要工作量的艺术)</li><li>The best architectures, requirements, and designs emerge from self-organizing teams(最好的架构、需求和设计出自自组织团队)</li><li>At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. (团队定期地反思如何能提高成效，并依此调整自身的举动)</li></ul><blockquote><p>Test-driven development is a practice commonly used by agile development teams, but it is not a core principle.</p></blockquote><h3 id="YAGNI”-You-Ain’t-Gonna-Need-It"><a href="#YAGNI”-You-Ain’t-Gonna-Need-It" class="headerlink" title="YAGNI” (You Ain’t Gonna Need It)"></a>YAGNI” (You Ain’t Gonna Need It)</h3><blockquote><p>The YAGNI principle is about maximising work not done. It states that a feature should only be implemented when it is clear that it is required, and d<strong>evelopers should not implement something on their assumption that it will be</strong>.</p></blockquote><h2 id="Agile-development"><a href="#Agile-development" class="headerlink" title="Agile development"></a>Agile development</h2><img loading="lazy" src="/posts/55dff0b9/6.png" width="500px"><h3 id="Scrums"><a href="#Scrums" class="headerlink" title="Scrums"></a>Scrums</h3><blockquote><p>Scrum is a simple Agile framework that is used for managing complex product</p><p>Scrum是一个简单的敏捷框架，用于管理复杂的产品</p></blockquote><ul><li>essential part of Scrum：<strong>time-boxed sprints</strong><blockquote><p>Regular, defined periods of development activity is an important feature of scrum. Daily meetings (scrums) take place, but they do not have to be ‘stand-ups’. Particular engineering practices, like automated testing, are not specified in scrum.</p></blockquote></li></ul><h4 id="Scrum-Events"><a href="#Scrum-Events" class="headerlink" title="Scrum Events"></a>Scrum Events</h4><blockquote><p>Prescribed events are used to create regularity and minimize the need to hold a meeting that’s not defined in scrum</p><p>规定的事件被用来创造规律性，并尽量减少举行scrum中没有定义的会议的需要</p></blockquote><ul><li>sprint</li><li>daily scrum</li></ul><h4 id="sprint"><a href="#sprint" class="headerlink" title="sprint"></a>sprint</h4><blockquote><p>A sprint is a <strong>time-box</strong> of one month or less, in our case 2 weeks, during which the team have to finish a usable, potentially releasable products.</p><p>一个冲刺是一个月或更短的时间，在我们的例子中是2周，在此期间，团队必须完成一个可用的、有可能被释放的产品。</p></blockquote><h4 id="daily-scrum"><a href="#daily-scrum" class="headerlink" title="daily scrum"></a>daily scrum</h4><blockquote><p>Daily scrum is a 15-minute time discussion that is held every day to make sure everyone is at the same page, synchronized, and to plan for the next daily scrum.</p><p>每天的Scrum是一个15分钟的讨论，以确保每个人都在同一起跑线上，同步进行，并为下一次的Scrum做计划。</p></blockquote><h3 id="Technique-Practice"><a href="#Technique-Practice" class="headerlink" title="Technique Practice"></a>Technique Practice</h3><ul><li>we must <strong>integrate testing into the development process</strong>. Of course TDD is a great way to do this and this is what we do in this course.<ul><li>to integrate testing into the development process is that testing can act as a <strong>probe</strong>(探针) that lets us know where we are and whether we are done.</li><li>And continuous testing gives us continuous feedback - both <strong>internal and external feedback</strong>.<ul><li>内部反馈的一个例子可能是：这个提高速度的想法可行吗？</li><li>而外部反馈可能来自于客户。这是客户想要的吗？</li></ul></li><li><strong>任何留在最后的东西都会在时间用完后被放弃或减少，所以把测试留到最后有可能根本没有做任何测试</strong></li><li>You can also make running your tests using <strong>Continuous Integration</strong>（持续集成） or CI. <ul><li><strong>This is a regular build process triggered when you check your code into your repository.</strong></li></ul></li></ul></li><li>we should follow good engineering practices.<ul><li>鼓励人们学习代码的其他部分，并确保他们在写代码时尽可能让别人理解，而不是仅仅局限在自己的user story上</li><li>One of the <strong>side effects</strong>（副作用） of collective ownership is that it increases the project’s <strong>Bus Factor</strong>（巴士因子）.<blockquote><p>一个项目或项目至少失去若干关键成员的参与（“被巴士撞了”，指代职业和生活方式变动、婚育、意外伤亡等任意导致缺席的缘由）即导致项目陷入混乱、瘫痪而无法存续时，这些成员的数量即为<strong>巴士系数</strong></p></blockquote></li></ul></li><li>we should normalize collective ownership of the code<ul><li>我们应该将代码的集体所有权规范化</li></ul></li><li>we should pay off technical debt whenever we can<blockquote><p>技术负债（英语：Technical debt），又译技术债，也称为设计负债（design debt）、代码负债（code debt），是程序设计及软件工程中的一个比喻。指开发人员为了加速软件开发，在应该采用最佳方案时进行了妥协，改用了短期内能加速软件开发的方案，从而在未来给自己带来的额外开发负担。这种技术上的选择，就像一笔债务一样，虽然眼前看起来可以得到好处，但必须在未来偿还。软件工程师必须付出额外的时间和精力持续修复之前的妥协所造成的问题及副作用，或是进行重构，把架构改善为最佳实现方式。 </p></blockquote><ul><li>重构是还债最常见的方式，其余还包括增加测试用例等</li></ul></li></ul><h3 id="self-organising-team"><a href="#self-organising-team" class="headerlink" title="self-organising team"></a>self-organising team</h3><blockquote><p>Unlike traditional teams, the self-organizing empowered teams are not directed  and  controlled  from  the  top;  rather  they  evolve  from  team  members  participating actively &amp; collectively in all the Scrum practices and events.</p></blockquote><ul><li>A top-down management style is a threat to self-organising team</li></ul><h4 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h4><blockquote><p>The <code>scrum master</code> is responsible for facilitating progress, but not for managing or leading the team, which is self-organising. The <code>product owner</code> takes responsibility for ensuring requirements are met.</p><p>Scrum主管负责促进进展（确保工作公平分配等），<strong>但不负责管理或领导团队</strong>——团队是自我组织的。产品负责人负责确保需求得到满足</p></blockquote><ul><li><code>Product Owners</code> manage the product backlog and ensure the company gains maximum value from the product.</li><li>注意agile每个人是平等的，<strong>没有所谓的team leader</strong></li></ul><h3 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h3><blockquote><p>The initial planning to discuss the works to be performed and complete for each Sprint. This discussion will be held by the entire team. <strong>This discussion will also set up the initial sprint backlog and user stories</strong></p><p>初步规划，讨论每个Sprint要执行和完成的工作。这个讨论将由整个团队进行。这个讨论也将建立最初的冲刺积压和用户故事。</p></blockquote><ul><li>At which of the following times would a developer write down implementation details<ul><li><strong>During sprint planning</strong>. Within a scrum project, the first time implementation is considered in detail is at the sprint planning stage, when the team have committed to providing the functionality.</li></ul></li></ul><h4 id="User-story（用户故事）"><a href="#User-story（用户故事）" class="headerlink" title="User story（用户故事）"></a>User story（用户故事）</h4><p>用户故事（英语：User story）是软件开发和项目管理中的常用术语，通常是一段简单的功能表述。以客户或使用者的观点撰写下有价值的功能、引导、框架来与使用者进行互动，进而推动工作进程。<strong>可以被认为是一种规格文件，但更精确而言，它代表客户的需求与方向</strong>。以该用户故事来反应对象在组织内的其工作<strong>职责、范围、需要进行的任务</strong>等。</p><ul><li>用户故事在敏捷开发方法中用来定义系统需要提供的功能和实现需求管理。</li><li>example:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User story: make the UI adaptable</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">As an Academic,</span><br><span class="line">I want to have a UI that looks nice on a phone/tablet,</span><br><span class="line">so that I can use the app when I&#x27;m travelling.</span><br></pre></td></tr></table></figure></li></ul><h4 id="Story-points"><a href="#Story-points" class="headerlink" title="Story points"></a>Story points</h4><blockquote><p>A story point is a metric, more abstract than say ‘an hour’, used in agile project management to figure out the implementation difficulty of a certain user story. Fundamentally, it’s a number that tells everyone on the team how challenging a story is, based on factors such as its complexity, risks and efforts involved.</p><p>故事点是一个衡量标准，比 “一小时 “更抽象，在敏捷项目管理中用来计算某个用户故事的实施难度。从根本上说，它是一个数字，告诉团队中的每个人一个故事有多大的挑战性，基于它的复杂性、风险和涉及的工作等因素</p></blockquote><p>Story point estimation is based on three main components:</p><ul><li><p><strong>Risk</strong> includes demands that are vague(模糊), dependendencies and random changes.</p></li><li><p><strong>Complexity</strong> is related to how difficult a feature is to develop for example.</p></li><li><p><strong>Repetition</strong> is determined by how well the team member knows a feature and how monotonous the tasks are.</p><blockquote><p>由团队成员对一个功能的了解程度和任务的单调程度决定的</p></blockquote></li><li><p>document confirmed details about a story</p><ul><li><strong>In acceptance tests</strong>. Defining acceptance tests pins down what the user expects from a feature in an unambiguous form, making it straightforward to check functionality against them</li></ul></li></ul><h4 id="epic"><a href="#epic" class="headerlink" title="epic"></a>epic</h4><ul><li>An <strong>epic</strong> is a single user story, but one that might take a long time to implement, and that might ultimately be broken down into a number of smaller stories. For example, ‘obtain feedback from the user’ on an ecommerce site may be broken down into the stories, ‘provide contact details’, ‘create web form for complaints’, ‘create web form for queries’ etc.</li></ul><h4 id="spike"><a href="#spike" class="headerlink" title="spike"></a>spike</h4><blockquote><p>A spike is a user story for which the team cannot estimate the effort needed. In such a case, it is better to run time-boxed research, exploration to learn about the issue or the possible solutions. As a result of the spike, the team can break down the features into stories and estimate them.</p><ul><li>尖峰是一个用户故事，团队无法估计所需的工作量</li><li>作为尖峰的结果，团队可以将功能分解为故事，并对其进行评估</li></ul></blockquote><ul><li>需要通过iterative approach来解决</li></ul><hr><h4 id="Product-Backlog"><a href="#Product-Backlog" class="headerlink" title="Product Backlog"></a>Product Backlog</h4><p><strong>整个项目必须做的所有事情</strong></p><ul><li>一个有效的产品积压将清单上的每个项目分解成一系列的步骤，以帮助开发团队。</li><li>必须有一个持续时间，所以团队知道什么时候开始任务，以及在他们必须完成任务之前有多长时间。</li><li>它总是处于变化的状态</li></ul><blockquote><p>Product backlog items take a variety of formats, with user stories being the most common. The team using the product backlog determines the format they chose to use and look to the backlog items as reminders of the aspects of a solution they may work on.</p></blockquote><ul><li>Complement estimates</li><li>Requirements</li><li>Prioritisation infomation</li><li>Not include implement details</li></ul><h4 id="Sprint-backlog"><a href="#Sprint-backlog" class="headerlink" title="Sprint backlog"></a>Sprint backlog</h4><p><strong>The sprint backlog is like a subset of the product backlog</strong></p><ul><li>它只包含那些可以在每个敏捷冲刺期间完成的项目</li><li>Unlike the product backlog, though, the sprint backlog is <strong>unchanged</strong> during the period of the sprint</li></ul><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><h4 id="paper-prototyping"><a href="#paper-prototyping" class="headerlink" title="paper-prototyping"></a>paper-prototyping</h4><blockquote><p>A <strong>software product can be tested before implementation starts,</strong> <strong>by using a method like ‘paper-prototyping’ or</strong> wire-framing, which allow the user interface to be trialled before it is built.</p></blockquote><h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><h4 id="Burn-down-chart-燃尽图"><a href="#Burn-down-chart-燃尽图" class="headerlink" title="Burn down chart(燃尽图)"></a>Burn down chart(燃尽图)</h4><blockquote><p>A Burn Up Chart is a tool used to track how much work has been completed, and show the total amount of work for a project or iteration.  It’s used by multiple software engineering methods but these charts are particularly popular in Agile and Scrum software project management. The completed work and total work is shown on the vertical axis in whatever units a project team feels works best, i.e., work-hours, work-days, story points, or any other work unit.  The horizontal access displays time, usually in days, weeks, or iterations (sprints).</p><p>燃烧图是一种用于跟踪已完成的工作的工具，并显示一个项目或迭代的总工作量。 它被多种软件工程方法所使用，但这些图表在敏捷和Scrum软件项目管理中特别流行。已完成的工作和总工作量在纵轴上以项目组认为最有效的单位显示，即工作小时、工作天、故事点或任何其他工作单位。 横轴显示的是时间，通常以天、周、或迭代（冲刺）为单位。</p></blockquote><img loading="lazy" src="/posts/55dff0b9/burn.png" width="500px"><h3 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h3><h4 id="stand-up"><a href="#stand-up" class="headerlink" title="stand up"></a>stand up</h4><blockquote><p>站会（英语：stand-up meeting，或stand-up），是一种参与者以站姿进行的会议。这种会议以站姿这种不太令人舒适的姿势目的是为了让会议时间变短</p><ul><li>对开发进度进行汇报和许诺</li><li>讨论潜在的技术挑战、任务分配以及时间安排</li></ul></blockquote><h4 id="sprint-review-amp-amp-retrospective"><a href="#sprint-review-amp-amp-retrospective" class="headerlink" title="sprint review &amp;&amp; retrospective"></a>sprint review &amp;&amp; retrospective</h4><ul><li>A <code>sprint review</code> updates customers about progress on the project.  So <strong>the customers</strong> decides which practices worked best during the sprint<ul><li><strong>New software features would be explained during a sprint review</strong></li></ul></li><li><code>Sprint Retrospective</code> is an opportunity for the team to inspect itself and <strong>create a plan for improvement to be enacted in the next sprint</strong>.<ul><li>The software development process is examined by the team internally in a <code>retrospective</code>.</li></ul></li></ul><h4 id="Scaled-agile-framework-基于大规模的敏捷框架"><a href="#Scaled-agile-framework-基于大规模的敏捷框架" class="headerlink" title="Scaled agile framework(基于大规模的敏捷框架)"></a>Scaled agile framework(基于大规模的敏捷框架)</h4><blockquote><p>扩展的敏捷框架（SAFe）是一套组织和工作流程模式，旨在指导企业扩展精益和敏捷实践</p><p>The SAFe planning cycle recommends including an additional iteration after a release, allowing teams<br>to improve their practices and are ready for the next planning increment</p></blockquote><p>todo</p><ul><li>ease the demands on their time. If multiple teams are planning their sprints at the same time then <strong>the product owner could become a bottleneck</strong></li><li>take advantage of different specialist expertise.</li><li>share the product backlog</li><li>partion the product backlog<ul><li>Two simple options for this are <strong>views</strong> and <strong>themes</strong>.</li><li>The key with both of these partitioning methods - views and themes - is that the stories themselves remain on, and are prioritized as part of, the single backlog.</li></ul></li></ul><p>Underlying（基本） principles of SAFe</p><ul><li>Take an economic view</li><li>Apply systems thinking</li><li>Assume variability; preserve options</li><li>Build incrementally with fast integrated learning cycles</li><li>Base milestones on objective evaluation of working systems</li><li>Visualize and limit work-in-progress, reduce batch sizes, and manage queue lengths</li><li>Apply cadence (timing), synchronize with cross-domain planning</li><li>Unlock the intrinsic motivation of knowledge workers</li><li>Decentralize decision-making</li><li>Organize around value</li></ul><h3 id="Trunk-Based-Development-基于主干的开发模式"><a href="#Trunk-Based-Development-基于主干的开发模式" class="headerlink" title="Trunk Based Development (基于主干的开发模式)"></a>Trunk Based Development (基于主干的开发模式)</h3><h4 id="The-Problems-with-Git-Flow"><a href="#The-Problems-with-Git-Flow" class="headerlink" title="The Problems with Git Flow"></a>The Problems with Git Flow</h4><ul><li>Merge Conflicts</li><li>Feature Separation<ul><li>You cannot test the combination of two features until they are merged into one branch</li></ul></li><li>The Unpredictable Release<ul><li>It is impossible to know how much time you will need for a release if the feature branches are not merged yet</li></ul></li></ul><blockquote><p>You only have one main branch, the trunk (also called master or mainline). There is no develop branch anymore. Also no long-living feature branches! All your commits are merged into the trunk as soon as possible, at least once a day. By merging to the trunk so quickly, merge conflicts become very rare. Using <strong>short-living branches</strong> is one of the 4 Simple Tricks to Avoid Merge Conflicts. </p><p>The big question is: <strong>How can you avoid to get an unstable master branch if you push your code into it every day, even if a feature is not finished, yet?</strong> </p></blockquote><h4 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h4><blockquote><p>We started to use <strong>feature toggles</strong> – little switches in the source code that decide whether a feature is active or not.</p><p>As long as a feature is not ready to be released, it is disabled. That allows us to already push it into the develop branch without breaking anything. Developers and manual testers can enable every feature in some settings which are hidden to the normal users.</p><p><strong>A/B testing</strong>. Since every feature toggle can be controlled remotely we have the possibility to enable a feature only for a part of our user base and disable it for the others. Doing that we can see how well a feature really performs. We can test new features on small test groups and then decide whether we should enable it for everybody or remove it if we see a negative impact</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( FeatureManager.<span class="built_in">isFeatureEnabled</span>(<span class="string">&quot;NewLoginForm&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">openNewLoginForm</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">openOldLoginForm</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h3><blockquote><p>In <strong>state verification</strong> you have the object under testing perform a certain operation, after being supplied with all necessary collaborators. <strong>When it ends, you examine the state of the object and/or the collaborators, and verify it is the expected one</strong>.</p><p>In <strong>behaviour verification</strong>, on the other hand, you specify exactly which methods are to be invoked on the collaboratos by the SUT, <strong>thus verifying not that the ending state is correct, but that the sequence of steps performed was correct</strong></p></blockquote><h3 id="Continuous-delivery-持续交付"><a href="#Continuous-delivery-持续交付" class="headerlink" title="Continuous delivery(持续交付)"></a>Continuous delivery(持续交付)</h3><img loading="lazy" src="/posts/55dff0b9/4.jpg" width="500px"><ul><li>feature toggles同样可用于实现持续交付</li></ul><h3 id="Limitations-of-Agile-Methodologies"><a href="#Limitations-of-Agile-Methodologies" class="headerlink" title="Limitations of Agile Methodologies"></a>Limitations of Agile Methodologies</h3><ul><li>it is not suitable for maintenance（lack of documentation）</li><li>agile Methodologies depend heavily on the user involvement, and thus, the success of the project will depend on the cooperation and communication of the user（项目的成功将取决于用户的合作和沟通）</li><li>agile methodologies concentrate work quality on the skills and behaviors of the developers, as the design of the modules and sub-modules are created mainly by <strong>single</strong> developer.<ul><li>敏捷方法论对于成员数量相对较少（不低于3人，不超过9人）的团队来说效果最好，因此，对于成员数量较多的团队来说，敏捷方法论不会有好的效果</li></ul></li></ul><p>采用敏捷开发必须要先满足以下条件：</p><ol><li>cooperation and face to face relation between the <strong>customers</strong> and the <strong>development team</strong></li><li>evolving and changing requirements of the project</li><li>developers having good individual skills and experiences</li></ol><hr><h2 id="Test-driven-development-TDD"><a href="#Test-driven-development-TDD" class="headerlink" title="Test-driven development(TDD)"></a>Test-driven development(TDD)</h2><blockquote><p>测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统软件开发流程的新型的开发方法。 它要求在编写某个功能的代码之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。 这有助于编写简洁可用和高质量的代码，并加速开发过程</p></blockquote><p>特点</p><ul><li><p>Reduced regressions</p></li><li><p>Lean code</p></li><li><p>High test coverage</p></li><li><p>reasons to use Test-Driven Development: <strong>TDD provides a clear and unambiguous progress meter(进度表)</strong>. If we know how many features are fully tested and complete, then we know how far we are through development. This also improves the quality of our estimations and means that we can include the customer in daily development decisions. TDD does provide useful quality assurance for our code as we write it, but it doesn’t mean we can ignore quality assurance of the software as a whole.</p></li><li><p><strong>test assumes nothing about previously executed tests</strong></p></li></ul><h3 id="Test-doubles（测试替身）"><a href="#Test-doubles（测试替身）" class="headerlink" title="Test doubles（测试替身）"></a>Test doubles（测试替身）</h3><ul><li>SUT: System Under Test</li><li>collaborator objects: secondary objects</li><li>Tests Doubles(测试替身): <blockquote><p> In automated unit testing, it may be necessary to use objects or procedures that look and behave like their release-intended counterparts, but are actually simplified versions that reduce the complexity and facilitate testing. A test double is a generic (meta) term used for these objects or procedures. </p></blockquote></li></ul><p>type</p><ul><li><strong>Test stub（桩）</strong><ul><li>Stub is an object that holds predefined data and uses it to answer calls during tests. It is used when we cannot or don’t want to involve objects that would answer with real data or have undesirable side effects.</li></ul></li><li><strong>Mock object</strong><ul><li>在各种测试桩中，只有moc提供了<strong>behavior verification行为验证</strong></li><li><a href="https://zhuanlan.zhihu.com/p/345988487">Python 中 Mock 到底该怎么玩？一篇文章告诉你（超全） - CDA数据分析师的文章 - 知乎</a><blockquote><p>在测试验证过程中，对于那些尚未完成或不稳定的对象，用一个虚拟对象来替代，以便测试的测试方法，因此，这个虚拟的对象是 Mock 对象，Mock 对象是真实对象在调试期间的代替品</p><p>优势</p><ul><li>前、后端并行开发</li><li>模拟无法访问的资源</li><li>隔离系统，避免脏数据干扰测试结果</li></ul></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">假设 Product 类中有 2 个方法</span></span><br><span class="line"><span class="string">- get_product_status_by_id</span></span><br><span class="line"><span class="string">- buy_product</span></span><br><span class="line"><span class="string">其中，</span></span><br><span class="line"><span class="string">- get_product_status_by_id 方法还没有实现</span></span><br><span class="line"><span class="string">- buy_product 方法依赖于 get_product_status_by_id 方法的返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> mock</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest_mock.product_impl <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestProduct</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_success</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 成功结果</span></span><br><span class="line">        mock_success_value = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;num&quot;</span>: <span class="number">23</span>&#125;</span><br><span class="line"></span><br><span class="line">        product = Product()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get_product_status_by_id还没写好，故mock</span></span><br><span class="line">        product.get_product_status_by_id = mock.Mock(return_value=mock_success_value)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用要测试的函数buy_product</span></span><br><span class="line">        <span class="keyword">assert</span> product.buy_product(<span class="number">1</span>).get(<span class="string">&quot;status&quot;</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Test spy</strong><ul><li>The spy is closest to a mock, and it can record some information about how it was called, but a mock contains expectations which form a specification of the calls they are expected to receive.</li></ul></li><li><strong>Fake object（伪件）</strong><ul><li>Fakes are objects that have working implementations, but not same as production one. Usually they take some shortcut and have simplified version of production code.</li><li><strong>Stub and mock are both fakes</strong></li></ul></li><li><strong>Dummy object（傀儡）</strong></li></ul><img loading="lazy" src="/posts/55dff0b9/1.jpg" width="500px"> <hr><img loading="lazy" src="/posts/55dff0b9/2.jpg" width="500px"><hr><img loading="lazy" src="/posts/55dff0b9/3.jpg" width="500px"><h4 id="stub-vs-test"><a href="#stub-vs-test" class="headerlink" title="stub vs test"></a>stub vs test</h4><blockquote><ul><li>A stub is a test double that returns values to the SUT.</li><li>A mock is a test double that a test uses to verify that the SUT correctly invokes a dependency. </li></ul><hr><ul><li>a stub is to notice that the stub can never fail the test. </li><li>On the other hand, the test will use a mock object to verify whether the test failed or not.</li></ul></blockquote><h3 id="test-fixtures-测试环境"><a href="#test-fixtures-测试环境" class="headerlink" title="test fixtures (测试环境)"></a>test fixtures (测试环境)</h3><blockquote><p>A test fixture is an environment used to consistently test some item, device, or piece of software. Test fixtures can be found when testing electronics, software and physical devices  </p><hr><p>如果在测试前需要准备环境，测试后恢复环境，或者每次测试前的步骤都是一样的，可以采用Test fixture，使代码更简洁</p></blockquote><ul><li>A data file.</li><li>A pre-populated database.</li><li>A random seed.<blockquote><p>A random seed would be used to ensure that a pseudo-random number generator output consistant numbers, so ensuring that tests relying on random numbers are repeatable</p></blockquote></li></ul><blockquote><p>test fixtures的例子包括用特定的已知数据集加载数据库，擦除硬盘并安装一个已知的清洁操作系统，复制特定的已知文件集，或准备输入数据以及设置和创建模拟对象。</p></blockquote><ul><li>更多参考：<a href="https://blog.csdn.net/totorobig/article/details/111823208">Pytest之Fixture参数详解及使用_totorobig的博客-CSDN博客_pytest.fixure</a></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment"># fixture函数(类中) 作为多个参数传入</span></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打开浏览器&quot;</span>)</span><br><span class="line">    a = <span class="string">&quot;account&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">    </span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;关闭浏览器&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>:</span></span><br><span class="line">    <span class="comment">#传入lonin fixture</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self, login</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;001传入了loging fixture&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> login == <span class="string">&quot;account&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#传入logout fixture</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self, logout</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;002传入了logout fixture&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self, login, logout</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;003传入了两个fixture&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;004未传入任何fixture哦&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main()</span><br></pre></td></tr></table></figure><h3 id="Limitation-of-TDD"><a href="#Limitation-of-TDD" class="headerlink" title="Limitation of TDD"></a>Limitation of TDD</h3><blockquote><p>you cannot drive all programming tasks by tests. This has its roots in the fact that TDD relies on unit tests, but the fact that it relies on unit tests is not a limitation in itself. Bug fixing and maintenance is an area where TDD comes into its own: you can use the bug as failing test data, and when that test passes you know the bug has been fixed.</p><p>你不能用测试来驱动所有的编程任务。这根源于TDD依赖于单元测试的事实，但它依赖于单元测试的事实本身并不是一种限制。错误修复和维护是TDD发挥作用的一个领域：你可以把错误作为失败的测试数据，当该测试通过时，你就知道该错误已经被修复。</p></blockquote><ul><li>slow process<ul><li>they often have the sensation that the implementation of latest features takes longer if developers write code that will not find themselves within the product half the time. It helps if the entire team agrees on the importance of unit tests.</li></ul></li><li>tests need to be maintained because the code has got to<ul><li>Whenever requirements change, you would like to vary the code and tests. But you’re working with TDD. this suggests that you simply got to change the tests first then make the tests pass</li><li>thus more time spent</li></ul></li><li>No silver bullet<ul><li>用tdd并不保证让你的bug完全消失</li></ul></li></ul><h3 id="refactoring-at-different-levels"><a href="#refactoring-at-different-levels" class="headerlink" title="refactoring at different levels"></a>refactoring at different levels</h3><img loading="lazy" src="/posts/55dff0b9/5.png" width="400px"><h3 id="Integration-testing"><a href="#Integration-testing" class="headerlink" title="Integration testing"></a>Integration testing</h3><p>集成测试</p><ul><li>Integration testing is conducted to evaluate the compliance of a system or component with specified functional requirements</li><li>It occurs after unit testing and before system testing.</li></ul><p>目的</p><ol><li>在把各个模块连接起来时，穿越模块接口的数据是否会丢失。</li><li>各个子功能组合起来，能否达到预期的要求的父功能。</li><li>一个模块的功能是否会对另一个模块的功能产生不利的影响。</li><li>全局数据结构是否有问题，会不会被异常修改。</li><li>单个模块的误差积累起来，是否会放大，从而达到不可接受的程度。</li></ol><h4 id="vs-unit-test"><a href="#vs-unit-test" class="headerlink" title="vs unit test"></a>vs unit test</h4><blockquote><p>While unit testing is used to find bugs in individual functions, integration testing tests the system as a whole. These two approaches should be used together, instead of doing just one approach over the other. When a system is comprehensively unit tested, it makes integration testing far easier because many of the bugs in the individual components will have already been found and fixed</p></blockquote><h3 id="Regression-test"><a href="#Regression-test" class="headerlink" title="Regression test"></a>Regression test</h3><blockquote><p>回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。自动回归测试将大幅降低系统测试、维护升级等阶段的成本。</p><p>回归测试作为软件生命周期的一个组成部分，在整个软件测试过程中占有很大的工作量比重，软件开发的各个阶段都会进行多次回归测试。在渐进和快速迭代开发中，新版本的连续发布使回归测试进行的更加频繁</p></blockquote><h3 id="End-to-End-test-System-testing"><a href="#End-to-End-test-System-testing" class="headerlink" title="End to End test(System testing)"></a>End to End test(System testing)</h3><ul><li>System testing is testing conducted on a complete integrated system to evaluate the system’s compliance with its specified requirements.<ul><li>e.g. Mobile-device testing</li></ul></li></ul><h3 id="Acceptance-testing（验收测试）"><a href="#Acceptance-testing（验收测试）" class="headerlink" title="Acceptance testing（验收测试）"></a>Acceptance testing（验收测试）</h3><ul><li>blackbox testing</li><li>Dynamic analysis</li></ul><h4 id="vs-Unit-Test"><a href="#vs-Unit-Test" class="headerlink" title="vs Unit Test"></a>vs Unit Test</h4><blockquote><p>Unit tests, which are written by programmers, for programmers, in a programming language. And acceptance tests, which are written by business people (and QA), for business people, in a high level specification language</p><hr><p>单元测试深入到代码中，测试独立的单元。事实上，程序员必须花大力气将系统的各个组成部分解耦，以便独立测试它们。因此，单元测试很少对系统的大块集成部分进行测试。</p><p>另一方面，验收测试对系统中更大的集成块进行操作。他们通常从系统的输入（或非常接近输入的点）驱动系统，并从输出（或再次，非常接近输出）验证操作</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs">Test Doubles - Fakes, Mocks and Stubs</a></li><li><a href="https://team-coder.com/from-git-flow-to-trunk-based-development/">From Git Flow to Trunk Based Development</a></li></ul><div class="row">    <embed src="./Introduction.pdf" width="100%" height="550" type="application/pdf"></div>]]></content:encoded>
      
      
      <category domain="https://hejueyun.github.io/categories/Software-Engineering/">Software Engineering</category>
      
      
      
      <comments>https://hejueyun.github.io/posts/55dff0b9/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
